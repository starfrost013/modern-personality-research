

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 0854155A7D522DBF11A3F1DAF22D8A6D157496C5FD3FDF95809EEED73A82093F
; Input MD5    : DBA8DED7D0D6F8C8D2DD1ED42F51CEAF
; Input CRC32  : 0E431DF3

; File Name   : D:\research\win1.03\debugkernel\KERNEL.EXE
; Format      : New Executable (NE) Windows
; Title 'Microsoft Windows Kernel Interface for 2.x and 3.x'
; Target operating system         unknown
; File Load CRC                   00D0674F3h
; Program Entry Point   (CS:IP)   0001:800A
; Initial Stack Pointer (SS:SP)   0000:0000
; Auto Data Segment Index         0000h  (     0. )
; Initial Local Heap Size         0200h  (   512. )
; Initial Stack Size              0000h  (     0. )
; Linker Version                  4.0
; Minimum code swap area size     0
; Expected Windows Version        0.0
; Program Flags (8004): DLL No data Global initialization
; Other EXE Flags (0000):
; ----------------------------------------------------------------------------
; Segment Number    : 1
; Alloc Size        : 9890h
; Offset in the file: 0B90h  Length: 9890h
; Attributes  (0040): CODE Preloaded DPL: 0

                .686p
                .mmx
                .model flat

; ===========================================================================

; Segment type: Pure code
cseg01          segment para public 'CODE' use16
                assume cs:cseg01
                assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
HGLOBALHEAP     dw 0                    ; DATA XREF: GLOBALMASTERHANDLE↓r
                                        ; GLOBALINIT+93↓w
PGLOBALHEAP     dw 0                    ; DATA XREF: ALLOCALLSEGS+6E↓r
                                        ; FREEMODULE+60↓r ...
PSWAPHOOK       dd 0                    ; DATA XREF: EXITKERNEL+6C↓r
                                        ; GHANDLE+7E↓r ...
HEXEHEAD        dw 0                    ; DATA XREF: FINDEXEINFO+9↓r
                                        ; ADDMODULE+3↓r ...
HEXESWEEP       dw 0                    ; DATA XREF: ADDMODULE+1C↓r
                                        ; ADDMODULE+2C↓w ...
HTHUNKS         dw 0                    ; DATA XREF: MAKEPROCINSTANCE+6↓r
                                        ; MAKEPROCINSTANCE+1E↓r ...
HHANDLE         dw 0                    ; DATA XREF: PATCHTHUNKS+B↓r
                                        ; PATCHTHUNKS+109↓r ...
TOPPDB          dw 0                    ; DATA XREF: CREATETASK+9A↓r
                                        ; ENABLEDOS+28↓r ...
HEADPDB         dw 0                    ; DATA XREF: CREATETASK+B2↓w
                                        ; CLOSEOPENFILES+65↓r ...
TOPSIZEPDB      db 2 dup(0)
HEADTDB         dw 0                    ; DATA XREF: PATCHSTACK+B↓r
                                        ; SEARCHSTACK+7↓r ...
CURTDB          dw 0                    ; DATA XREF: GETCURRENTTASK↓r
                                        ; INSERTTASK+F↓w ...
LOCKTDB         dw 0                    ; DATA XREF: LOCKCURRENTTASK:loc_3993↓w
                                        ; BOOTSCHEDULE+2B↓r
FWINX           dw 0                    ; DATA XREF: ISSCREENGRAB↓r
                                        ; BOOTSTRAP+67↓w ...
F8087           dw 0                    ; DATA XREF: STATEXJUMP+A↓r
INSCHEDULER     db 0                    ; DATA XREF: BOOTSCHEDULE:loc_3B5F↓w
                                        ; BOOTSCHEDULE+99↓w ...
FEMM            db 0                    ; DATA XREF: CREATETASK+22↓r
                                        ; CREATETASK+8B↓r ...
BUFFER          dw 0                    ; DATA XREF: BUFFERINIT+2↓r
                                        ; BUFFERINIT+55↓w ...
BUFADDR         dw 0                    ; DATA XREF: BUFFERINIT+63↓r
                dw 0
HFILE           dw 0FFFFh               ; DATA XREF: BUFFERINIT+38↓w
INT22BASE       dw 88h                  ; DATA XREF: DOSTerminateHook+6D↓r
                                        ; INITDOSVARP+78↓r ...
PDMAADD         dd 0                    ; DATA XREF: SAVESTATE:loc_39CA↓r
PINDOS          dd 0                    ; DATA XREF: BOOTSCHEDULE+38↓r
PCNTCFLAG       dd 0                    ; DATA XREF: SAVESTATE+42↓r
                                        ; RESTORESTATE+24↓r ...
PCURRENTPDB     dd 0                    ; DATA XREF: SEARCHPATH+12↓r
                                        ; GETTEMPFILENAME+20↓r ...
PCURRENTDRIVE:
                align 8
PERRMODE        dd 0                    ; DATA XREF: SAVESTATE+4D↓r
                                        ; RESTORESTATE+2F↓r ...
PSFTLINK        dd 0                    ; DATA XREF: EXITKERNEL+4C↓r
                                        ; INITDOSVARP+5B↓w ...
PFILETABLE      dd 0                    ; DATA XREF: GROWSFT+8↓r
                                        ; GROWSFT+82↓r ...
FILEENTRYSIZE   dw 0                    ; DATA XREF: GROWSFT+D↓r
                                        ; CLOSEOPENFILES:loc_397A↓r ...
LASTDRIVESWAPPED db 0                   ; DATA XREF: PROMPT+3C↓w
                                        ; GETLASTDISKCHANGE+2↓w
FBREAK          db 0                    ; DATA XREF: ENABLEDOS+1C↓w
                                        ; DISABLEDOS+23↓r
DOS_VERSION     db 0                    ; DATA XREF: GETTEMPFILENAME+AB↓r
                                        ; CLOSEOPENFILES+8↓r ...
DOS_REVISION    db 0                    ; DATA XREF: sub_4338+55↓r
                                        ; INT24HANDLER+C1↓r ...
DOS_OEM         db 0                    ; DATA XREF: INITDOSVARP+29↓w
FINT21          db 0                    ; DATA XREF: OPENFILE+B2↓r
                                        ; OPENFILE+150↓r ...
FEVENT          db 0
KEYINFO         db 0,0,0,0,0,0,0,0,0,0,0,0 ; DATA XREF: ISKANJI+8↓r
                                        ; INITFWDREF+C9↓o ...
                                        ; KEYINFO IS A STRUCT
FFAREAST        db 0                    ; DATA XREF: ANSIPREV+8↓r
                                        ; ISKANJI↓r ...
PMBOXPROC       dd 0                    ; DATA XREF: SHOWDIALOGBOX2+12↓r
                                        ; INITFWDREF+62↓w ...
PEXITPROC       dd 0                    ; DATA XREF: DOSTerminateHook+C8↓r
                                        ; BOOTSTRAP+D9↓w ...
PSYSPROC        dd 0                    ; DATA XREF: ISFLOPPY+5↓r
                                        ; ENABLEDOS+83↓r ...
PTIMERPROC      dd 0                    ; DATA XREF: BOOTDONE+53↓r
                                        ; INITFWDREF+A4↓w ...
PKEYPROC        dd 0                    ; DATA XREF: OPENFILE+BE↓r
                                        ; INITFWDREF+C2↓w ...
PREVINT20PROC   db 0,0,0,0              ; DATA XREF: DISABLEINT21+1B↓r
                                        ; INITFWDREF+9↓w ...
PREVINT21PROC   dd 0                    ; DATA XREF: OPENFILE+59↓r
                                        ; RESTORESTATE+42↓r ...
PREVINT24PROC   dd 0                    ; DATA XREF: ENABLEDOS+67↓w
                                        ; DISABLEDOS+19↓r ...
PREVINT27PROC   db 0,0,0,0              ; DATA XREF: DISABLEINT21+3C↓r
                                        ; INITFWDREF+30↓w ...
PREVINT3FPROC   dd 0                    ; DATA XREF: EXITKERNEL+D↓r
                                        ; PDB_CALL_SYSTEM_ENTRY+9↓r ...
PREVBCON        dd 0                    ; DATA XREF: ENABLEDOS+54↓w
                                        ; DISABLEDOS+3E↓r ...
FBOOTING        db 1                    ; DATA XREF: ALLOCSEG+16↓r
                                        ; ADDMODULE+35↓r ...
CDEVAT          db 0                    ; DATA XREF: INT24HANDLER+1D↓w
                                        ; INT24HANDLER+5B↓r ...
OLDERRNO        dw 0                    ; DATA XREF: INT24HANDLER+78↓w
                                        ; INT24HANDLER+EA↓r
OUTBUF          db 32h dup(0)
BUFPOS          dw 0                    ; DATA XREF: INT24HANDLER+44↓w
                                        ; APPENDFIRST↓w ...
USERPROBUF      db 50h dup(0)
SZUSERPRO       db 'WIN.INI',0
SZDISKMSG1      db 'Insert ',0
SZDISKMSG2      db ' disk in drive '
DRVLET          db 'X:',0               ; DATA XREF: PROMPT+E↓r
                                        ; PROMPT+39↓w
                                        ; placeholder
SZWINDISK       db 'Windows System',0
SZDISKCAP       db 'Change Disk',0
SYSERR          db 'System Error',0
SZCANNOTFIND1   db 'Cannot find ',0
                db    0
SZCANNOTFIND2   db 'Write protected disk in drive '
DRVLET1         db 'X:',0               ; DATA XREF: INT24HANDLER+4A↓w
MSGCANNOTREADDRV db 'Cannot read from drive ' ; DATA XREF: TESTEMM+5↓r
DRVLET2         db 'X:',0               ; DATA XREF: INT24HANDLER+4D↓w
MSGCANNOTWRITEDRV db 'Cannot write to drive '
DRVLET3         db 'X:',0               ; DATA XREF: INT24HANDLER+50↓w
SZERRCANNOTREAD db 'Cannot read from device ',0
                db 8 dup(0)
SZERRCANNOTWRITE db 'Cannot write to device ',0
                db 8 dup(0)
SZERRPRINTERNOTREADY db 'Printer not ready',0
SZERRFAILEDLOADING db 'KERNEL: Failed loading - ',0
SZERRFAILEDLOADINGNEWINSTANCE db 'KERNEL: Failed loading new instance of - ',0
SZERRFAILEDLOADINGRESOURCE db 'Error loading from resource file - ',0
                db 0Dh,0Ah,0
SZERRFATALEXIT  db 7,0Dh,0Ah
                db 'FatalExit code = ',0
SZERRSTACKOVERFLOW db ' stack overflow',0
SZERRSTACKTRACE db 0Dh,0Ah
                db 'Stack trace:',0Dh,0Ah,0
SZERRABORT      db 7,0Dh,0Ah
                db 'Abort, Break or Ignore? ',0
SZERRINVALIDBPCHAIN db 'Invalid BP chain',7,0Dh,0Ah,0
                db ': ',0
                align 2
;
; External Entry #3 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETVERSION
GETVERSION      proc far                ; CODE XREF: RETTHUNK+6B↓p
                mov     ax, 301h        ; 0103 = Windows 1.03
                retf
GETVERSION      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

STARTMODULE     proc near               ; CODE XREF: LOADMODULE+333↓p
                                        ; LOADMODULE+3CF↓p ...

var_8           = dword ptr -8
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch

                push    bp
                mov     bp, sp
                sub     sp, 8
                mov     dx, [bp+arg_2]
                sub     ax, ax
                mov     word ptr [bp+var_8], ax
                mov     word ptr [bp+var_8+2], dx
                les     bx, [bp+var_8]
                mov     ax, es:[bx+14h]
                or      ax, es:[bx+16h]
                jz      short loc_337
                cmp     word ptr es:[bx+0Eh], 0
                jz      short loc_337
                push    dx
                push    word ptr es:[bx+0Eh]
                push    [bp+arg_0]
                push    [bp+arg_0]
                call    LOADSEGMENT
                or      ax, ax
                jnz     short loc_337
                cmp     [bp+arg_0], 0FFFFh
                jz      short loc_333
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr _LCLOSE

loc_333:                                ; CODE XREF: STARTMODULE+3B↑j
                                        ; STARTMODULE+BB↓j
                sub     ax, ax
                jmp     short loc_3AE
; ---------------------------------------------------------------------------

loc_337:                                ; CODE XREF: STARTMODULE+1C↑j
                                        ; STARTMODULE+23↑j ...
                push    [bp+arg_2]
                push    [bp+arg_0]
                call    STARTPROCADDRESS
                mov     [bp+var_4], ax
                mov     [bp+var_2], dx
                cmp     [bp+arg_0], 0FFFFh
                jz      short loc_354
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr _LCLOSE

loc_354:                                ; CODE XREF: STARTMODULE+5C↑j
                mov     ax, [bp+var_4]
                or      ax, [bp+var_2]
                jz      short loc_3A0
                les     bx, [bp+var_8]
                test    word ptr es:[bx+0Ch], 8000h
                jz      short loc_37B
                push    [bp+arg_2]
                push    [bp+arg_6]
                push    [bp+arg_4]
                push    [bp+var_2]
                push    [bp+var_4]
                call    STARTLIBRARY
                jmp     short loc_3AE
; ---------------------------------------------------------------------------

loc_37B:                                ; CODE XREF: STARTMODULE+77↑j
                push    [bp+arg_2]
                call    GETSTACKPTR
                push    dx
                push    ax
                push    [bp+arg_6]
                push    [bp+arg_4]
                nop
                push    cs
                call    near ptr CREATETASK
                push    ax
                push    [bp+arg_8]
                push    [bp+arg_2]
                push    [bp+var_2]
                push    [bp+var_4]
                call    STARTTASK
                jmp     short loc_3AE
; ---------------------------------------------------------------------------

loc_3A0:                                ; CODE XREF: STARTMODULE+6C↑j
                les     bx, [bp+var_8]
                test    word ptr es:[bx+0Ch], 8000h
                jz      short loc_333
                mov     ax, [bp+arg_2]

loc_3AE:                                ; CODE XREF: STARTMODULE+47↑j
                                        ; STARTMODULE+8B↑j ...
                mov     sp, bp
                pop     bp
                retn    0Ah
STARTMODULE     endp

;
; External Entry #45 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOADMODULE
LOADMODULE      proc far                ; CODE XREF: LOADMODULE+23E↓p
                                        ; LOADLIBRARY+9↓j ...
                push    ds              ; KERNEL_45
                pop     ax
                nop
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                sub     sp, 0A2h
                push    si
                mov     ax, [bp+0Ch]
                sub     dx, dx
                or      ax, dx
                jnz     short loc_3CF
                jmp     loc_488
; ---------------------------------------------------------------------------

loc_3CF:                                ; CODE XREF: LOADMODULE+16↑j
                push    word ptr [bp+0Ch]
                push    word ptr [bp+0Ah]
                nop
                push    cs
                call    near ptr LSTRLEN
                mov     [bp-0Ah], ax
                add     ax, [bp+0Ah]
                mov     dx, [bp+0Ch]
                mov     [bp-10h], ax
                mov     [bp-0Eh], dx

loc_3E9:                                ; CODE XREF: LOADMODULE+AD↓j
                mov     ax, [bp-0Ah]
                dec     word ptr [bp-0Ah]
                or      ax, ax
                jz      short loc_408
                les     bx, [bp-10h]
                mov     al, es:[bx]
                mov     [bp-0A2h], al
                cmp     al, 5Ch ; '\'
                jz      short loc_405
                cmp     al, 3Ah ; ':'
                jnz     short loc_45E

loc_405:                                ; CODE XREF: LOADMODULE+4B↑j
                inc     word ptr [bp-10h]

loc_408:                                ; CODE XREF: LOADMODULE+3D↑j
                mov     word ptr [bp-0Ah], 0

loc_40D:                                ; CODE XREF: LOADMODULE+CC↓j
                les     bx, [bp-10h]
                inc     word ptr [bp-10h]
                mov     al, es:[bx]
                mov     [bp-4], al
                or      al, al
                jz      short loc_421
                cmp     al, 2Eh ; '.'
                jnz     short loc_463

loc_421:                                ; CODE XREF: LOADMODULE+67↑j
                lea     ax, [bp-9Ch]
                push    ss
                push    ax
                push    word ptr [bp-0Ah]
                call    FINDEXEINFO
                mov     [bp-16h], ax
                or      ax, ax
                jnz     short loc_491
                push    word ptr [bp+0Ch]
                push    word ptr [bp+0Ah]
                lea     ax, [bp-9Ch]
                push    ss
                push    ax
                mov     ax, offset loc_2800
                push    ax
                nop
                push    cs
                call    near ptr OPENFILE
                mov     [bp-9Eh], ax
                inc     ax
                jnz     short loc_491
                cmp     word ptr [bp-9Ah], 0
                jz      short loc_482
                mov     ax, [bp-9Ah]
                jmp     loc_7D6
; ---------------------------------------------------------------------------

loc_45E:                                ; CODE XREF: LOADMODULE+4F↑j
                dec     word ptr [bp-10h]
                jmp     short loc_3E9
; ---------------------------------------------------------------------------

loc_463:                                ; CODE XREF: LOADMODULE+6B↑j
                cmp     byte ptr [bp-4], 61h ; 'a'
                jb      short loc_473
                cmp     byte ptr [bp-4], 7Ah ; 'z'
                ja      short loc_473
                add     byte ptr [bp-4], 0E0h

loc_473:                                ; CODE XREF: LOADMODULE+B3↑j
                                        ; LOADMODULE+B9↑j
                mov     si, [bp-0Ah]
                inc     word ptr [bp-0Ah]
                mov     al, [bp-4]
                mov     [bp+si-9Ch], al
                jmp     short loc_40D
; ---------------------------------------------------------------------------

loc_482:                                ; CODE XREF: LOADMODULE+A1↑j
                mov     ax, 1
                jmp     loc_7D6
; ---------------------------------------------------------------------------

loc_488:                                ; CODE XREF: LOADMODULE+18↑j
                push    word ptr [bp+0Ah]
                call    GETEXEPTR
                mov     [bp-16h], ax

loc_491:                                ; CODE XREF: LOADMODULE+7E↑j
                                        ; LOADMODULE+9A↑j
                cmp     word ptr [bp-16h], 0
                jz      short loc_49A
                jmp     loc_712
; ---------------------------------------------------------------------------

loc_49A:                                ; CODE XREF: LOADMODULE+E1↑j
                push    word ptr [bp-9Eh]
                push    word ptr [bp-9Eh]
                lea     ax, [bp-9Ch]
                push    ss
                push    ax
                call    LOADEXEHEADER
                mov     [bp-0A0h], ax
                or      ax, ax
                jnz     short loc_4C2
                push    word ptr [bp-9Eh]
                nop
                push    cs
                call    near ptr _LCLOSE
                mov     ax, 0Bh
                jmp     loc_7D6
; ---------------------------------------------------------------------------

loc_4C2:                                ; CODE XREF: LOADMODULE+FD↑j
                cmp     word ptr [bp-0A0h], 1
                jnz     short loc_4D7

loc_4C9:                                ; CODE XREF: LOADMODULE+14F↓j
                push    word ptr [bp-9Eh]
                nop
                push    cs
                call    near ptr _LCLOSE

loc_4D2:                                ; CODE XREF: LOADMODULE+38B↓j
                                        ; LOADMODULE+40B↓j
                sub     ax, ax
                jmp     loc_7D6
; ---------------------------------------------------------------------------

loc_4D7:                                ; CODE XREF: LOADMODULE+113↑j
                mov     dx, [bp-0A0h]
                sub     ax, ax
                mov     [bp-1Ch], ax
                mov     [bp-1Ah], dx
                les     bx, [bp-1Ch]
                test    word ptr es:[bx+0Ch], 8000h
                jnz     short loc_505
                or      byte ptr es:[bx+0Ch], 2
                cmp     word ptr [bp+8], 0FFFFh
                jnz     short loc_515
                cmp     word ptr [bp+6], 0FFFFh
                jnz     short loc_515
                push    dx

loc_500:                                ; CODE XREF: LOADMODULE+15F↓j
                call    MYFREE
                jmp     short loc_4C9
; ---------------------------------------------------------------------------

loc_505:                                ; CODE XREF: LOADMODULE+138↑j
                les     bx, [bp-1Ch]
                test    byte ptr es:[bx+0Ch], 2
                jz      short loc_515
                push    word ptr [bp-0A0h]
                jmp     short loc_500
; ---------------------------------------------------------------------------

loc_515:                                ; CODE XREF: LOADMODULE+143↑j
                                        ; LOADMODULE+149↑j ...
                push    word ptr [bp-0A0h]
                call    ADDMODULE
                mov     [bp-16h], ax
                or      ax, ax
                jnz     short loc_526
                jmp     loc_634
; ---------------------------------------------------------------------------

loc_526:                                ; CODE XREF: LOADMODULE+16D↑j
                les     bx, [bp-1Ch]
                mov     word ptr es:[bx+2], 8000h
                mov     ax, es:[bx+28h]
                sub     dx, dx
                mov     bx, [bp-0A0h]
                sub     cx, cx
                mov     dx, bx
                mov     [bp-8], ax
                mov     [bp-6], dx
                mov     [bp-18h], cx
                jmp     loc_61F
; ---------------------------------------------------------------------------

loc_549:                                ; CODE XREF: LOADMODULE+277↓j
                cmp     word ptr [bp-16h], 0
                jnz     short loc_552
                jmp     loc_60F
; ---------------------------------------------------------------------------

loc_552:                                ; CODE XREF: LOADMODULE+199↑j
                les     bx, [bp-8]
                mov     si, es:[bx]
                or      si, si
                jnz     short loc_55F
                jmp     loc_60F
; ---------------------------------------------------------------------------

loc_55F:                                ; CODE XREF: LOADMODULE+1A6↑j
                push    word ptr [bp-0A0h]
                push    word ptr [bp-9Eh]
                push    si
                call    GETSTRINGPTR
                mov     [bp-10h], ax
                mov     [bp-0Eh], dx
                les     bx, [bp-10h]
                inc     word ptr [bp-10h]
                mov     al, es:[bx]
                cbw
                mov     [bp-0Ah], ax
                push    dx
                push    word ptr [bp-10h]
                push    ax
                call    FINDEXEINFO
                mov     [bp-16h], ax
                or      ax, ax
                jnz     short loc_5FA
                lea     ax, [bp-9Ch]
                mov     [bp+0Ah], ax
                mov     word ptr [bp+0Ch], ss
                jmp     short loc_5AB
; ---------------------------------------------------------------------------

loc_599:                                ; CODE XREF: LOADMODULE+1FF↓j
                les     bx, [bp-10h]
                inc     word ptr [bp-10h]
                mov     al, es:[bx]
                les     bx, [bp+0Ah]
                inc     word ptr [bp+0Ah]
                mov     es:[bx], al

loc_5AB:                                ; CODE XREF: LOADMODULE+1E3↑j
                mov     ax, [bp-0Ah]
                dec     word ptr [bp-0Ah]
                or      ax, ax
                jnz     short loc_599
                les     bx, [bp+0Ah]
                inc     word ptr [bp+0Ah]
                mov     byte ptr es:[bx], 2Eh ; '.'
                mov     bx, [bp+0Ah]
                inc     word ptr [bp+0Ah]
                mov     byte ptr es:[bx], 45h ; 'E'
                mov     bx, [bp+0Ah]
                inc     word ptr [bp+0Ah]
                mov     byte ptr es:[bx], 58h ; 'X'
                mov     bx, [bp+0Ah]
                inc     word ptr [bp+0Ah]
                mov     byte ptr es:[bx], 45h ; 'E'
                mov     bx, [bp+0Ah]
                mov     byte ptr es:[bx], 0
                lea     ax, [bp-9Ch]
                push    ss
                push    ax
                mov     ax, 0FFFFh
                cwd
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr LOADMODULE
                mov     [bp-16h], ax
                jmp     short loc_600
; ---------------------------------------------------------------------------

loc_5FA:                                ; CODE XREF: LOADMODULE+1D7↑j
                push    word ptr [bp-16h]
                call    INCEXEUSAGE

loc_600:                                ; CODE XREF: LOADMODULE+244↑j
                cmp     word ptr [bp-16h], 0
                jz      short loc_60F
                push    word ptr [bp-16h]
                call    GETEXEPTR
                mov     [bp-16h], ax

loc_60F:                                ; CODE XREF: LOADMODULE+19B↑j
                                        ; LOADMODULE+1A8↑j ...
                les     bx, [bp-8]
                add     word ptr [bp-8], 2
                mov     ax, [bp-16h]
                mov     es:[bx], ax
                inc     word ptr [bp-18h]

loc_61F:                                ; CODE XREF: LOADMODULE+192↑j
                les     bx, [bp-1Ch]
                mov     ax, [bp-18h]
                cmp     es:[bx+1Eh], ax
                jbe     short loc_62E
                jmp     loc_549
; ---------------------------------------------------------------------------

loc_62E:                                ; CODE XREF: LOADMODULE+275↑j
                mov     word ptr es:[bx+2], 1

loc_634:                                ; CODE XREF: LOADMODULE+16F↑j
                cmp     word ptr [bp-16h], 0
                jz      short loc_6AB
                les     bx, [bp-1Ch]
                cmp     word ptr es:[bx+1Ch], 0
                jz      short loc_6AB
                push    word ptr [bp-0A0h]
                call    ALLOCALLSEGS
                mov     [bp-18h], ax
                or      ax, ax
                jle     short loc_6A0
                mov     dx, [bp-0A0h]
                sub     ax, ax
                les     bx, [bp-1Ch]
                mov     ax, es:[bx+22h]
                mov     [bp-14h], ax
                mov     [bp-12h], dx
                mov     word ptr [bp-18h], 1

loc_66A:                                ; CODE XREF: LOADMODULE+2EA↓j
                les     bx, [bp-1Ch]
                mov     ax, [bp-18h]
                cmp     es:[bx+1Ch], ax
                jb      short loc_6AB
                les     bx, [bp-14h]
                test    byte ptr es:[bx+4], 40h
                jz      short loc_697
                push    word ptr [bp-0A0h]
                push    ax
                push    word ptr [bp-9Eh]
                push    word ptr [bp-9Eh]
                call    LOADSEGMENT
                mov     [bp-16h], ax
                or      ax, ax
                jz      short loc_6AB

loc_697:                                ; CODE XREF: LOADMODULE+2CA↑j
                inc     word ptr [bp-18h]
                add     word ptr [bp-14h], 0Ah
                jmp     short loc_66A
; ---------------------------------------------------------------------------

loc_6A0:                                ; CODE XREF: LOADMODULE+29C↑j
                cmp     word ptr [bp-18h], 0
                jnz     short loc_6AB
                mov     word ptr [bp-16h], 0

loc_6AB:                                ; CODE XREF: LOADMODULE+284↑j
                                        ; LOADMODULE+28E↑j ...
                cmp     word ptr [bp-16h], 0
                jz      short loc_6BC
                push    word ptr [bp-0A0h]
                push    word ptr [bp-9Eh]
                call    PRELOADRESOURCES

loc_6BC:                                ; CODE XREF: LOADMODULE+2FB↑j
                cmp     word ptr [bp-16h], 0
                jz      short loc_6EF
                cmp     word ptr [bp+8], 0FFFFh
                jnz     short loc_6D6
                cmp     word ptr [bp+6], 0FFFFh
                jnz     short loc_6D6
                sub     ax, ax
                mov     [bp+8], ax
                mov     [bp+6], ax

loc_6D6:                                ; CODE XREF: LOADMODULE+312↑j
                                        ; LOADMODULE+318↑j
                sub     ax, ax
                push    ax
                push    word ptr [bp+8]
                push    word ptr [bp+6]
                push    word ptr [bp-0A0h]
                push    word ptr [bp-9Eh]
                call    STARTMODULE
                mov     [bp-16h], ax
                jmp     short loc_6F8
; ---------------------------------------------------------------------------

loc_6EF:                                ; CODE XREF: LOADMODULE+30C↑j
                push    word ptr [bp-9Eh]
                nop
                push    cs
                call    near ptr _LCLOSE

loc_6F8:                                ; CODE XREF: LOADMODULE+339↑j
                push    word ptr [bp-0A0h]
                call    TRIMEXEHEADER
                cmp     word ptr [bp-16h], 0
                jz      short loc_708
                jmp     loc_7D3
; ---------------------------------------------------------------------------

loc_708:                                ; CODE XREF: LOADMODULE+34F↑j
                push    word ptr [bp-0A0h]
                call    DELMODULE
                jmp     loc_7D3
; ---------------------------------------------------------------------------

loc_712:                                ; CODE XREF: LOADMODULE+E3↑j
                mov     ax, [bp-16h]
                mov     [bp-0A0h], ax
                mov     word ptr [bp-16h], 0
                mov     dx, ax
                sub     ax, ax
                mov     [bp-1Ch], ax
                mov     [bp-1Ah], dx
                cmp     word ptr [bp+8], 0FFFFh
                jnz     short loc_748
                cmp     word ptr [bp+6], 0FFFFh
                jnz     short loc_748
                les     bx, [bp-1Ch]
                test    word ptr es:[bx+0Ch], 8000h
                jnz     short loc_742
                jmp     loc_4D2
; ---------------------------------------------------------------------------

loc_742:                                ; CODE XREF: LOADMODULE+389↑j
                mov     [bp+8], ax
                mov     [bp+6], ax

loc_748:                                ; CODE XREF: LOADMODULE+378↑j
                                        ; LOADMODULE+37E↑j
                les     bx, [bp-1Ch]
                test    byte ptr es:[bx+0Ch], 2
                jz      short loc_7A1
                push    word ptr [bp-0A0h]
                call    GETINSTANCE
                mov     [bp-0Ch], ax
                push    word ptr [bp-0A0h]
                call    INCEXEUSAGE
                push    word ptr [bp-0A0h]
                call    ALLOCALLSEGS
                mov     [bp-0Ah], ax
                cmp     ax, 1
                jnz     short loc_798
                push    word ptr [bp-0Ch]
                push    word ptr [bp+8]
                push    word ptr [bp+6]
                push    word ptr [bp-0A0h]
                mov     ax, 0FFFFh
                push    ax
                call    STARTMODULE
                mov     [bp-16h], ax
                or      ax, ax
                jnz     short loc_7D3
                push    word ptr [bp-0A0h]
                nop
                push    cs
                call    near ptr FREEMODULE
                jmp     short loc_7D3
; ---------------------------------------------------------------------------

loc_798:                                ; CODE XREF: LOADMODULE+3BC↑j
                push    word ptr [bp-0A0h]
                call    DECEXEUSAGE
                jmp     short loc_7D3
; ---------------------------------------------------------------------------

loc_7A1:                                ; CODE XREF: LOADMODULE+39C↑j
                les     bx, [bp-1Ch]
                cmp     word ptr es:[bx+0Eh], 0
                jz      short loc_7C2
                push    word ptr [bp-0A0h]
                push    word ptr es:[bx+0Eh]
                mov     ax, 0FFFFh
                push    ax
                push    ax
                call    LOADSEGMENT
                or      ax, ax
                jnz     short loc_7C2
                jmp     loc_4D2
; ---------------------------------------------------------------------------

loc_7C2:                                ; CODE XREF: LOADMODULE+3F5↑j
                                        ; LOADMODULE+409↑j
                push    word ptr [bp-0A0h]
                call    INCEXEUSAGE
                push    word ptr [bp-0A0h]
                call    GETINSTANCE
                mov     [bp-16h], ax

loc_7D3:                                ; CODE XREF: LOADMODULE+351↑j
                                        ; LOADMODULE+35B↑j ...
                mov     ax, [bp-16h]

loc_7D6:                                ; CODE XREF: LOADMODULE+A7↑j
                                        ; LOADMODULE+D1↑j ...
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
LOADMODULE      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FINDEXEINFO     proc near               ; CODE XREF: LOADMODULE+76↑p
                                        ; LOADMODULE+1CF↑p ...

arg_0           = word ptr  4
arg_2           = dword ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                mov     bx, [bp+arg_0]
                mov     ax, cs:HEXEHEAD

loc_7EF:                                ; CODE XREF: FINDEXEINFO+2B↓j
                or      ax, ax
                jz      short loc_80F
                mov     es, ax
                mov     di, es:26h
                cmp     es:[di], bl
                jnz     short loc_809
                inc     di
                lds     si, [bp+arg_2]
                mov     cx, bx
                repe cmpsb
                jz      short loc_80F

loc_809:                                ; CODE XREF: FINDEXEINFO+1B↑j
                mov     ax, es:6
                jmp     short loc_7EF
; ---------------------------------------------------------------------------

loc_80F:                                ; CODE XREF: FINDEXEINFO+F↑j
                                        ; FINDEXEINFO+25↑j
                pop     ds
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    6
FINDEXEINFO     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

ENTPROCADDRESS  proc near               ; CODE XREF: SEGRELOC+BB↓p
                                        ; GETPROCADDRESS+3F↓p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     es, [bp+arg_2]
                mov     cx, [bp+arg_0]
                jcxz    short loc_85D
                dec     cx
                mov     si, es:4

loc_82B:                                ; CODE XREF: ENTPROCADDRESS+27↓j
                                        ; ENTPROCADDRESS+33↓j ...
                xor     ax, ax
                lods    byte ptr es:[si]
                or      ax, ax
                jz      short loc_85D
                cmp     ax, cx
                jg      short loc_894
                sub     cx, ax
                mov     bx, ax
                lods    byte ptr es:[si]
                cmp     al, 0
                jz      short loc_82B
                cmp     al, 0FFh
                jz      short loc_84D
                add     si, bx
                shl     bx, 1
                add     si, bx
                jmp     short loc_82B
; ---------------------------------------------------------------------------

loc_84D:                                ; CODE XREF: ENTPROCADDRESS+2B↑j
                mov     ax, bx
                shl     bx, 1
                shl     bx, 1
                add     bx, ax
                shl     bx, 1
                add     bx, ax
                add     si, bx
                jmp     short loc_82B
; ---------------------------------------------------------------------------

loc_85D:                                ; CODE XREF: ENTPROCADDRESS+B↑j
                                        ; ENTPROCADDRESS+19↑j ...
                xor     bx, bx
                mov     ax, 403h
                push    ax
                mov     ax, offset SZINVALIDORDINAL ; "Invalid ordinal reference to "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_88E
; ---------------------------------------------------------------------------
SZINVALIDORDINAL db 'Invalid ordinal reference to ',0
                                        ; DATA XREF: ENTPROCADDRESS+4B↑o
                db 24h
; ---------------------------------------------------------------------------

loc_88E:                                ; CODE XREF: ENTPROCADDRESS+55↑j
                xor     dx, dx
                xor     ax, ax
                jmp     short loc_8D0
; ---------------------------------------------------------------------------

loc_894:                                ; CODE XREF: ENTPROCADDRESS+1D↑j
                lods    byte ptr es:[si]
                cmp     al, 0
                jz      short loc_85D
                mov     bx, cx
                cmp     al, 0FFh
                jz      short loc_8BF
                add     si, bx
                shl     bx, 1
                mov     si, es:[bx+si+1]
                mov     cx, 0FFFFh
                push    es
                push    ax
                push    cx
                push    cx
                call    LOADSEGMENT
                xor     dx, dx
                or      ax, ax
                jz      short loc_85D
                mov     dx, ax
                mov     ax, si
                jmp     short loc_8D0
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_8BF:                                ; CODE XREF: ENTPROCADDRESS+86↑j
                mov     ax, bx
                shl     bx, 1
                shl     bx, 1
                add     bx, ax
                shl     bx, 1
                add     bx, ax
                mov     dx, es
                lea     ax, [bx+si+1]

loc_8D0:                                ; CODE XREF: ENTPROCADDRESS+7A↑j
                                        ; ENTPROCADDRESS+A4↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
ENTPROCADDRESS  endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FINDORDINAL     proc near               ; CODE XREF: SEGRELOC+AF↓p
                                        ; GETPROCADDRESS+3A↓p

arg_0           = dword ptr  4
arg_4           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    di
                les     si, [bp+arg_0]
                cmp     byte ptr es:[si+1], 23h ; '#'
                jz      short loc_91C

loc_8E7:                                ; CODE XREF: FINDORDINAL+56↓j
                push    ds
                mov     ds, [bp+arg_4]
                mov     si, ds:26h
                cld

loc_8F0:                                ; CODE XREF: FINDORDINAL+8A↓j
                xor     ax, ax
                lodsb
                add     si, ax
                add     si, 2

loc_8F8:                                ; CODE XREF: FINDORDINAL+42↓j
                lodsb
                les     di, [bp+arg_0]
                mov     cx, ax
                jcxz    short loc_93E
                cmp     es:[di], al
                jnz     short loc_915
                inc     di
                repe cmpsb
                jnz     short loc_915
                lodsw
                mov     bx, ds
                pop     ds
                cmp     [bp+arg_4], bx
                jz      short invalid_procedure_name
                jmp     short loc_965
; ---------------------------------------------------------------------------

loc_915:                                ; CODE XREF: FINDORDINAL+2B↑j
                                        ; FINDORDINAL+30↑j
                add     si, cx
                add     si, 2
                jmp     short loc_8F8
; ---------------------------------------------------------------------------

loc_91C:                                ; CODE XREF: FINDORDINAL+D↑j
                lods    byte ptr es:[si]
                mov     cl, al
                xor     ch, ch
                dec     cx
                inc     si
                xor     ax, ax

loc_926:                                ; CODE XREF: FINDORDINAL+62↓j
                mov     dx, ax
                lods    byte ptr es:[si]
                sub     al, 30h ; '0'
                cmp     al, 9
                ja      short loc_8E7
                xor     ah, ah
                mov     bx, ax
                mov     al, 0Ah
                mul     dx
                add     ax, bx
                loop    loc_926
                jmp     short invalid_procedure_name
; ---------------------------------------------------------------------------

loc_93E:                                ; CODE XREF: FINDORDINAL+26↑j
                mov     bx, ds
                pop     ds
                cmp     [bp+arg_4], bx
                jnz     short loc_965
                mov     bx, 0FFFFh
                mov     es, [bp+arg_4]
                mov     ax, 2Ch ; ','
                mov     dx, es:20h
                push    es
                push    bx
                push    ax
                push    dx
                call    LOADNRTABLE
                push    ds
                mov     ds, dx
                mov     si, ax
                or      ax, dx
                jnz     short loc_8F0
                pop     ds

loc_965:                                ; CODE XREF: FINDORDINAL+3B↑j
                                        ; FINDORDINAL+6C↑j
                push    ax
                mov     ax, 2Ch ; ','
                push    [bp+arg_4]
                push    ax
                call    FREENRTABLE
                pop     ax

invalid_procedure_name:                 ; CODE XREF: FINDORDINAL+39↑j
                                        ; FINDORDINAL+64↑j
                or      ax, ax
                jnz     short loc_9A4
                les     bx, [bp+arg_0]
                inc     bx
                mov     ax, 404h
                push    ax
                mov     ax, offset SZINVALIDPROC ; "Invalid procedure name "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_9A2
; ---------------------------------------------------------------------------
SZINVALIDPROC   db 'Invalid procedure name ',0
                                        ; DATA XREF: FINDORDINAL+A5↑o
                db 24h
; ---------------------------------------------------------------------------

loc_9A2:                                ; CODE XREF: FINDORDINAL+AF↑j
                xor     ax, ax

loc_9A4:                                ; CODE XREF: FINDORDINAL+9B↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    6
FINDORDINAL     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

INCEXEUSAGE     proc near               ; CODE XREF: LOADMODULE+249↑p
                                        ; LOADMODULE+3AC↑p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    di
                mov     cx, [bp+arg_0]
                jcxz    short loc_9F8
                mov     es, cx
                test    word ptr es:2, 8000h
                jnz     short loc_9F8
                cmp     word ptr es:0, 454Eh
                jnz     short loc_9F8
                inc     word ptr es:2
                mov     di, es:28h
                mov     cx, es:1Eh
                jcxz    short loc_9F8
                or      word ptr es:2, 8000h

loc_9E1:                                ; CODE XREF: INCEXEUSAGE+43↓j
                push    cx
                push    word ptr es:[di]
                call    INCEXEUSAGE
                pop     cx
                mov     es, [bp+arg_0]
                add     di, 2
                loop    loc_9E1
                xor     word ptr es:2, 8000h

loc_9F8:                                ; CODE XREF: INCEXEUSAGE+7↑j
                                        ; INCEXEUSAGE+12↑j ...
                pop     di
                mov     sp, bp
                pop     bp
                retn    2
INCEXEUSAGE     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DECEXEUSAGE     proc near               ; CODE XREF: LOADMODULE+3E8↑p
                                        ; DECEXEUSAGE+3C↓p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    di
                mov     cx, [bp+arg_0]
                xor     ax, ax
                jcxz    short loc_A59
                mov     es, cx
                test    word ptr es:2, 8000h
                jnz     short loc_A59
                cmp     word ptr es:0, 454Eh
                jnz     short loc_A59
                dec     word ptr es:2
                mov     di, es:28h
                mov     cx, es:1Eh
                jcxz    short loc_A59
                or      word ptr es:2, 8000h

loc_A36:                                ; CODE XREF: DECEXEUSAGE+51↓j
                push    cx
                push    es
                push    word ptr es:[di]
                call    DECEXEUSAGE
                pop     es
                jnz     short loc_A4C
                push    es
                push    word ptr es:[di]
                call    DELMODULE
                pop     es
                mov     es:[di], ax

loc_A4C:                                ; CODE XREF: DECEXEUSAGE+40↑j
                pop     cx
                add     di, 2
                loop    loc_A36
                xor     word ptr es:2, 8000h

loc_A59:                                ; CODE XREF: DECEXEUSAGE+9↑j
                                        ; DECEXEUSAGE+14↑j ...
                pop     di
                mov     sp, bp
                pop     bp
                retn    2
DECEXEUSAGE     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

STARTPROCADDRESS proc near              ; CODE XREF: STARTMODULE+4F↑p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    di
                mov     es, [bp+arg_2]
                mov     di, 14h
                xor     dx, dx
                mov     ax, es:[di+2]
                or      ax, ax
                jz      short loc_A86
                mov     di, es:[di]
                push    es
                push    ax
                push    [bp+arg_0]
                push    [bp+arg_0]
                call    LOADSEGMENT
                jcxz    short loc_A86
                mov     ax, di

loc_A86:                                ; CODE XREF: STARTPROCADDRESS+12↑j
                                        ; STARTPROCADDRESS+22↑j
                pop     di
                mov     sp, bp
                pop     bp
                retn    4
STARTPROCADDRESS endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETINSTANCE     proc near               ; CODE XREF: LOADMODULE+3A2↑p
                                        ; LOADMODULE+419↑p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                mov     es, [bp+arg_0]
                mov     ax, es:0Ch
                test    ax, 3
                mov     ax, es
                jz      short loc_AAB
                mov     bx, es:8
                or      bx, bx
                jz      short loc_AAB
                mov     ax, es:[bx+8]

loc_AAB:                                ; CODE XREF: GETINSTANCE+F↑j
                                        ; GETINSTANCE+18↑j
                mov     cx, ax
                mov     sp, bp
                pop     bp
                retn    2
GETINSTANCE     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETEXEPTR       proc near               ; CODE XREF: LOADMODULE+D7↑p
                                        ; LOADMODULE+255↑p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    [bp+arg_0]
                call    MYLOCK
                or      ax, ax
                jz      short loc_B14
                mov     es, ax
                cmp     word ptr es:0, 454Eh
                jz      short loc_B10
                dec     ax
                mov     es, ax
                mov     ax, es:1
                or      ax, ax
                jz      short loc_B10
                mov     es, ax
                cmp     word ptr es:0, 454Eh
                jz      short loc_B10
                xor     ax, ax

loc_AE3:                                ; CODE XREF: GETEXEPTR+5F↓j
                mov     ax, 406h
                push    ax
                mov     ax, offset SZINVALIDMODULEHANDLE ; "Invalid module handle"
                push    cs
                push    ax
                push    ax
                push    [bp+arg_0]
                call    KERNELERROR
                jmp     short loc_B0C
; ---------------------------------------------------------------------------
SZINVALIDMODULEHANDLE db 'Invalid module handle',0
                                        ; DATA XREF: GETEXEPTR+34↑o
                db 24h
; ---------------------------------------------------------------------------

loc_B0C:                                ; CODE XREF: GETEXEPTR+40↑j
                xor     ax, ax
                jmp     short loc_B14
; ---------------------------------------------------------------------------

loc_B10:                                ; CODE XREF: GETEXEPTR+16↑j
                                        ; GETEXEPTR+21↑j ...
                or      ax, ax
                jz      short loc_AE3

loc_B14:                                ; CODE XREF: GETEXEPTR+B↑j
                                        ; GETEXEPTR+5B↑j
                mov     cx, ax
                mov     sp, bp
                pop     bp
                retn    2
GETEXEPTR       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETSTACKPTR     proc near               ; CODE XREF: STARTMODULE+90↑p

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    si
                mov     es, [bp+arg_0]
                test    word ptr es:0Ch, 8000h
                jnz     short loc_B57
                cmp     word ptr es:1Ah, 0
                jz      short loc_B57
                cmp     word ptr es:18h, 0
                jnz     short loc_B57
                mov     dx, es:12h
                mov     bx, es:8
                or      bx, bx
                jz      short loc_B4E
                add     dx, es:[bx+6]

loc_B4E:                                ; CODE XREF: GETSTACKPTR+2C↑j
                and     dx, 0FFFEh
                mov     es:18h, dx

loc_B57:                                ; CODE XREF: GETSTACKPTR+E↑j
                                        ; GETSTACKPTR+16↑j ...
                mov     dx, es:1Ah
                mov     ax, es:18h
                mov     cx, ax
                or      cx, dx
                jz      short loc_B74
                push    ax
                mov     cx, 0FFFFh
                push    es
                push    dx
                push    cx
                push    cx
                call    LOADSEGMENT
                pop     ax
                jmp     short loc_B77
; ---------------------------------------------------------------------------

loc_B74:                                ; CODE XREF: GETSTACKPTR+48↑j
                mov     ax, 1000h

loc_B77:                                ; CODE XREF: GETSTACKPTR+56↑j
                pop     si
                mov     sp, bp
                pop     bp
                retn    2
GETSTACKPTR     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

MYALLOC         proc near               ; CODE XREF: LOADNRTABLE+62↓p
                                        ; ALLOCSEG+48↓p ...

arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8

                push    bp
                mov     bp, sp
                mov     cx, [bp+arg_4]
                mov     al, 7
                and     al, cl
                mov     bx, 0F000h
                and     bx, cx
                jz      short loc_B9E
                shr     bx, 1
                shr     bx, 1
                shr     bx, 1
                shr     bx, 1
                cmp     al, 0
                jnz     short loc_B9E
                or      bl, 8

loc_B9E:                                ; CODE XREF: MYALLOC+F↑j
                                        ; MYALLOC+1B↑j
                cmp     al, 1
                jnz     short loc_BA5
                or      bl, 4

loc_BA5:                                ; CODE XREF: MYALLOC+22↑j
                test    cl, 10h
                jz      short loc_BAD
                or      bl, 2

loc_BAD:                                ; CODE XREF: MYALLOC+2A↑j
                xor     dx, dx
                mov     ax, [bp+arg_2]
                mov     cx, [bp+arg_0]
                jcxz    short loc_BBD

loc_BB7:                                ; CODE XREF: MYALLOC+3D↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_BB7

loc_BBD:                                ; CODE XREF: MYALLOC+37↑j
                push    bx
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr GLOBALALLOC
                push    ax
                test    al, 1
                jnz     short loc_BCE
                push    ax
                call    MYLOCK

loc_BCE:                                ; CODE XREF: MYALLOC+4A↑j
                pop     dx
                mov     sp, bp
                pop     bp
                retn    6
MYALLOC         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

MYLOCK          proc near               ; CODE XREF: GETEXEPTR+6↑p
                                        ; MYALLOC+4D↑p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                xchg    ax, dx
                mov     sp, bp
                pop     bp
                retn    2
MYLOCK          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

MYFREE          proc near               ; CODE XREF: LOADMODULE:loc_500↑p
                                        ; ALLOCALLSEGS+A6↓p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                mov     cx, [bp+arg_0]
                jcxz    short loc_C20
                push    cx
                call    MYLOCK
                push    cx
                or      ax, ax
                jz      short loc_C0F
                dec     ax
                mov     es, ax
                inc     ax
                push    ax
                test    byte ptr es:5, 4
                jz      short loc_C0C
                xor     dx, dx
                push    ax
                push    dx
                call    PATCHTHUNKS

loc_C0C:                                ; CODE XREF: MYFREE+1C↑j
                call    DEBUGFREESEGMENT

loc_C0F:                                ; CODE XREF: MYFREE+F↑j
                pop     cx
                or      ch, ch
                jz      short loc_C20

loc_C14:                                ; CODE XREF: MYFREE+37↓j
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr GLOBALUNLOCK
                or      ax, ax
                jnz     short loc_C14

loc_C20:                                ; CODE XREF: MYFREE+6↑j
                                        ; MYFREE+2B↑j
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr GLOBALFREE
                mov     sp, bp
                pop     bp
                retn    2
MYFREE          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

LOADNRTABLE     proc near               ; CODE XREF: FINDORDINAL+80↑p

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 2
                push    si
                push    di
                xor     dx, dx
                mov     [bp+var_2], dx
                mov     es, [bp+arg_6]
                mov     si, [bp+arg_2]
                mov     bx, [bp+arg_4]
                mov     dx, es:[si+2]
                cmp     word ptr es:[si], 0
                jnz     short loc_C51
                jmp     short loc_CBB
; ---------------------------------------------------------------------------
                nop

loc_C51:                                ; CODE XREF: LOADNRTABLE+1E↑j
                inc     bx
                jnz     short loc_C71
                mov     dx, es:0Ah
                mov     bx, 0A400h
                mov     [bp+var_2], dx
                push    es
                push    dx
                push    es
                push    dx
                push    bx
                nop
                push    cs
                call    near ptr OPENFILE
                mov     es, [bp+arg_6]
                inc     bx
                jnz     short loc_C71
                jmp     short loc_CC8
; ---------------------------------------------------------------------------

loc_C71:                                ; CODE XREF: LOADNRTABLE+24↑j
                                        ; LOADNRTABLE+3F↑j
                dec     bx
                mov     dx, es:[si]
                mov     cx, es:[si+2]
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_CC8
                mov     ax, [bp+arg_0]
                add     ax, 4
                push    es
                push    bx
                mov     bx, 17h
                xor     cx, cx
                push    bx
                push    ax
                push    cx
                call    MYALLOC
                pop     bx
                mov     cx, ds
                pop     ds
                push    cx
                mov     es, ax
                xor     di, di
                xor     ax, ax
                xchg    ax, [si]
                stosw
                mov     ax, dx
                xchg    ax, [si+2]
                stosw
                mov     cx, [bp+arg_0]
                push    es
                pop     ds
                push    dx
                mov     dx, di
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pop     dx
                pop     ds
                jb      short loc_CC8
                cmp     ax, cx
                jnz     short loc_CC8

loc_CBB:                                ; CODE XREF: LOADNRTABLE+20↑j
                push    bx
                push    dx
                call    MYLOCK
                pop     bx
                mov     dx, ax
                mov     ax, 4
                jmp     short loc_D10
; ---------------------------------------------------------------------------

loc_CC8:                                ; CODE XREF: LOADNRTABLE+41↑j
                                        ; LOADNRTABLE+50↑j ...
                push    bx
                mov     ax, 412h
                push    ax
                mov     ax, offset SZERRNONRESIDENTNAMETABLE ; "Unable to load non-resident name table "...
                push    cs
                push    ax
                push    [bp+arg_6]
                push    [bp+var_2]
                call    KERNELERROR
                jmp     short loc_D0B
; ---------------------------------------------------------------------------
SZERRNONRESIDENTNAMETABLE db 'Unable to load non-resident name table from ',0
                                        ; DATA XREF: LOADNRTABLE+9F↑o
                db 24h
; ---------------------------------------------------------------------------

loc_D0B:                                ; CODE XREF: LOADNRTABLE+AD↑j
                pop     bx
                xor     ax, ax
                mov     dx, ax

loc_D10:                                ; CODE XREF: LOADNRTABLE+98↑j
                cmp     bx, [bp+arg_4]
                jz      short loc_D1B
                push    ax
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                pop     ax

loc_D1B:                                ; CODE XREF: LOADNRTABLE+E5↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    8
LOADNRTABLE     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FREENRTABLE     proc near               ; CODE XREF: FINDORDINAL+95↑p
                                        ; TRIMEXEHEADER+18↓p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     es, [bp+arg_2]
                mov     di, [bp+arg_0]
                xor     ax, ax
                mov     cx, es:[di+2]
                cmp     word ptr es:[di], 0
                jnz     short loc_D53
                jcxz    short loc_D53
                push    cx
                push    cx
                call    MYLOCK
                pop     cx
                mov     es, [bp+arg_2]
                push    ds
                mov     ds, ax
                xor     si, si
                movsw
                movsw
                pop     ds
                push    cx
                nop
                push    cs
                call    near ptr GLOBALFREE

loc_D53:                                ; CODE XREF: FREENRTABLE+15↑j
                                        ; FREENRTABLE+17↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
FREENRTABLE     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETSTRINGPTR    proc near               ; CODE XREF: LOADMODULE+1B4↑p
                                        ; SEGRELOC+A7↓p ...

arg_0           = word ptr  4
arg_4           = word ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     es, [bp+arg_4]
                mov     dx, es
                mov     ax, es:2Ah
                add     ax, [bp+arg_0]
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    6
GETSTRINGPTR    endp


; =============== S U B R O U T I N E =======================================


GETCHKSUMADDR   proc near               ; CODE XREF: CHECKSEGCHKSUM+1↓p
                                        ; PATCHPROLOG+2C↓p
                push    dx
                xor     bx, bx
                dec     ax
                mov     es, ax
                xor     cx, cx
                mov     ax, es:[bx+0Ah]
                or      ax, ax
                jz      short loc_DC6
                test    byte ptr es:[bx+5], 8
                jz      short loc_DC6
                mov     dx, es:[bx+3]
                mov     es, word ptr es:[bx+1]
                cmp     word ptr es:[bx], 454Eh
                jnz     short loc_DC6
                mov     cx, es:[bx+1Ch]
                jcxz    short loc_DC6
                mov     bx, es:[bx+22h]

loc_DA4:                                ; CODE XREF: GETCHKSUMADDR+39↓j
                cmp     es:[bx+8], ax
                jz      short loc_DB1
                add     bx, 0Ah
                loop    loc_DA4
                jmp     short loc_DC6
; ---------------------------------------------------------------------------

loc_DB1:                                ; CODE XREF: GETCHKSUMADDR+34↑j
                sub     cx, es:1Ch
                neg     cx
                mov     bx, es:3Ah
                shl     cx, 1
                inc     cx
                shl     cx, 1
                add     bx, cx
                mov     cx, dx

loc_DC6:                                ; CODE XREF: GETCHKSUMADDR+E↑j
                                        ; GETCHKSUMADDR+15↑j ...
                pop     dx
                retn
GETCHKSUMADDR   endp


; =============== S U B R O U T I N E =======================================


CHECKSEGCHKSUM  proc near               ; CODE XREF: LOADSEGMENT+155↓p
                                        ; PATCHTHUNKS+8↓p ...
                push    ax
                call    GETCHKSUMADDR
                pop     ax
                jcxz    short chk_done
                shl     cx, 1
                shl     cx, 1
                shl     cx, 1
                push    ds
                push    si
                mov     ds, ax
                xor     si, si
                xor     dx, dx
                cld

loc_DDE:                                ; CODE XREF: CHECKSEGCHKSUM+19↓j
                lodsw
                xor     dx, ax
                loop    loc_DDE
                mov     ax, ds
                pop     si
                pop     ds
                mov     cx, dx
                xchg    cx, es:[bx]
                jcxz    short chk_done
                cmp     cx, dx
                jz      short chk_done

BADSEGCONT:
                mov     bx, ax
                mov     ax, 409h
                push    ax
                mov     ax, offset SZSEGMENTCONTENTSTRASHED ; "Segment contents trashed "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short chk_done
; ---------------------------------------------------------------------------
SZSEGMENTCONTENTSTRASHED db 'Segment contents trashed ',0
                                        ; DATA XREF: CHECKSEGCHKSUM+30↑o
                db 24h
; ---------------------------------------------------------------------------

chk_done:                               ; CODE XREF: CHECKSEGCHKSUM+5↑j
                                        ; CHECKSEGCHKSUM+24↑j ...
                retn
CHECKSEGCHKSUM  endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

ALLOCSEG        proc near               ; CODE XREF: ALLOCALLSEGS+2A↓p
                                        ; ALLOCALLSEGS+7E↓p ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    si
                les     si, [bp+arg_0]
                mov     bx, es:[si+4]
                mov     ax, es:[si+6]
                cmp     si, es:8
                jnz     short loc_E5D
                cmp     cs:FBOOTING, 0
                jnz     short loc_E4A
                test    word ptr es:0Ch, 80h
                jz      short loc_E4A
                or      bl, 10h

loc_E4A:                                ; CODE XREF: ALLOCSEG+1C↑j
                                        ; ALLOCSEG+25↑j
                add     ax, es:12h
                jb      short loc_E58
                add     ax, es:10h
                jnb     short loc_E5D

loc_E58:                                ; CODE XREF: ALLOCSEG+2F↑j
                xor     ax, ax
                jmp     short loc_EA4
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_E5D:                                ; CODE XREF: ALLOCSEG+14↑j
                                        ; ALLOCSEG+36↑j
                test    bl, 2
                jnz     short loc_E9E
                xor     cx, cx
                push    es
                push    bx
                push    ax
                push    cx
                call    MYALLOC
                pop     es
                or      ax, ax
                jz      short loc_EA4
                mov     es:[si+8], dx
                and     byte ptr es:[si+4], 0FBh
                or      byte ptr es:[si+4], 2
                mov     cx, es
                dec     ax
                mov     es, ax
                mov     es:1, cx
                mov     es, cx
                inc     ax
                cmp     ax, dx
                jz      short loc_E9E
                test    byte ptr es:[si+4], 10h
                jnz     short loc_E9E
                push    es
                push    ax
                nop
                push    cs
                call    near ptr LOCKSEGMENT
                pop     es

loc_E9E:                                ; CODE XREF: ALLOCSEG+40↑j
                                        ; ALLOCSEG+6D↑j ...
                mov     ax, es:[si+8]
                or      ax, ax

loc_EA4:                                ; CODE XREF: ALLOCSEG+3A↑j
                                        ; ALLOCSEG+4E↑j
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
ALLOCSEG        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

ALLOCALLSEGS    proc near               ; CODE XREF: LOADMODULE+294↑p
                                        ; LOADMODULE+3B3↑p ...

var_2           = word ptr -2
arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                sub     sp, 2
                push    si
                push    di
                mov     es, [bp+arg_0]
                mov     si, es:22h
                xor     di, di
                mov     [bp+var_2], di
                inc     di
                cmp     word ptr es:2, 1
                jz      short loc_EE1
                mov     si, es:8
                and     byte ptr es:[si+4], 0F9h
                push    es
                push    si
                call    ALLOCSEG
                or      ax, ax
                jz      short loc_F39
                inc     [bp+var_2]
                jmp     short loc_F60
; ---------------------------------------------------------------------------

loc_EE1:                                ; CODE XREF: ALLOCALLSEGS+1C↑j
                                        ; ALLOCALLSEGS+8C↓j
                cmp     di, es:1Ch
                ja      short loc_F60
                mov     bx, es:[si+4]
                test    bl, 40h
                jnz     short loc_F27
                test    bl, 2
                jnz     short loc_F33
                test    bl, 10h
                jz      short loc_F33
                xor     cx, cx
                push    es
                push    bx
                push    cx
                push    cx
                call    MYALLOC
                pop     es
                or      dx, dx
                jz      short loc_F39
                mov     es:[si+8], dx
                and     byte ptr es:[si+4], 0FBh
                or      byte ptr es:[si+4], 2
                mov     ax, es
                mov     es, cs:PGLOBALHEAP
                mov     bx, dx
                mov     es:[bx], ax
                mov     es, ax
                jmp     short loc_F33
; ---------------------------------------------------------------------------

loc_F27:                                ; CODE XREF: ALLOCALLSEGS+44↑j
                push    es
                push    si
                call    ALLOCSEG
                or      ax, ax
                jz      short loc_F39
                inc     [bp+var_2]

loc_F33:                                ; CODE XREF: ALLOCALLSEGS+49↑j
                                        ; ALLOCALLSEGS+4E↑j ...
                add     si, 0Ah
                inc     di
                jmp     short loc_EE1
; ---------------------------------------------------------------------------

loc_F39:                                ; CODE XREF: ALLOCALLSEGS+2F↑j
                                        ; ALLOCALLSEGS+5C↑j ...
                xor     ax, ax
                mov     [bp+var_2], ax
                dec     di
                jz      short loc_F68
                sub     si, 0Ah
                test    byte ptr es:[si+4], 2
                jz      short loc_F39
                mov     ax, es:[si+8]
                push    es
                push    ax
                call    MYFREE
                pop     es
                mov     es:[si+8], ax
                xor     byte ptr es:[si+4], 2
                jmp     short loc_F39
; ---------------------------------------------------------------------------

loc_F60:                                ; CODE XREF: ALLOCALLSEGS+34↑j
                                        ; ALLOCALLSEGS+3B↑j
                mov     ax, [bp+var_2]
                or      ax, ax
                jnz     short loc_F68
                dec     ax

loc_F68:                                ; CODE XREF: ALLOCALLSEGS+94↑j
                                        ; ALLOCALLSEGS+BA↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    2
ALLOCALLSEGS    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

SEGLOAD         proc near               ; CODE XREF: LOADSEGMENT+B6↓p
                                        ; LOADFIXEDSEG+8F↓p

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 8
                push    si
                push    di
                mov     [bp+var_8], 1
                les     si, [bp+arg_6]
                push    es
                push    word ptr es:[si+8]
                call    MYLOCK
                pop     es
                or      ax, ax
                jnz     short loc_FB6
                push    es
                xor     ax, ax
                push    word ptr es:[si+8]
                push    ax
                push    word ptr es:[si+6]
                push    ax
                nop
                push    cs
                call    near ptr GLOBALREALLOC
                pop     es
                cmp     es:[si+8], ax
                jz      short loc_FA9

loc_FA6:                                ; CODE XREF: SEGLOAD+44↓j
                jmp     loc_1033
; ---------------------------------------------------------------------------

loc_FA9:                                ; CODE XREF: SEGLOAD+34↑j
                push    es
                push    word ptr es:[si+8]
                call    MYLOCK
                pop     es
                or      ax, ax
                jz      short loc_FA6

loc_FB6:                                ; CODE XREF: SEGLOAD+1B↑j
                mov     [bp+var_2], ax

loc_FB9:                                ; CODE XREF: SEGLOAD+15F↓j
                push    es
                push    si
                push    ds
                mov     di, es:[si+2]
                mov     bx, [bp+arg_2]
                cmp     [bp+arg_0], bx
                jz      short loc_FEA
                push    di
                mov     [bp+var_6], di
                and     [bp+var_6], 0Fh
                mov     cl, 4
                shr     di, cl
                add     di, bx
                mov     [bp+var_4], di
                pop     cx
                mov     ds, bx
                mov     es, [bp+var_2]
                xor     si, si
                xor     di, di
                cld
                rep movsb
                jmp     loc_1070
; ---------------------------------------------------------------------------

loc_FEA:                                ; CODE XREF: SEGLOAD+56↑j
                mov     ax, es:[si]
                xor     dx, dx
                mov     cx, es:32h

loc_FF4:                                ; CODE XREF: SEGLOAD+88↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_FF4
                mov     cx, dx
                mov     dx, ax
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_1030
                mov     cx, di
                mov     ds, [bp+var_2]
                xor     dx, dx
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_1030
                cmp     ax, cx
                jnz     short loc_1030
                test    word ptr es:[si+4], 100h
                jz      short loc_1070
                push    ss
                pop     ds
                lea     dx, [bp+var_6]
                mov     cx, 2
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_1030
                cmp     ax, cx
                jz      short loc_1070

loc_1030:                               ; CODE XREF: SEGLOAD+93↑j
                                        ; SEGLOAD+A0↑j ...
                pop     ds
                pop     si
                pop     es

loc_1033:                               ; CODE XREF: SEGLOAD:loc_FA6↑j
                xor     bx, bx
                mov     ax, 409h
                push    ax
                mov     ax, offset SZBADSEGREAD ; "Error reading segment contents from "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_106B
; ---------------------------------------------------------------------------
SZBADSEGREAD    db 'Error reading segment contents from ',0
                                        ; DATA XREF: SEGLOAD+C9↑o
                db 24h
; ---------------------------------------------------------------------------

loc_106B:                               ; CODE XREF: SEGLOAD+D3↑j
                xor     ax, ax
                jmp     loc_120F
; ---------------------------------------------------------------------------

loc_1070:                               ; CODE XREF: SEGLOAD+77↑j
                                        ; SEGLOAD+AC↑j ...
                mov     ax, [bp+var_2]
                dec     ax
                mov     es, ax
                mov     ax, es:3
                mov     cl, 4
                shl     ax, cl
                sub     ax, di
                jz      short loc_108C
                mov     es, [bp+var_2]
                mov     cx, ax
                xor     ax, ax
                cld
                rep stosb

loc_108C:                               ; CODE XREF: SEGLOAD+110↑j
                mov     ds, [bp+var_2]
                xor     si, si
                mov     cx, di
                shr     cx, 1
                xor     dx, dx
                cld

loc_1098:                               ; CODE XREF: SEGLOAD+12B↓j
                lodsw
                xor     dx, ax
                loop    loc_1098
                pop     ds
                pop     si
                pop     es
                mov     ax, es:[si+4]
                and     ax, 1
                jz      short loc_10AC
                jmp     loc_11BD
; ---------------------------------------------------------------------------

loc_10AC:                               ; CODE XREF: SEGLOAD+137↑j
                mov     cx, [bp+arg_4]
                dec     cx
                shl     cx, 1
                shl     cx, 1
                mov     di, es:3Ah
                add     di, cx
                mov     cx, dx
                xchg    cx, es:[di]
                jcxz    short loc_1104
                cmp     cx, dx
                jz      short loc_1104
                dec     [bp+var_8]
                jl      short loc_10D2
                mov     ah, 0Dh
                int     21h             ; DOS - DISK RESET
                jmp     loc_FB9
; ---------------------------------------------------------------------------

loc_10D2:                               ; CODE XREF: SEGLOAD+159↑j
                xor     bx, bx
                mov     ax, 409h
                push    ax
                mov     ax, offset SZSEGMENTCONTENTSINVALID ; "Segment contents invalid "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_10FF
; ---------------------------------------------------------------------------
SZSEGMENTCONTENTSINVALID db 'Segment contents invalid ',0
                                        ; DATA XREF: SEGLOAD+168↑o
                db 24h
; ---------------------------------------------------------------------------

loc_10FF:                               ; CODE XREF: SEGLOAD+172↑j
                xor     ax, ax
                jmp     loc_120F
; ---------------------------------------------------------------------------

loc_1104:                               ; CODE XREF: SEGLOAD+150↑j
                                        ; SEGLOAD+154↑j
                mov     word ptr es:[di+2], 0
                mov     di, es:8
                or      di, di
                jz      short loc_111C
                push    word ptr es:[di+8]
                call    MYLOCK
                mov     di, ax

loc_111C:                               ; CODE XREF: SEGLOAD+1A1↑j
                mov     es, [bp+var_2]
                push    ds
                push    si
                mov     ds, word ptr [bp+arg_6+2]
                mov     si, ds:4
                xor     ax, ax
                cld

loc_112B:                               ; CODE XREF: SEGLOAD+1C3↓j
                                        ; SEGLOAD+1DA↓j ...
                lodsb
                mov     cx, ax
                jcxz    short loc_1196
                lodsb
                cmp     al, 0
                jz      short loc_112B
                mov     dx, 0Bh
                cmp     al, 0FFh
                jz      short loc_114C
                mov     dx, 3

loc_113F:
                cmp     [bp+arg_4], ax
                jz      short loc_115F
                add     si, cx
                shl     cx, 1
                add     si, cx
                jmp     short loc_112B
; ---------------------------------------------------------------------------

loc_114C:                               ; CODE XREF: SEGLOAD+1CA↑j
                                        ; SEGLOAD+243↓j
                cmp     dx, 0Bh
                jnz     short loc_115F
                cmp     byte ptr [si+6], 0EAh
                jz      short loc_11B1
                mov     al, [si+8]
                cmp     [bp+arg_4], ax
                jnz     short loc_11B1

loc_115F:                               ; CODE XREF: SEGLOAD+1D2↑j
                                        ; SEGLOAD+1DF↑j
                or      di, di
                jz      short loc_11A0
                mov     bx, dx
                mov     bx, [bx+si-2]
                cmp     word ptr es:[bx], 581Eh
                jz      short loc_1176
                cmp     word ptr es:[bx], 0D88Ch
                jnz     short loc_11A0

loc_1176:                               ; CODE XREF: SEGLOAD+1FD↑j
                cmp     byte ptr es:[bx+2], 90h
                jnz     short loc_11A0
                test    byte ptr [si], 2
                jnz     short loc_1198
                test    byte ptr ds:0Ch, 2
                jz      short loc_11A0
                test    byte ptr [si], 1
                jz      short loc_11A0
                mov     word ptr es:[bx], 9090h
                jmp     short loc_11A0
; ---------------------------------------------------------------------------
                align 2

loc_1196:                               ; CODE XREF: SEGLOAD+1BE↑j
                jmp     short loc_11B8
; ---------------------------------------------------------------------------

loc_1198:                               ; CODE XREF: SEGLOAD+210↑j
                mov     byte ptr es:[bx], 0B8h
                mov     es:[bx+1], di

loc_11A0:                               ; CODE XREF: SEGLOAD+1F1↑j
                                        ; SEGLOAD+204↑j ...
                cmp     dx, 3
                jz      short loc_11B1
                mov     byte ptr [si+6], 0EAh
                mov     bx, es
                xchg    bx, [si+9]
                mov     [si+7], bx

loc_11B1:                               ; CODE XREF: SEGLOAD+1E5↑j
                                        ; SEGLOAD+1ED↑j ...
                add     si, dx
                loop    loc_114C
                jmp     loc_112B
; ---------------------------------------------------------------------------

loc_11B8:                               ; CODE XREF: SEGLOAD:loc_1196↑j
                mov     es, word ptr [bp+arg_6+2]
                pop     si
                pop     ds

loc_11BD:                               ; CODE XREF: SEGLOAD+139↑j
                or      byte ptr es:[si+4], 4
                test    word ptr es:[si+8], 1
                jnz     short loc_11D7
                mov     bx, es:3Eh
                add     bx, [bp+arg_4]
                mov     byte ptr es:[bx-1], 0

loc_11D7:                               ; CODE XREF: SEGLOAD+258↑j
                mov     bx, es:26h
                inc     bx
                mov     dx, es:[si+4]
                xor     ax, ax
                and     dx, 1
                jz      short loc_11F7
                test    byte ptr es:0Ch, 2
                jz      short loc_11F7
                mov     al, es:2
                dec     al

loc_11F7:                               ; CODE XREF: SEGLOAD+277↑j
                                        ; SEGLOAD+27F↑j
                mov     cx, [bp+arg_4]
                dec     cx
                push    es
                push    bx
                push    cx
                push    [bp+var_2]
                push    ax
                push    dx
                call    DEBUGDEFINESEGMENT
                mov     dx, [bp+var_4]
                mov     cx, [bp+var_6]
                mov     ax, [bp+var_2]

loc_120F:                               ; CODE XREF: SEGLOAD+FD↑j
                                        ; SEGLOAD+191↑j
                or      ax, ax
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    0Ah
SEGLOAD         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

LOADSEGMENT     proc near               ; CODE XREF: STARTMODULE+30↑p
                                        ; LOADMODULE+2D9↑p ...

var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 0Ah
                push    si
                push    di
                xor     ax, ax
                mov     [bp+var_4], ax
                not     ax
                mov     [bp+var_2], ax
                mov     es, [bp+arg_6]
                mov     si, [bp+arg_4]
                dec     si
                cmp     es:1Ch, si
                jbe     short loc_1284
                shl     si, 1
                mov     bx, si
                shl     si, 1
                shl     si, 1
                add     si, bx
                add     si, es:22h
                test    word ptr es:[si+4], 400h
                jz      short loc_1270
                mov     bx, es:8
                test    byte ptr es:[bx+4], 44h
                jnz     short loc_1270
                push    es
                mov     bx, 0FFFFh
                push    es
                push    word ptr es:0Eh
                push    bx
                push    bx
                call    LOADSEGMENT
                pop     es
                or      ax, ax
                jz      short loc_1284

loc_1270:                               ; CODE XREF: LOADSEGMENT+35↑j
                                        ; LOADSEGMENT+41↑j
                mov     bx, es:[si+4]
                test    bl, 2
                jnz     short loc_1286
                push    bx
                push    es
                push    si
                call    ALLOCSEG
                pop     bx
                or      ax, ax
                jnz     short loc_1295

loc_1284:                               ; CODE XREF: LOADSEGMENT+1E↑j
                                        ; LOADSEGMENT+55↑j
                jmp     short loc_12C2
; ---------------------------------------------------------------------------

loc_1286:                               ; CODE XREF: LOADSEGMENT+5E↑j
                test    bl, 4
                jz      short loc_1295
                mov     ax, es:[si+8]
                mov     [bp+var_8], ax

loc_1292:                               ; CODE XREF: LOADSEGMENT+C7↓j
                                        ; LOADSEGMENT+D1↓j
                jmp     loc_13B4
; ---------------------------------------------------------------------------

loc_1295:                               ; CODE XREF: LOADSEGMENT+69↑j
                                        ; LOADSEGMENT+70↑j
                mov     ax, [bp+arg_2]
                inc     ax
                jz      short loc_12A3
                dec     ax
                cmp     [bp+arg_0], ax
                jnz     short loc_12C5
                jmp     short loc_12B7
; ---------------------------------------------------------------------------

loc_12A3:                               ; CODE XREF: LOADSEGMENT+80↑j
                mov     dx, es:0Ah
                mov     bx, 0A400h
                push    es
                push    es
                push    dx
                push    es
                push    dx
                push    bx
                nop
                push    cs
                call    near ptr OPENFILE
                pop     es

loc_12B7:                               ; CODE XREF: LOADSEGMENT+88↑j
                mov     [bp+var_2], ax
                mov     [bp+arg_0], ax
                cmp     ax, 0FFFFh
                jnz     short loc_12C5

loc_12C2:                               ; CODE XREF: LOADSEGMENT:loc_1284↑j
                jmp     loc_13BC
; ---------------------------------------------------------------------------

loc_12C5:                               ; CODE XREF: LOADSEGMENT+86↑j
                                        ; LOADSEGMENT+A7↑j
                push    es
                push    es
                push    si
                push    [bp+arg_4]
                push    ax
                push    [bp+arg_0]
                call    SEGLOAD
                push    cx
                push    dx
                push    ax
                call    MYLOCK
                mov     [bp+var_8], dx
                pop     dx
                pop     cx
                pop     es
                or      ax, ax
                jz      short loc_1292
                mov     bx, es:[si+4]
                test    bx, 100h
                jz      short loc_1292
                and     bx, 1
                mov     [bp+var_A], bx
                push    es
                push    si
                mov     bx, [bp+var_2]
                inc     bx
                jnz     short loc_1306
                mov     es, dx
                mov     si, cx
                lods    word ptr es:[si]
                mov     [bp+var_6], ax
                jmp     short loc_1340
; ---------------------------------------------------------------------------

loc_1306:                               ; CODE XREF: LOADSEGMENT+E0↑j
                dec     bx
                mov     [bp+var_6], cx
                shl     cx, 1
                shl     cx, 1
                shl     cx, 1
                push    bx
                push    cx
                mov     ax, 22h ; '"'
                xor     bx, bx
                push    ax
                push    bx
                push    cx
                nop
                push    cs
                call    near ptr GLOBALALLOC
                mov     [bp+var_4], ax
                push    ax
                call    MYLOCK
                pop     cx
                pop     bx
                or      ax, ax
                jz      short loc_133C
                push    ds
                mov     ds, ax
                xor     dx, dx
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pop     ds
                jb      short loc_1374
                cmp     ax, cx
                jnz     short loc_1374

loc_133C:                               ; CODE XREF: LOADSEGMENT+111↑j
                xor     si, si
                mov     es, si
                assume es:cseg01

loc_1340:                               ; CODE XREF: LOADSEGMENT+EB↑j
                push    [bp+arg_6]
                push    [bp+var_4]
                push    es
                push    si
                push    [bp+var_6]
                push    [bp+var_8]
                push    [bp+var_A]
                push    [bp+var_2]
                call    SEGRELOC

loc_1357:                               ; CODE XREF: LOADSEGMENT+199↓j
                push    ax
                push    [bp+var_4]
                nop
                push    cs
                call    near ptr GLOBALFREE
                pop     ax
                pop     si
                pop     es
                assume es:nothing
                or      ax, ax
                jz      short loc_13BC
                push    es
                push    [bp+var_8]
                call    MYLOCK
                call    CHECKSEGCHKSUM
                pop     es
                jmp     short loc_13B4
; ---------------------------------------------------------------------------

loc_1374:                               ; CODE XREF: LOADSEGMENT+11D↑j
                                        ; LOADSEGMENT+121↑j
                xor     bx, bx
                mov     ax, 410h
                push    ax
                mov     ax, offset SZBADRELOCATIONRECORDS ; "Error reading relocation records from "
                push    cs
                push    ax
                push    [bp+arg_6]
                push    bx
                call    KERNELERROR
                jmp     short loc_13B0
; ---------------------------------------------------------------------------
SZBADRELOCATIONRECORDS db 'Error reading relocation records from ',0
                                        ; DATA XREF: LOADSEGMENT+161↑o
                db 24h
; ---------------------------------------------------------------------------

loc_13B0:                               ; CODE XREF: LOADSEGMENT+16D↑j
                xor     ax, ax
                jmp     short loc_1357
; ---------------------------------------------------------------------------

loc_13B4:                               ; CODE XREF: LOADSEGMENT:loc_1292↑j
                                        ; LOADSEGMENT+159↑j
                push    es
                push    [bp+var_8]
                call    MYLOCK
                pop     es

loc_13BC:                               ; CODE XREF: LOADSEGMENT:loc_12C2↑j
                                        ; LOADSEGMENT+14C↑j
                mov     cx, [bp+var_2]
                inc     cx
                jz      short loc_13D2
                dec     cx
                cmp     [bp+arg_2], cx
                jz      short loc_13D2
                mov     bx, cx
                mov     cx, ax
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                mov     ax, cx

loc_13D2:                               ; CODE XREF: LOADSEGMENT+1A7↑j
                                        ; LOADSEGMENT+1AD↑j
                mov     cx, ax
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    8
LOADSEGMENT     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

ADDMODULE       proc near               ; CODE XREF: LOADMODULE+165↑p
                                        ; FASTBOOT+E0↓p

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                mov     es, cs:HEXEHEAD

loc_13E4:                               ; CODE XREF: ADDMODULE+11↓j
                mov     cx, es:6
                jcxz    short loc_13EF
                mov     es, cx
                jmp     short loc_13E4
; ---------------------------------------------------------------------------

loc_13EF:                               ; CODE XREF: ADDMODULE+D↑j
                mov     ax, [bp+arg_0]
                mov     es:6, ax
                mov     es, ax
                cmp     cs:HEXESWEEP, 0
                jnz     short loc_140C
                cmp     word ptr es:30h, 0
                jz      short loc_140C
                mov     cs:HEXESWEEP, ax

loc_140C:                               ; CODE XREF: ADDMODULE+22↑j
                                        ; ADDMODULE+2A↑j
                mov     ax, [bp+arg_0]
                xor     bx, bx
                cmp     cs:FBOOTING, bl
                jnz     short loc_1429
                push    bx
                push    bx
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                call    CALCMAXNRSEG
                or      ax, ax
                jz      short loc_1429
                mov     ax, [bp+arg_0]

loc_1429:                               ; CODE XREF: ADDMODULE+3A↑j
                                        ; ADDMODULE+48↑j
                mov     sp, bp
                pop     bp
                retn    2
ADDMODULE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DELMODULE       proc near               ; CODE XREF: LOADMODULE+358↑p
                                        ; DECEXEUSAGE+46↑p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                mov     es, [bp+arg_0]
                mov     dx, es:6
                mov     ax, cs:HEXEHEAD
                cmp     [bp+arg_0], ax
                jnz     short loc_144A
                mov     cs:HEXEHEAD, dx
                jmp     short loc_145E
; ---------------------------------------------------------------------------

loc_144A:                               ; CODE XREF: DELMODULE+12↑j
                                        ; DELMODULE+28↓j
                or      ax, ax
                jz      short loc_145E
                mov     es, ax
                mov     ax, es:6
                cmp     [bp+arg_0], ax
                jnz     short loc_144A
                mov     es:6, dx

loc_145E:                               ; CODE XREF: DELMODULE+19↑j
                                        ; DELMODULE+1D↑j
                mov     es, [bp+arg_0]
                mov     word ptr es:0, 0
                push    es
                nop
                push    cs
                call    near ptr GLOBALFREEALL
                call    CALCMAXNRSEG
                mov     sp, bp
                pop     bp
                retn    2
DELMODULE       endp

;
; External Entry #46 into the Module
; Attributes (0001): Fixed Exported
;
;
; External Entry #96 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public FREEMODULE
FREEMODULE      proc far                ; CODE XREF: LOADMODULE+3DF↑p
                                        ; DOSTerminateHook+C0↓p

var_4           = word ptr -4
arg_0           = word ptr  6

                inc     bp              ; KERNEL_46
                                        ; KERNEL_96
                                        ; FREELIBRARY
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 2
                push    si
                push    di
                push    [bp+arg_0]
                call    GETEXEPTR
                or      ax, ax
                jz      short loc_14AF
                mov     [bp+var_4], ax
                push    [bp+var_4]
                call    DECEXEUSAGE
                jnz     short loc_14B4
                mov     es, [bp+var_4]
                mov     bx, es:8
                or      bx, bx
                jz      short loc_14A9
                push    word ptr es:[bx+8]
                call    MYFREE

loc_14A9:                               ; CODE XREF: FREEMODULE+29↑j
                push    [bp+var_4]
                call    DELMODULE

loc_14AF:                               ; CODE XREF: FREEMODULE+12↑j
                                        ; FREEMODULE+46↓j
                xor     ax, ax
                jmp     short loc_1519
; ---------------------------------------------------------------------------
                align 2

loc_14B4:                               ; CODE XREF: FREEMODULE+1D↑j
                mov     es, [bp+var_4]
                test    byte ptr es:0Ch, 2
                jz      short loc_14AF
                mov     es, [bp+var_4]
                mov     bx, es:8
                push    word ptr es:[bx+8]
                push    [bp+arg_0]
                call    MYFREE
                pop     dx
                cmp     [bp+arg_0], dx
                jnz     short loc_1519
                mov     es, cs:PGLOBALHEAP
                mov     cx, es:4
                mov     es, word ptr es:6
                xor     bx, bx
                mov     dx, [bp+var_4]

loc_14EB:                               ; CODE XREF: FREEMODULE+92↓j
                cmp     es:[bx+1], dx
                jnz     short loc_1505
                test    byte ptr es:[bx+5], 4
                jz      short loc_1505
                mov     ax, es:[bx+0Ah]
                or      ax, ax
                jnz     short loc_150D
                mov     ax, es
                inc     ax
                jmp     short loc_150D
; ---------------------------------------------------------------------------

loc_1505:                               ; CODE XREF: FREEMODULE+78↑j
                                        ; FREEMODULE+7F↑j
                mov     es, word ptr es:[bx+8]
                loop    loc_14EB
                xor     ax, ax

loc_150D:                               ; CODE XREF: FREEMODULE+87↑j
                                        ; FREEMODULE+8C↑j
                mov     es, [bp+var_4]
                mov     bx, es:8
                mov     es:[bx+8], ax

loc_1519:                               ; CODE XREF: FREEMODULE+3A↑j
                                        ; FREEMODULE+5E↑j
                xor     ax, ax
                push    ax
                push    ax
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
FREEMODULE      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

SEGRELOC        proc near               ; CODE XREF: LOADSEGMENT+13B↑p
                                        ; LOADFIXEDSEG+B7↓p

var_10          = byte ptr -10h
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh
arg_C           = word ptr  10h
arg_E           = word ptr  12h

                push    bp
                mov     bp, sp
                sub     sp, 10h
                push    si
                push    di
                mov     si, [bp+arg_8]
                mov     cx, [bp+arg_A]
                or      cx, [bp+arg_C]
                jnz     short loc_1556
                xor     dx, dx
                xor     cx, cx
                mov     bx, [bp+arg_0]
                mov     ax, 4201h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from present location
                jb      short loc_1589
                mov     [bp+var_6], dx
                mov     [bp+var_8], ax

loc_1556:                               ; CODE XREF: SEGRELOC+11↑j
                                        ; SEGRELOC+172↓j
                mov     ax, [bp+arg_A]
                or      ax, ax
                jnz     short loc_1599
                mov     ax, [bp+arg_C]
                or      ax, ax
                jnz     short loc_1595
                mov     cx, [bp+var_6]
                mov     dx, [bp+var_8]
                mov     bx, [bp+arg_0]
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_1589
                push    ds
                push    ss
                pop     ds
                lea     dx, [bp+var_10]
                mov     cx, 8
                add     [bp+var_8], cx
                adc     [bp+var_6], 0
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                pop     ds

loc_1589:                               ; CODE XREF: SEGRELOC+1F↑j
                                        ; SEGRELOC+43↑j
                jb      short loc_1600
                cmp     ax, cx
                jnz     short loc_1600
                push    ss
                pop     ax
                mov     si, dx
                jmp     short loc_1599
; ---------------------------------------------------------------------------

loc_1595:                               ; CODE XREF: SEGRELOC+33↑j
                push    ax
                call    MYLOCK

loc_1599:                               ; CODE XREF: SEGRELOC+2C↑j
                                        ; SEGRELOC+64↑j
                mov     es, ax
                mov     di, es:[si+2]
                mov     ax, es:[si+6]
                xor     cx, cx
                mov     [bp+var_4], cx
                mov     cl, 3
                and     cl, es:[si+1]
                jcxz    short loc_1606
                mov     bx, es:[si+4]
                sub     bx, 1
                jb      short loc_1600
                shl     bx, 1
                push    es
                mov     es, [bp+arg_E]
                add     bx, es:28h
                mov     bx, es:[bx]
                pop     es
                mov     [bp+var_2], bx
                loop    loc_15CF
                jmp     short loc_15E8
; ---------------------------------------------------------------------------

loc_15CF:                               ; CODE XREF: SEGRELOC+9C↑j
                push    [bp+arg_E]
                push    [bp+arg_0]
                push    ax
                call    GETSTRINGPTR
                push    [bp+var_2]
                push    dx
                push    ax
                call    FINDORDINAL
                mov     bx, [bp+var_2]
                or      ax, ax
                jz      short loc_15FD

loc_15E8:                               ; CODE XREF: SEGRELOC+9E↑j
                                        ; SEGRELOC+E3↓j
                push    bx
                push    ax
                call    ENTPROCADDRESS
                mov     es, dx
                cmp     word ptr es:0, 454Eh
                jnz     short loc_1656
                inc     [bp+var_4]
                jmp     short loc_1656
; ---------------------------------------------------------------------------

loc_15FD:                               ; CODE XREF: SEGRELOC+B7↑j
                jmp     loc_1744
; ---------------------------------------------------------------------------

loc_1600:                               ; CODE XREF: SEGRELOC:loc_1589↑j
                                        ; SEGRELOC+5E↑j ...
                jmp     loc_170B
; ---------------------------------------------------------------------------
                jmp     loc_177C
; ---------------------------------------------------------------------------

loc_1606:                               ; CODE XREF: SEGRELOC+7F↑j
                mov     cl, es:[si+4]
                jcxz    short loc_1600
                mov     bx, [bp+arg_E]
                cmp     cl, 0FFh
                jz      short loc_15E8
                mov     es, bx
                mov     bx, cx
                dec     bx
                cmp     es:1Ch, bx
                jbe     short loc_1600
                push    ax
                shl     bx, 1
                mov     ax, bx
                shl     bx, 1
                shl     bx, 1
                add     bx, ax
                add     bx, es:22h
                test    byte ptr es:[bx+4], 40h
                jz      short loc_1646
                push    es
                push    bx
                call    ALLOCSEG
                test    al, 1
                jnz     short loc_1651
                push    ax
                call    MYLOCK
                jmp     short loc_1651
; ---------------------------------------------------------------------------

loc_1646:                               ; CODE XREF: SEGRELOC+106↑j
                push    es
                push    cx
                push    [bp+arg_0]
                push    [bp+arg_0]
                call    LOADSEGMENT

loc_1651:                               ; CODE XREF: SEGRELOC+10F↑j
                                        ; SEGRELOC+115↑j
                mov     dx, ax
                pop     ax
                jcxz    short loc_1600

loc_1656:                               ; CODE XREF: SEGRELOC+C7↑j
                                        ; SEGRELOC+CC↑j
                push    ax
                push    dx
                mov     ax, [bp+arg_A]
                or      ax, ax
                jnz     short loc_166A
                mov     ax, ss
                mov     cx, [bp+arg_C]
                jcxz    short loc_166A
                push    cx
                call    MYLOCK

loc_166A:                               ; CODE XREF: SEGRELOC+12E↑j
                                        ; SEGRELOC+135↑j
                mov     es, ax
                mov     bl, 7
                and     bl, es:[si]
                xor     cx, cx
                mov     cl, 4
                and     cl, es:[si+1]
                push    bx
                push    cx
                push    [bp+arg_4]
                call    MYLOCK
                mov     es, ax
                pop     cx
                pop     bx
                pop     dx
                pop     ax
                cmp     bl, 2
                jz      short loc_16BA
                cmp     bl, 3
                jz      short loc_16D5
                cmp     bl, 5
                jz      short loc_16A7

loc_1696:                               ; CODE XREF: SEGRELOC+17D↓j
                                        ; SEGRELOC+189↓j ...
                mov     ax, 1
                add     si, 8
                dec     [bp+arg_6]
                jle     short loc_16A4
                jmp     loc_1556
; ---------------------------------------------------------------------------

loc_16A4:                               ; CODE XREF: SEGRELOC+170↑j
                jmp     loc_177C
; ---------------------------------------------------------------------------

loc_16A7:                               ; CODE XREF: SEGRELOC+165↑j
                jcxz    short loc_16AE
                add     es:[di], ax
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16AE:                               ; CODE XREF: SEGRELOC:loc_16A7↑j
                                        ; SEGRELOC+187↓j
                mov     bx, ax
                xchg    bx, es:[di]
                mov     di, bx
                inc     bx
                jnz     short loc_16AE
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16BA:                               ; CODE XREF: SEGRELOC+15B↑j
                mov     bx, [bp+var_4]
                and     bx, [bp+arg_2]
                jnz     short loc_16F0
                jcxz    short loc_16C9
                add     es:[di], dx
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16C9:                               ; CODE XREF: SEGRELOC+193↑j
                                        ; SEGRELOC+1A2↓j
                mov     bx, dx
                xchg    bx, es:[di]
                mov     di, bx
                inc     bx
                jnz     short loc_16C9
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16D5:                               ; CODE XREF: SEGRELOC+160↑j
                jcxz    short loc_16E0
                add     es:[di], ax
                add     es:[di+2], dx
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16E0:                               ; CODE XREF: SEGRELOC:loc_16D5↑j
                                        ; SEGRELOC+1BD↓j
                mov     bx, ax
                xchg    bx, es:[di]
                mov     es:[di+2], dx
                mov     di, bx
                inc     bx
                jnz     short loc_16E0
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16F0:                               ; CODE XREF: SEGRELOC+191↑j
                jcxz    short loc_16FB
                add     es:[di], dx
                add     es:[di-2], ax
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_16FB:                               ; CODE XREF: SEGRELOC:loc_16F0↑j
                                        ; SEGRELOC+1D8↓j
                mov     bx, dx
                xchg    bx, es:[di]
                mov     es:[di-2], ax
                mov     di, bx
                inc     bx
                jnz     short loc_16FB
                jmp     short loc_1696
; ---------------------------------------------------------------------------

loc_170B:                               ; CODE XREF: SEGRELOC:loc_1600↑j
                mov     es, [bp+arg_E]
                xor     bx, bx
                mov     ax, 407h
                push    ax
                mov     ax, offset SZINVALIDRELOCRECORD ; "Invalid relocation record in "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_173F
; ---------------------------------------------------------------------------
SZINVALIDRELOCRECORD db 'Invalid relocation record in ',0
                                        ; DATA XREF: SEGRELOC+1E5↑o
                db 24h
; ---------------------------------------------------------------------------

loc_173F:                               ; CODE XREF: SEGRELOC+1EF↑j
                xor     ax, ax

loc_1741:
                jmp     short loc_177C
; ---------------------------------------------------------------------------
                align 2

loc_1744:                               ; CODE XREF: SEGRELOC:loc_15FD↑j
                mov     es, [bp+arg_E]
                xor     bx, bx
                mov     ax, 404h
                push    ax
                mov     ax, offset SZINVALIDENTRYPOINT ; "Invalid entry point name in "
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_1777
; ---------------------------------------------------------------------------
SZINVALIDENTRYPOINT db 'Invalid entry point name in ',0
                                        ; DATA XREF: SEGRELOC+21E↑o
                db 24h
; ---------------------------------------------------------------------------

loc_1777:                               ; CODE XREF: SEGRELOC+228↑j
                xor     ax, ax
                jmp     short loc_177C
; ---------------------------------------------------------------------------
                align 2

loc_177C:                               ; CODE XREF: SEGRELOC+D4↑j
                                        ; SEGRELOC:loc_16A4↑j ...
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    10h
SEGRELOC        endp

; ---------------------------------------------------------------------------
INT3FBP         dw 0                    ; DATA XREF: INT3FHANDLER+3B↓w
                                        ; SEARCHSTACK+BF↓r ...
INT3FSAVEDBP    dw 0                    ; DATA XREF: SEARCHSTACK+110↓r
                                        ; SEARCHSTACK+139↓w
INT3FSAVEDSS    dw 0                    ; DATA XREF: INT3FTHUNK+20↓w
                                        ; SEARCHSTACK+103↓r ...
INT3FSAVEDDS    dw 0                    ; DATA XREF: INT3FTHUNK+1A↓r
                                        ; SEARCHSTACK+125↓r ...
INT3FSAVEDFRAME db 2 dup(0)             ; DATA XREF: SEARCHSTACK+162↓o
INT3FSAVEDIP    dw 0                    ; DATA XREF: INT3FTHUNK+6↓r
                                        ; SEARCHSTACK+11D↓r ...
INT3FSAVEDCS    dw 0                    ; DATA XREF: INT3FTHUNK+10↓r
                                        ; SEARCHSTACK+115↓r ...
INT3FCURRENTCS  dw 0                    ; DATA XREF: INT3FTHUNK+B↓w
                                        ; INT3FHANDLER↓w ...
INT3FCURRENTDS  dw 0                    ; DATA XREF: INT3FTHUNK+15↓w
                                        ; INT3FFAIL+B↓r ...
INT3FCURRENTIP  dw 0                    ; DATA XREF: INT3FTHUNK+1↓w
                                        ; INT3FHANDLER+A↓w ...

; =============== S U B R O U T I N E =======================================


INT3FTHUNK      proc far                ; DATA XREF: SEARCHSTACK+15A↓o
                pushf
                pop     cs:INT3FCURRENTIP
                push    cs:INT3FSAVEDIP
                pop     cs:INT3FCURRENTCS
                push    cs:INT3FSAVEDCS
                pop     cs:INT3FCURRENTDS
                push    cs:INT3FSAVEDDS
                pop     ds
                mov     cs:INT3FSAVEDSS, 0
                jmp     short loc_181F
INT3FTHUNK      endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                nop

; =============== S U B R O U T I N E =======================================


INT3FFAIL       proc near               ; CODE XREF: INT3FHANDLER:loc_1872↓j
                xor     bx, bx
                mov     ax, 4FFh
                push    ax
                mov     ax, offset SZERRINT3FSEGMENT ; "INT 3F handler unable to load segment f"...
                push    cs
                push    ax
                push    cs:INT3FCURRENTDS
                push    bx
                call    KERNELERROR
                jmp     short loc_1805
; ---------------------------------------------------------------------------
SZERRINT3FSEGMENT db 'INT 3F handler unable to load segment from ',0
                                        ; DATA XREF: INT3FFAIL+6↑o
                db  24h ; $
; ---------------------------------------------------------------------------

loc_1805:                               ; CODE XREF: INT3FFAIL+14↑j
                mov     ax, 4CFFh
                int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
INT3FFAIL       endp                    ; AL = exit code


; =============== S U B R O U T I N E =======================================


INT3FHANDLER    proc far
                pop     cs:INT3FCURRENTCS
                pop     cs:INT3FCURRENTDS
                pop     cs:INT3FCURRENTIP
                sub     cs:INT3FCURRENTCS, 2

loc_181F:                               ; CODE XREF: INT3FTHUNK+27↑j
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                push    es
                push    dx
                push    cx
                push    bx
                push    ax
                sti
                les     bx, dword ptr cs:INT3FCURRENTCS
                xor     cx, cx
                mov     cl, es:[bx+2]
                jcxz    short near ptr RETTHUNK
                push    ax
                mov     bx, 0FFFFh
                push    es
                push    cx
                push    bx
                push    bx
                call    TESTDSAX
                mov     [bp-0Ch], ax
                mov     cs:INT3FBP, bp
                call    LOADSEGMENT
                jcxz    short loc_1872
                pop     ax
                pop     dx
                cmp     ax, dx
                jz      short loc_1859
                push    dx
                call    MYLOCK

loc_1859:                               ; CODE XREF: INT3FHANDLER+49↑j
                push    ax

loc_185A:                               ; CODE XREF: RETTHUNK+44↓j
                                        ; RETTHUNK+49↓j
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     es
                pop     ds
                pop     bp
                dec     bp
                push    cs:INT3FCURRENTIP
                push    cs:INT3FCURRENTDS
                push    cs:INT3FCURRENTCS
                iret
; ---------------------------------------------------------------------------

loc_1872:                               ; CODE XREF: INT3FHANDLER+43↑j
                                        ; RETTHUNK+32↓j
                jmp     INT3FFAIL
INT3FHANDLER    endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


RETTHUNK        proc far                ; CODE XREF: INT3FHANDLER+2B↑j
                mov     cl, es:[bx+3]
                jcxz    short loc_18BB
                xor     ax, ax

loc_187D:                               ; CODE XREF: RETTHUNK+E↓j
                add     bx, 4
                cmp     es:[bx], ax
                jnz     short loc_187D
                mov     es, word ptr es:[bx+2]
                mov     bx, 0FFFFh
                push    es
                push    cx
                push    bx
                push    bx
                mov     ax, cs:INT3FCURRENTCS
                mov     cl, 3
                shr     ax, cl
                and     al, 0FEh
                xchg    ax, [bp-2]
                mov     cs:INT3FCURRENTCS, ax
                dec     word ptr [bp+0]
                call    LOADSEGMENT
                jcxz    short loc_1872
                mov     cs:INT3FCURRENTDS, ax
                push    word ptr [bp-2]
                call    MYLOCK
                mov     [bp-2], ax
                inc     word ptr [bp+0]
                jmp     short loc_185A
; ---------------------------------------------------------------------------

loc_18BB:                               ; CODE XREF: RETTHUNK+4↑j
                cmp     ah, 3
                ja      short loc_185A
                pop     bx
                pop     bx
                pop     cx
                pop     dx
                pop     es
                pop     ds
                pop     bp
                jnz     short loc_18D8
                xor     bp, bp
                push    cs:INT3FCURRENTDS
                push    cs:INT3FCURRENTCS
                push    es
                push    bx
                retf
; ---------------------------------------------------------------------------

loc_18D8:                               ; CODE XREF: RETTHUNK+52↑j
                xor     bp, bp
                or      ah, ah
                jnz     short loc_18E5
                nop
                push    cs
                call    near ptr GETVERSION
                jmp     short loc_18FA
; ---------------------------------------------------------------------------

loc_18E5:                               ; CODE XREF: RETTHUNK+67↑j
                dec     ah
                jnz     short loc_18F2
                push    es
                push    bx
                nop
                push    cs
                call    near ptr GETMODULEHANDLE
                jmp     short loc_18FA
; ---------------------------------------------------------------------------

loc_18F2:                               ; CODE XREF: RETTHUNK+72↑j
                push    dx
                push    es
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS

loc_18FA:                               ; CODE XREF: RETTHUNK+6E↑j
                                        ; RETTHUNK+7B↑j
                jmp     dword ptr cs:INT3FCURRENTCS
RETTHUNK        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


TESTDSAX        proc near               ; CODE XREF: INT3FHANDLER+35↑p
                xor     bx, bx
                test    al, 1
                jz      short done
                mov     es, cs:PGLOBALHEAP
                cmp     ax, es:[bx+6]
                jbe     short done
                cmp     ax, es:[bx+8]
                jnb     short done
                dec     ax
                mov     es, ax
                inc     ax
                cmp     byte ptr es:[bx], 4Dh ; 'M'
                jnz     short done
                mov     cx, es:[bx+1]
                jcxz    short done
                test    byte ptr es:[bx+5], 4
                jnz     short done
                mov     dx, es:[bx+0Ah]
                or      dx, dx
                jz      short done
                mov     es, cx
                cmp     word ptr es:[bx], 454Eh
                jnz     short done
                mov     bx, es:[bx+8]
                or      bx, bx
                jz      short done
                cmp     es:[bx+8], dx
                jnz     short done
                mov     ax, dx

done:                                   ; CODE XREF: TESTDSAX+4↑j
                                        ; TESTDSAX+F↑j ...
                retn
TESTDSAX        endp

;
; External Entry #95 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOADLIBRARY
LOADLIBRARY     proc far
                pop     ax              ; KERNEL_95
                pop     dx
                mov     cx, 0FFFFh
                push    cx
                push    cx
                push    dx
                push    ax
                jmp     near ptr LOADMODULE
; ---------------------------------------------------------------------------
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf
LOADLIBRARY     endp

;
; External Entry #93 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETCODEHANDLE
GETCODEHANDLE   proc far

arg_0           = dword ptr  6

                inc     bp              ; KERNEL_93
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                les     bx, [bp+arg_0]
                cmp     word ptr es:0, 454Eh
                jnz     short loc_19B0
                cmp     bx, es:4
                jnb     short loc_198B
                dec     bx
                cmp     bx, es:1Ch
                jnb     short loc_19B0
                mov     cx, bx
                inc     cx
                jmp     short loc_19A0
; ---------------------------------------------------------------------------

loc_198B:                               ; CODE XREF: GETCODEHANDLE+18↑j
                cmp     word ptr es:[bx], 0D02Eh
                jnz     short loc_19B0
                dec     bx
                cmp     byte ptr es:[bx+6], 0EAh
                jz      short loc_19AC
                xor     cx, cx
                mov     cl, es:[bx+8]

loc_19A0:                               ; CODE XREF: GETCODEHANDLE+25↑j
                mov     dx, 0FFFFh
                push    es
                push    cx
                push    dx
                push    dx
                call    LOADSEGMENT
                jmp     short loc_19BD
; ---------------------------------------------------------------------------

loc_19AC:                               ; CODE XREF: GETCODEHANDLE+34↑j
                les     bx, es:[bx+7]

loc_19B0:                               ; CODE XREF: GETCODEHANDLE+11↑j
                                        ; GETCODEHANDLE+20↑j ...
                push    es
                call    MYLOCK
                call    GENTER
                call    GLRUTOP
                call    GLEAVE

loc_19BD:                               ; CODE XREF: GETCODEHANDLE+46↑j
                mov     ax, dx
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
GETCODEHANDLE   endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

COPYNAME        proc near               ; CODE XREF: GETPROCADDRESS+31↓p
                                        ; GETMODULEHANDLE+1C↓p

arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8

                push    bp
                mov     bp, sp
                push    si
                les     si, [bp+arg_4]
                mov     bx, [bp+arg_2]
                mov     cx, 3Fh ; '?'
                mov     dx, [bp+arg_0]

loc_19DC:                               ; CODE XREF: COPYNAME+1C↓j
                lods    byte ptr es:[si]
                or      al, al
                jz      short loc_19EA
                call    dx
                inc     bx
                mov     ss:[bx], al
                loop    loc_19DC

loc_19EA:                               ; CODE XREF: COPYNAME+14↑j
                mov     byte ptr ss:[bx+1], 0
                mov     ax, bx
                mov     bx, [bp+arg_2]
                sub     ax, bx
                mov     ss:[bx], al
                pop     si
                mov     sp, bp
                pop     bp
                retn    8
; ---------------------------------------------------------------------------
                retn
COPYNAME        endp

;
; External Entry #50 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETPROCADDRESS
GETPROCADDRESS  proc far                ; CODE XREF: RETTHUNK+82↑p
                                        ; INITFWDREF+5F↓p ...

var_42          = byte ptr -42h
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                inc     bp              ; KERNEL_50
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 40h
                push    si
                push    [bp+arg_4]
                call    GETEXEPTR
                xor     dx, dx
                jcxz    short loc_1A43
                mov     si, ax
                cmp     [bp+arg_2], 0
                jnz     short loc_1A21
                mov     ax, [bp+arg_0]
                jmp     short loc_1A3E
; ---------------------------------------------------------------------------

loc_1A21:                               ; CODE XREF: GETPROCADDRESS+19↑j
                lea     bx, [bp+var_42]
                mov     dx, 0FFh
                mov     dx, 1A00h
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    bx
                push    dx
                call    COPYNAME
                lea     bx, [bp+var_42]
                push    si
                push    ss
                push    bx
                call    FINDORDINAL

loc_1A3E:                               ; CODE XREF: GETPROCADDRESS+1E↑j
                push    si
                push    ax
                call    ENTPROCADDRESS

loc_1A43:                               ; CODE XREF: GETPROCADDRESS+11↑j
                mov     cx, ax
                or      cx, dx
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
GETPROCADDRESS  endp

;
; External Entry #49 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETMODULEFILENAME
GETMODULEFILENAME proc far

arg_0           = word ptr  6
arg_2           = dword ptr  8
arg_6           = word ptr  0Ch

                inc     bp              ; KERNEL_49
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    [bp+arg_6]
                call    GETEXEPTR
                jcxz    short loc_1A87
                mov     ds, ax
                mov     si, ds:0Ah
                xor     cx, cx
                mov     cl, [si]
                sub     cx, 8
                lea     si, [si+8]
                les     di, [bp+arg_2]
                cmp     cx, [bp+arg_0]
                jl      short loc_1A7E
                mov     cx, [bp+arg_0]
                dec     cx

loc_1A7E:                               ; CODE XREF: GETMODULEFILENAME+25↑j
                cld
                mov     ax, cx
                rep movsb
                mov     byte ptr es:[di], 0

loc_1A87:                               ; CODE XREF: GETMODULEFILENAME+D↑j
                mov     cx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
GETMODULEFILENAME endp

;
; External Entry #48 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETMODULEUSAGE
GETMODULEUSAGE  proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_48
                push    bp
                mov     bp, sp
                push    ds
                push    [bp+arg_0]
                call    GETEXEPTR
                jcxz    short loc_1AA9
                mov     es, ax
                mov     ax, es:2

loc_1AA9:                               ; CODE XREF: GETMODULEUSAGE+B↑j
                mov     cx, ax
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
GETMODULEUSAGE  endp

;
; External Entry #54 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETINSTANCEDATA
GETINSTANCEDATA proc far

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                inc     bp              ; KERNEL_54
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    ds
                push    [bp+arg_4]
                call    MYLOCK
                pop     es
                or      ax, ax
                jz      short loc_1ADC
                mov     ds, ax
                mov     si, [bp+arg_2]
                mov     di, si
                mov     ax, [bp+arg_0]
                mov     cx, ax
                jcxz    short loc_1ADC
                cld
                rep movsb
                push    es
                pop     ds

loc_1ADC:                               ; CODE XREF: GETINSTANCEDATA+11↑j
                                        ; GETINSTANCEDATA+1F↑j
                mov     cx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
GETINSTANCEDATA endp

;
; External Entry #51 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public MAKEPROCINSTANCE
MAKEPROCINSTANCE proc far

var_2           = word ptr -2
arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                inc     bp              ; KERNEL_51
                push    bp
                mov     bp, sp
                push    ds
                push    di
                mov     ax, cs:HTHUNKS
                or      ax, ax
                jnz     short loc_1B2B

loc_1AF9:                               ; CODE XREF: MAKEPROCINSTANCE+53↓j
                mov     bx, 1F0h
                mov     cx, 2040h
                push    cx
                push    ax
                push    bx
                nop
                push    cs
                call    near ptr GLOBALALLOC
                mov     es, ax
                mov     bx, cs:HTHUNKS
                mov     cs:HTHUNKS, es
                mov     es:0, bx
                mov     bx, 6
                mov     cx, 3Dh ; '='

loc_1B1E:                               ; CODE XREF: MAKEPROCINSTANCE+3B↓j
                lea     dx, [bx+8]
                mov     es:[bx], dx
                mov     bx, dx
                loop    loc_1B1E
                mov     es:[bx], cx

loc_1B2B:                               ; CODE XREF: MAKEPROCINSTANCE+C↑j
                                        ; MAKEPROCINSTANCE+51↓j
                mov     es, ax
                mov     bx, es:6
                or      bx, bx
                jnz     short loc_1B40
                mov     ax, es:0
                or      ax, ax
                jnz     short loc_1B2B
                jmp     short loc_1AF9
; ---------------------------------------------------------------------------

loc_1B40:                               ; CODE XREF: MAKEPROCINSTANCE+49↑j
                mov     ax, es:[bx]
                mov     es:6, ax
                lea     di, [bx-6]
                mov     bx, [bp+var_2]
                mov     ax, [bp+arg_0]
                or      ax, ax
                jz      short loc_1B5C
                push    es
                push    ax
                call    MYLOCK
                pop     es
                mov     bx, ax

loc_1B5C:                               ; CODE XREF: MAKEPROCINSTANCE+67↑j
                cld
                mov     dx, di
                mov     al, 0B8h
                stosb
                mov     ax, bx
                stosw
                mov     al, 0EAh
                stosb
                mov     ax, [bp+arg_2]
                stosw
                mov     ax, [bp+arg_4]
                stosw
                mov     ax, dx
                mov     dx, es
                mov     cx, ax
                or      cx, dx
                pop     di
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
MAKEPROCINSTANCE endp

;
; External Entry #52 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public FREEPROCINSTANCE
FREEPROCINSTANCE proc far

arg_0           = word ptr  6
arg_2           = word ptr  8

                inc     bp              ; KERNEL_52
                push    bp
                mov     bp, sp
                push    ds
                push    di
                mov     ax, cs:HTHUNKS

loc_1B8E:                               ; CODE XREF: FREEPROCINSTANCE+19↓j
                or      ax, ax
                jz      short loc_1BB3
                mov     es, ax
                cmp     ax, [bp+arg_2]
                jz      short loc_1B9F
                mov     ax, es:0
                jmp     short loc_1B8E
; ---------------------------------------------------------------------------

loc_1B9F:                               ; CODE XREF: FREEPROCINSTANCE+13↑j
                mov     di, [bp+arg_0]
                xor     ax, ax
                cld
                stosw
                stosw
                stosw
                mov     ax, di
                xchg    ax, es:6
                stosw
                mov     ax, 0FFFFh

loc_1BB3:                               ; CODE XREF: FREEPROCINSTANCE+C↑j
                mov     cx, ax
                pop     di
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
FREEPROCINSTANCE endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

PATCHPROLOG     proc near               ; CODE XREF: PATCHTHUNKS+179↓p
                                        ; PATCHTHUNKS+19A↓p

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    bx
                push    cx
                push    dx
                push    es
                les     bx, [bp+arg_0]
                cmp     byte ptr es:[bx], 0B8h
                jz      short loc_1BD7
                cmp     byte ptr es:[bx], 0CCh
                jnz     short loc_1BF5

loc_1BD7:                               ; CODE XREF: PATCHPROLOG+E↑j
                inc     bx
                cmp     es:[bx], si
                jnz     short loc_1BF5
                mov     dx, si
                xor     dx, di
                test    bl, 1
                jz      short loc_1BE8
                xchg    dh, dl

loc_1BE8:                               ; CODE XREF: PATCHPROLOG+23↑j
                mov     es:[bx], di
                mov     ax, es
                call    GETCHKSUMADDR
                jcxz    short loc_1BF5
                xor     es:[bx], dx

loc_1BF5:                               ; CODE XREF: PATCHPROLOG+14↑j
                                        ; PATCHPROLOG+1A↑j ...
                pop     es
                pop     dx
                pop     cx
                pop     bx
                mov     sp, bp
                pop     bp
                retn    4
PATCHPROLOG     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

PATCHTHUNKS     proc near               ; CODE XREF: MYFREE+22↑p
                                        ; GNOTIFY+1F↓p ...

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     ax, [bp+arg_2]
                call    CHECKSEGCHKSUM
                push    cs:HHANDLE

loc_1C0F:                               ; CODE XREF: PATCHTHUNKS:loc_1C2D↓j
                                        ; PATCHTHUNKS+33↓j
                pop     cx
                jcxz    short loc_1C3A
                push    cx
                call    MYLOCK
                mov     ax, [bp+arg_2]
                mov     dx, [bp+arg_0]
                push    word ptr es:0Ch
                mov     di, es:0Eh
                mov     cx, es:[di+10h]
                add     di, 12h

loc_1C2D:                               ; CODE XREF: PATCHTHUNKS+39↓j
                jcxz    short loc_1C0F
                cld
                repne scasw
                jnz     short loc_1C0F
                mov     es:[di-2], dx
                jmp     short loc_1C2D
; ---------------------------------------------------------------------------

loc_1C3A:                               ; CODE XREF: PATCHTHUNKS+11↑j
                mov     si, [bp+arg_2]
                mov     di, [bp+arg_0]
                mov     ax, si
                dec     ax
                mov     es, ax
                mov     bl, es:5
                mov     ax, es:0Ah
                or      ax, ax
                jnz     short loc_1C54
                mov     ax, si

loc_1C54:                               ; CODE XREF: PATCHTHUNKS+51↑j
                mov     es, word ptr es:1
                cmp     word ptr es:0, 454Eh
                jnz     short loc_1C7E
                test    bl, 4
                jnz     short loc_1CAC
                mov     bx, es:22h
                mov     cx, es:1Ch
                jcxz    short loc_1C7E

loc_1C73:                               ; CODE XREF: PATCHTHUNKS+7D↓j
                cmp     es:[bx+8], ax
                jz      short loc_1C81
                add     bx, 0Ah
                loop    loc_1C73

loc_1C7E:                               ; CODE XREF: PATCHTHUNKS+61↑j
                                        ; PATCHTHUNKS+72↑j ...
                jmp     loc_1E03
; ---------------------------------------------------------------------------

loc_1C81:                               ; CODE XREF: PATCHTHUNKS+78↑j
                mov     dx, es:[bx+4]
                test    dl, 4
                jz      short loc_1C7E
                sub     cx, es:1Ch
                neg     cx
                inc     cx
                push    bx
                or      di, di
                jnz     short loc_1CA3
                mov     bx, es:3Eh
                add     bx, cx
                mov     byte ptr es:[bx-1], 0FFh

loc_1CA3:                               ; CODE XREF: PATCHTHUNKS+96↑j
                pop     bx
                test    dl, 1
                jnz     short loc_1CAC
                jmp     loc_1DA3
; ---------------------------------------------------------------------------

loc_1CAC:                               ; CODE XREF: PATCHTHUNKS+66↑j
                                        ; PATCHTHUNKS+A8↑j
                push    es
                push    cs:HTHUNKS

loc_1CB2:                               ; CODE XREF: PATCHTHUNKS+F0↓j
                pop     cx
                jcxz    short loc_1CF1
                mov     es, cx
                push    word ptr es:0
                xor     bx, bx
                mov     cx, 3Dh ; '='

loc_1CC1:                               ; CODE XREF: PATCHTHUNKS:loc_1CED↓j
                add     bx, 8
                cmp     byte ptr es:[bx], 0B8h
                jnz     short loc_1CED
                cmp     es:[bx+1], si
                jnz     short loc_1CED
                mov     es:[bx+1], di
                or      di, di
                jnz     short loc_1CED
                xchg    bx, di
                xor     ax, ax
                cld
                stosw
                stosw
                stosw
                mov     ax, di
                xchg    ax, es:6
                stosw
                xchg    bx, di
                sub     bx, 8

loc_1CED:                               ; CODE XREF: PATCHTHUNKS+C9↑j
                                        ; PATCHTHUNKS+CF↑j ...
                loop    loc_1CC1
                jmp     short loc_1CB2
; ---------------------------------------------------------------------------

loc_1CF1:                               ; CODE XREF: PATCHTHUNKS+B4↑j
                pop     es
                mov     bx, es:4
                xor     ah, ah
                or      di, di
                jnz     short loc_1D30
                push    si
                call    MYLOCK
                mov     di, dx
                mov     si, es:0Ch
                mov     cx, cs:HHANDLE
                cmp     cx, di
                jnz     short loc_1D19
                mov     cs:HHANDLE, si
                jmp     short loc_1D2D
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_1D19:                               ; CODE XREF: PATCHTHUNKS+110↑j
                                        ; PATCHTHUNKS+127↓j
                jcxz    short loc_1D2D
                push    cx
                call    MYLOCK
                mov     cx, es:0Ch
                cmp     cx, di
                jnz     short loc_1D19
                mov     es:0Ch, si

loc_1D2D:                               ; CODE XREF: PATCHTHUNKS+117↑j
                                        ; PATCHTHUNKS:loc_1D19↑j ...
                jmp     loc_1E03
; ---------------------------------------------------------------------------

loc_1D30:                               ; CODE XREF: PATCHTHUNKS+FC↑j
                                        ; PATCHTHUNKS+13E↓j ...
                mov     cx, es:[bx]
                or      cl, cl
                jz      short loc_1D2D
                add     bx, 2
                cmp     ch, 0
                jz      short loc_1D30
                cmp     ch, 0FFh
                jz      short loc_1D82
                push    bx
                mov     bl, ch
                xor     bh, bh
                xor     ch, ch
                dec     bx
                shl     bx, 1
                mov     dx, bx
                shl     bx, 1
                shl     bx, 1
                add     bx, dx
                add     bx, es:22h
                xor     dx, dx
                test    byte ptr es:[bx+4], 2
                jz      short loc_1D68
                mov     dx, es:[bx+8]

loc_1D68:                               ; CODE XREF: PATCHTHUNKS+163↑j
                pop     bx

loc_1D69:                               ; CODE XREF: PATCHTHUNKS+17F↓j
                test    byte ptr es:[bx], 2
                jz      short loc_1D7B
                or      dx, dx
                jz      short loc_1D7B
                push    dx
                push    word ptr es:[bx+1]
                call    PATCHPROLOG

loc_1D7B:                               ; CODE XREF: PATCHTHUNKS+16E↑j
                                        ; PATCHTHUNKS+172↑j
                add     bx, 3
                loop    loc_1D69
                jmp     short loc_1D30
; ---------------------------------------------------------------------------

loc_1D82:                               ; CODE XREF: PATCHTHUNKS+143↑j
                xor     ch, ch

loc_1D84:                               ; CODE XREF: PATCHTHUNKS+1A0↓j
                test    byte ptr es:[bx], 2
                jz      short loc_1D9C
                cmp     byte ptr es:[bx+6], 0EAh
                jnz     short loc_1D9C
                push    word ptr es:[bx+9]
                push    word ptr es:[bx+7]
                call    PATCHPROLOG

loc_1D9C:                               ; CODE XREF: PATCHTHUNKS+189↑j
                                        ; PATCHTHUNKS+190↑j
                add     bx, 0Bh
                loop    loc_1D84
                jmp     short loc_1D30
; ---------------------------------------------------------------------------

loc_1DA3:                               ; CODE XREF: PATCHTHUNKS+AA↑j
                or      di, di
                jnz     short loc_1DAC
                and     byte ptr es:[bx+4], 0FBh

loc_1DAC:                               ; CODE XREF: PATCHTHUNKS+1A6↑j
                mov     dx, cx
                mov     bx, es:4

loc_1DB3:                               ; CODE XREF: PATCHTHUNKS+1C1↓j
                                        ; PATCHTHUNKS+1D0↓j ...
                mov     cx, es:[bx]
                or      cl, cl
                jz      short loc_1E03
                add     bx, 2
                cmp     ch, 0
                jz      short loc_1DB3
                cmp     ch, 0FFh
                jz      short loc_1DD1
                xor     ch, ch
                add     bx, cx
                shl     cx, 1
                add     bx, cx
                jmp     short loc_1DB3
; ---------------------------------------------------------------------------

loc_1DD1:                               ; CODE XREF: PATCHTHUNKS+1C6↑j
                xor     ch, ch

loc_1DD3:                               ; CODE XREF: PATCHTHUNKS+200↓j
                cmp     byte ptr es:[bx+6], 0EAh
                jnz     short loc_1DFC
                cmp     es:[bx+9], si
                jnz     short loc_1DFC
                or      di, di
                jnz     short loc_1DF8
                mov     ax, es:[bx+7]
                mov     word ptr es:[bx+6], 3FCDh
                mov     es:[bx+8], dl
                mov     es:[bx+9], ax
                jmp     short loc_1DFC
; ---------------------------------------------------------------------------

loc_1DF8:                               ; CODE XREF: PATCHTHUNKS+1E3↑j
                mov     es:[bx+9], di

loc_1DFC:                               ; CODE XREF: PATCHTHUNKS+1D9↑j
                                        ; PATCHTHUNKS+1DF↑j ...
                add     bx, 0Bh
                loop    loc_1DD3
                jmp     short loc_1DB3
; ---------------------------------------------------------------------------

loc_1E03:                               ; CODE XREF: PATCHTHUNKS:loc_1C7E↑j
                                        ; PATCHTHUNKS:loc_1D2D↑j ...
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
PATCHTHUNKS     endp

;
; External Entry #47 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETMODULEHANDLE
GETMODULEHANDLE proc far                ; CODE XREF: RETTHUNK+78↑p
                                        ; INITFWDREF+52↓p ...

var_42          = byte ptr -42h
var_41          = byte ptr -41h
arg_0           = word ptr  6
arg_2           = word ptr  8

                inc     bp              ; KERNEL_47
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 40h
                cmp     [bp+arg_2], 0
                jz      short loc_1E35
                lea     bx, [bp+var_42]
                mov     dx, 53A6h
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    bx
                push    dx
                call    COPYNAME
                lea     bx, [bp+var_41]
                push    ss
                push    bx
                push    ax
                call    FINDEXEINFO
                jmp     short loc_1E3B
; ---------------------------------------------------------------------------

loc_1E35:                               ; CODE XREF: GETMODULEHANDLE+C↑j
                push    [bp+arg_0]
                call    GETEXEPTR

loc_1E3B:                               ; CODE XREF: GETMODULEHANDLE+28↑j
                mov     cx, ax
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
GETMODULEHANDLE endp

;
; External Entry #53 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public CALLPROCINSTANCE
CALLPROCINSTANCE proc near
                mov     ax, ds          ; KERNEL_53
                mov     cx, es:[bx]
                jcxz    short loc_1E5F
                xchg    ax, cx
                test    al, 1
                jnz     short loc_1E5F
                xchg    ax, bx
CALLPROCINSTANCE endp


; =============== S U B R O U T I N E =======================================


CALLMOVEABLEINSTANCEPROC proc near
                mov     ds, cs:PGLOBALHEAP
                mov     bx, [bx]
                xchg    ax, bx
                mov     ds, cx

loc_1E5F:                               ; CODE XREF: CALLPROCINSTANCE+5↑j
                                        ; CALLPROCINSTANCE+A↑j
                jmp     dword ptr es:[bx+2]
CALLMOVEABLEINSTANCEPROC endp

;
; External Entry #94 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public DEFINEHANDLETABLE
DEFINEHANDLETABLE proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_94
                push    bp
                mov     bp, sp
                push    ds
                push    di
                push    ds
                call    MYLOCK
                or      ax, ax
                jz      short loc_1EA0
                xor     ax, ax
                test    byte ptr es:5, 4
                jz      short loc_1EA0
                mov     di, [bp+arg_0]
                push    di
                cmp     es:0Ch, ax
                jnz     short loc_1E9B
                xchg    dx, cs:HHANDLE
                mov     es:0Ch, dx
                mov     cx, es:[di+10h]
                lea     di, [di+12h]
                cld
                rep stosw
                inc     ax

loc_1E9B:                               ; CODE XREF: DEFINEHANDLETABLE+21↑j
                pop     word ptr es:0Eh

loc_1EA0:                               ; CODE XREF: DEFINEHANDLETABLE+C↑j
                                        ; DEFINEHANDLETABLE+16↑j
                pop     di
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
DEFINEHANDLETABLE endp

;
; External Entry #76 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public DELETEPATHNAME
DELETEPATHNAME  proc near
                pop     bx              ; KERNEL_76
                pop     cx
                mov     ax, 4100h
                push    ax
                push    cx
                push    bx
DELETEPATHNAME  endp ; sp-analysis failed

;
; External Entry #75 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public OPENPATHNAME
OPENPATHNAME    proc far                ; CODE XREF: FINDSEGSYMS+152↓p

var_52          = byte ptr -52h
arg_0           = word ptr  6
arg_2           = dword ptr  8

                inc     bp              ; KERNEL_75
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 50h
                push    si
                push    di
                lds     dx, [bp+arg_2]
                mov     ax, [bp+arg_0]
                or      ah, ah
                jnz     short loc_1ECA
                mov     ah, 3Dh ; '='

loc_1ECA:                               ; CODE XREF: OPENPATHNAME+12↑j
                mov     di, ax
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jb      short loc_1ED9
                mov     ax, di
                int     21h             ; DOS -
                jnb     short loc_1EE4

loc_1ED9:                               ; CODE XREF: OPENPATHNAME+1D↑j
                lea     ax, [bp+var_52]
                push    ds
                push    dx
                push    ss
                push    ax
                push    di
                call    SEARCHPATH

loc_1EE4:                               ; CODE XREF: OPENPATHNAME+23↑j
                mov     bx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
OPENPATHNAME    endp

;
; External Entry #74 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public OPENFILE
OPENFILE        proc far                ; CODE XREF: LOADMODULE+92↑p
                                        ; LOADNRTABLE+38↑p ...

var_56          = byte ptr -56h
var_6           = word ptr -6
var_4           = word ptr -4
arg_0           = word ptr  6
arg_2           = dword ptr  8
arg_6           = dword ptr  0Ch

                inc     bp              ; KERNEL_74
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 54h
                push    si
                push    di
                mov     ax, [bp+arg_0]
                test    ah, 10h
                mov     ah, 3Dh ; '='
                jz      short loc_1F09
                mov     ah, 3Ch ; '<'

loc_1F09:                               ; CODE XREF: OPENFILE+12↑j
                mov     [bp+var_4], ax
                test    byte ptr [bp+arg_0+1], 80h
                jz      short loc_1F80
                mov     byte ptr [bp+var_6], 1
                lds     si, [bp+arg_2]
                or      si, si
                jnz     short loc_1F3A
                cmp     word ptr [si], 454Eh
                jnz     short loc_1F3A
                mov     ds, cs:HEXEHEAD
                mov     si, ds:0Ah
                mov     word ptr [bp+arg_2+2], ds
                mov     word ptr [bp+arg_2], si
                mov     word ptr [bp+arg_6+2], cs
                mov     word ptr [bp+arg_6], 138h

loc_1F3A:                               ; CODE XREF: OPENFILE+28↑j
                                        ; OPENFILE+2E↑j
                call    GROWSFT
                lea     dx, [si+8]
                xor     cx, cx
                mov     ax, [bp+var_4]
                call    near ptr PATHDRVDSDX
                jb      short loc_1F56
                pushf
                cli
                call    cs:PREVINT21PROC
                jnb     short loc_1F5B

loc_1F53:                               ; CODE XREF: OPENFILE+66↓j
                jmp     loc_1FDC
; ---------------------------------------------------------------------------

loc_1F56:                               ; CODE XREF: OPENFILE+55↑j
                mov     ax, 0Fh
                jmp     short loc_1F53
; ---------------------------------------------------------------------------

loc_1F5B:                               ; CODE XREF: OPENFILE+5E↑j
                mov     bx, ax
                mov     ax, 5700h
                int     21h             ; DOS - 2+ - GET FILE'S DATE/TIME
                                        ; BX = file handle
                mov     ax, bx
                push    ds
                pop     es
                test    byte ptr [bp+arg_0+1], 4
                jz      short loc_1F76
                cmp     [si+4], dx
                jnz     short loc_1F79
                cmp     [si+6], cx
                jnz     short loc_1F79

loc_1F76:                               ; CODE XREF: OPENFILE+77↑j
                jmp     loc_2106
; ---------------------------------------------------------------------------

loc_1F79:                               ; CODE XREF: OPENFILE+7C↑j
                                        ; OPENFILE+81↑j
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jmp     loc_2037
; ---------------------------------------------------------------------------

loc_1F80:                               ; CODE XREF: OPENFILE+1D↑j
                lds     si, [bp+arg_6]
                les     di, [bp+arg_2]
                lea     di, [di+8]
                push    bp
                call    PARSEFILE
                mov     di, bp
                pop     bp
                test    byte ptr [bp+arg_0+1], 4
                jz      short loc_1F98
                xor     di, di

loc_1F98:                               ; CODE XREF: OPENFILE+A1↑j
                mov     [bp+var_6], di
                or      ax, ax
                jz      short loc_1FE0
                lds     si, [bp+arg_2]
                lea     si, [si+8]
                cmp     cs:FINT21, 0
                jz      short loc_1FB6
                push    ds
                push    si
                push    ds
                push    si
                call    cs:PKEYPROC

loc_1FB6:                               ; CODE XREF: OPENFILE+B8↑j
                test    byte ptr [bp+arg_0+1], 1
                jz      short loc_1FC1
                xor     bx, bx
                jmp     loc_2118
; ---------------------------------------------------------------------------

loc_1FC1:                               ; CODE XREF: OPENFILE+C7↑j
                mov     dx, si
                test    byte ptr [bp+arg_0+1], 10h
                jnz     short loc_1FD0
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jb      short loc_1FDC

loc_1FD0:                               ; CODE XREF: OPENFILE+D4↑j
                xor     cx, cx
                mov     ax, [bp+var_4]
                int     21h             ; DOS -
                jb      short loc_1FDC
                jmp     loc_20CA
; ---------------------------------------------------------------------------

loc_1FDC:                               ; CODE XREF: OPENFILE:loc_1F53↑j
                                        ; OPENFILE+DB↑j ...
                cmp     al, 4
                jb      short loc_1FE3

loc_1FE0:                               ; CODE XREF: OPENFILE+AA↑j
                jmp     loc_20AC
; ---------------------------------------------------------------------------

loc_1FE3:                               ; CODE XREF: OPENFILE+EB↑j
                cmp     byte ptr [bp+var_6], 0
                jnz     short loc_2037
                lea     bx, [bp+var_56]
                mov     ax, [bp+var_4]
                push    ds
                push    dx
                push    ss
                push    bx
                push    ax
                call    SEARCHPATH
                cmp     ax, 0FFFFh
                jz      short loc_1FFF

loc_1FFC:                               ; CODE XREF: OPENFILE+142↓j
                jmp     loc_20B8
; ---------------------------------------------------------------------------

loc_1FFF:                               ; CODE XREF: OPENFILE+107↑j
                mov     cx, cs:HEXEHEAD
                jcxz    short loc_2037
                mov     ds, cx
                mov     si, ds:0Ah
                lea     si, [si+8]
                push    ss
                pop     es
                lea     di, [bp+var_56]

loc_2014:                               ; CODE XREF: OPENFILE+125↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_2014
                lea     di, [bp+var_56]
                call    GETPURENAME
                lds     si, [bp+arg_6]

loc_2023:                               ; CODE XREF: OPENFILE+134↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_2023
                push    ss
                pop     ds
                lea     dx, [bp+var_56]
                xor     cx, cx
                mov     ax, [bp+var_4]
                int     21h             ; DOS -
                jnb     short loc_1FFC

loc_2037:                               ; CODE XREF: OPENFILE+8A↑j
                                        ; OPENFILE+F4↑j ...
                lds     si, [bp+arg_2]
                lea     si, [si+8]
                test    byte ptr [bp+arg_0+1], 20h
                jz      short loc_20AC
                cmp     cs:FINT21, 0
                jz      short loc_20AC
                xor     bx, bx
                mov     bl, [si]
                sub     bl, 41h ; 'A'
                jb      short loc_20AC
                mov     di, bx
                call    ISFLOPPY
                jnz     short loc_2063
                cmp     byte ptr [bp+var_6], 0
                jnz     short loc_2096
                jmp     short loc_2083
; ---------------------------------------------------------------------------

loc_2063:                               ; CODE XREF: OPENFILE+166↑j
                test    byte ptr [bp+arg_0+1], 80h
                jnz     short loc_2074
                cmp     byte ptr [bp+var_6], 0
                jz      short loc_2074
                call    loc_2144
                jmp     short loc_20AC
; ---------------------------------------------------------------------------

loc_2074:                               ; CODE XREF: OPENFILE+174↑j
                                        ; OPENFILE+17A↑j
                mov     di, 0FFFFh

loc_2077:                               ; CODE XREF: OPENFILE+188↓j
                inc     di
                call    ISFLOPPY
                jnz     short loc_2077
                mov     ax, di
                add     al, 41h ; 'A'
                mov     [si], al

loc_2083:                               ; CODE XREF: OPENFILE+16E↑j
                les     di, [bp+arg_2]
                lea     di, [di+0Bh]
                mov     si, di
                call    GETPURENAME
                xchg    si, di

loc_2090:                               ; CODE XREF: OPENFILE+1A1↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_2090

loc_2096:                               ; CODE XREF: OPENFILE+16C↑j
                call    PROMPT
                jz      short loc_20AC
                lds     si, [bp+arg_2]
                lea     dx, [si+8]
                xor     cx, cx
                mov     ax, [bp+var_4]
                int     21h             ; DOS -
                jnb     short loc_20CA
                jmp     short loc_2037
; ---------------------------------------------------------------------------

loc_20AC:                               ; CODE XREF: OPENFILE:loc_1FE0↑j
                                        ; OPENFILE+14E↑j ...
                lds     si, [bp+arg_2]
                mov     [si+2], ax
                mov     ax, 0FFFFh
                jmp     short loc_212A
; ---------------------------------------------------------------------------
                align 2

loc_20B8:                               ; CODE XREF: OPENFILE:loc_1FFC↑j
                les     di, [bp+arg_2]
                lea     di, [di+8]
                push    ss
                pop     ds
                lea     si, [bp+var_56]
                push    ax
                push    bp
                call    PARSEFILE
                pop     bp
                pop     ax

loc_20CA:                               ; CODE XREF: OPENFILE+E6↑j
                                        ; OPENFILE+1B5↑j
                push    ax
                les     si, [bp+arg_2]
                lea     di, [si+8]
                mov     cx, 0FFFFh
                xor     al, al
                repne scasb
                neg     cx
                add     cx, 6
                mov     es:[si], cl
                cmp     cs:FINT21, 0
                jz      short loc_20FC
                mov     al, es:[si+8]
                or      al, 20h
                sub     al, 61h ; 'a'
                cbw
                mov     di, ax
                call    ISFLOPPY
                mov     ch, 0
                jz      short loc_20FC
                inc     ch

loc_20FC:                               ; CODE XREF: OPENFILE+1F3↑j
                                        ; OPENFILE+205↑j
                mov     es:[si+1], ch
                pop     bx
                mov     ax, 5700h
                int     21h             ; DOS - 2+ - GET FILE'S DATE/TIME
                                        ; BX = file handle

loc_2106:                               ; CODE XREF: OPENFILE:loc_1F76↑j
                mov     es:[si+6], cx
                mov     es:[si+4], dx
                test    byte ptr [bp+arg_0+1], 42h
                jz      short loc_2128
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

loc_2118:                               ; CODE XREF: OPENFILE+CB↑j
                test    byte ptr [bp+arg_0+1], 2
                jz      short loc_2128
                lds     si, [bp+arg_2]
                lea     dx, [si+8]
                mov     ah, 41h ; 'A'
                int     21h             ; DOS - 2+ - DELETE A FILE (UNLINK)
                                        ; DS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)

loc_2128:                               ; CODE XREF: OPENFILE+21F↑j
                                        ; OPENFILE+229↑j
                mov     ax, bx

loc_212A:                               ; CODE XREF: OPENFILE+1C2↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ah
OPENFILE        endp


; =============== S U B R O U T I N E =======================================


ISFLOPPY        proc near               ; CODE XREF: OPENFILE+163↑p
                                        ; OPENFILE+185↑p ...
                mov     bx, 1
                push    bx
                push    di
                call    cs:PSYSPROC
                cmp     al, 2
                retn
; ---------------------------------------------------------------------------

loc_2144:                               ; CODE XREF: OPENFILE+17C↑p
                mov     dx, 160h
                call    loc_2184
                push    cs
                pop     ds
                assume ds:cseg01
                mov     dx, 16Dh
                call    APPEND
                mov     bx, 153h
                mov     cx, 1030h
                jmp     short loc_217D
ISFLOPPY        endp


; =============== S U B R O U T I N E =======================================


PROMPT          proc near               ; CODE XREF: OPENFILE:loc_2096↑p
                mov     dx, 11Eh
                call    loc_2184
                push    cs
                pop     ds
                mov     dx, 126h
                call    APPEND
                mov     al, byte ptr DRVLET ; "X:"
                call    CLOSEOPENFILES
                mov     bx, 147h
                mov     cx, 1010h
                test    byte ptr [bp+7], 8
                jz      short loc_217D
                mov     cx, 1011h

loc_217D:                               ; CODE XREF: ISFLOPPY+21↑j
                                        ; PROMPT+1E↑j
                call    SHOWDIALOGBOX2
                mov     ax, 2
                retn
; ---------------------------------------------------------------------------

loc_2184:                               ; CODE XREF: ISFLOPPY+10↑p
                                        ; PROMPT+3↑p
                cld
                push    cs
                pop     ds
                call    APPENDFIRST
                les     bx, [bp+8]
                lea     si, [bx+8]
                mov     al, es:[si]
                mov     byte ptr DRVLET, al ; "X:"
                mov     cs:LASTDRIVESWAPPED, al
                mov     ax, es
                les     di, [bp+0Ch]
                cmp     [bp+0Eh], ax
                jnz     short loc_21AA
                cmp     di, bx
                jnz     short loc_21AA
                mov     di, si

loc_21AA:                               ; CODE XREF: PROMPT+48↑j
                                        ; PROMPT+4C↑j
                call    GETPURENAME
                push    es
                pop     ds
                assume ds:nothing
                mov     dx, di
                jmp     APPEND
PROMPT          endp


; =============== S U B R O U T I N E =======================================


GETPURENAME     proc near               ; CODE XREF: OPENFILE+12A↑p
                                        ; OPENFILE+198↑p ...
                cld
                xor     al, al
                mov     cx, 0FFFFh
                mov     bx, di
                repne scasb
                inc     cx
                inc     cx
                neg     cx

loc_21C2:                               ; CODE XREF: GETPURENAME+23↓j
                cmp     bx, di
                jz      short locret_21D9
                mov     al, es:[di-1]
                cmp     al, 5Ch ; '\'
                jz      short locret_21D9
                cmp     al, 2Fh ; '/'
                jz      short locret_21D9
                cmp     al, 3Ah ; ':'
                jz      short locret_21D9
                dec     di
                jmp     short loc_21C2
; ---------------------------------------------------------------------------

locret_21D9:                            ; CODE XREF: GETPURENAME+10↑j
                                        ; GETPURENAME+18↑j ...
                retn
GETPURENAME     endp


; =============== S U B R O U T I N E =======================================


PARSEFILE       proc near               ; CODE XREF: OPENFILE+97↑p
                                        ; OPENFILE+1D2↑p
                cld
                xor     bp, bp
                cmp     byte ptr [si+1], 3Ah ; ':'
                jnz     short loc_21F2
                lodsb
                inc     si
                or      al, 20h
                sub     al, 61h ; 'a'
                jb      short loc_21EF
                cmp     al, 19h
                jbe     short loc_21F6

loc_21EF:                               ; CODE XREF: PARSEFILE+F↑j
                jmp     loc_2276
; ---------------------------------------------------------------------------

loc_21F2:                               ; CODE XREF: PARSEFILE+7↑j
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER

loc_21F6:                               ; CODE XREF: PARSEFILE+13↑j
                mov     dl, al
                inc     dl
                add     al, 41h ; 'A'
                mov     ah, 3Ah ; ':'
                stosw
                push    di
                mov     bx, 2F5Ch
                mov     al, [si]
                cmp     al, bh
                jz      short loc_2239
                cmp     al, bl
                jz      short loc_2239
                mov     al, bl
                stosb
                mov     cx, ds
                xchg    si, di
                mov     ax, es
                mov     ds, ax
                mov     ah, 47h ; 'G'
                int     21h             ; DOS - 2+ - GET CURRENT DIRECTORY
                                        ; DL = drive (0=default, 1=A, etc.)
                                        ; DS:SI points to 64-byte buffer area
                jb      short loc_2275
                mov     ds, cx
                xchg    si, di
                xor     al, al
                mov     cx, 0FFFFh
                repne scasb
                dec     di
                mov     al, es:[di-1]
                cmp     al, bh
                jz      short loc_2239
                cmp     al, bl
                jz      short loc_2239
                mov     al, bl
                stosb

loc_2239:                               ; CODE XREF: PARSEFILE+2D↑j
                                        ; PARSEFILE+31↑j ...
                xor     cx, cx
                mov     dx, di

loc_223D:                               ; CODE XREF: PARSEFILE+115↓j
                                        ; PARSEFILE+11D↓j
                lodsb
                cmp     al, bl
                jz      short loc_2246
                cmp     al, bh
                jnz     short loc_2280

loc_2246:                               ; CODE XREF: PARSEFILE+66↑j
                cmp     byte ptr es:[di-1], 3Ah ; ':'
                jz      short loc_2255
                cmp     [si], bl
                jz      short loc_2275
                cmp     [si], bh
                jz      short loc_2275

loc_2255:                               ; CODE XREF: PARSEFILE+71↑j
                inc     bp
                cmp     cl, ch
                jnz     short loc_227B
                jcxz    short loc_22D2
                cmp     cl, 2
                ja      short loc_2275
                dec     di
                dec     cl
                jz      short loc_2239
                mov     di, dx

loc_2268:                               ; CODE XREF: PARSEFILE+99↓j
                dec     di
                mov     al, es:[di-1]
                cmp     al, bl
                jz      short loc_2239
                cmp     al, 3Ah ; ':'
                jnz     short loc_2268

loc_2275:                               ; CODE XREF: PARSEFILE+42↑j
                                        ; PARSEFILE+75↑j ...
                pop     ax

loc_2276:                               ; CODE XREF: PARSEFILE:loc_21EF↑j
                xor     ax, ax
                jmp     locret_231E
; ---------------------------------------------------------------------------

loc_227B:                               ; CODE XREF: PARSEFILE+7E↑j
                mov     al, bl
                stosb
                jmp     short loc_2239
; ---------------------------------------------------------------------------

loc_2280:                               ; CODE XREF: PARSEFILE+6A↑j
                or      al, al
                jz      short loc_22FA
                cmp     al, 20h ; ' '
                jb      short loc_2275
                ja      short loc_2295

loc_228A:                               ; CODE XREF: PARSEFILE+B7↓j
                lodsb
                or      al, al
                jz      short loc_22FA
                cmp     al, 20h ; ' '
                jz      short loc_228A
                jmp     short loc_2275
; ---------------------------------------------------------------------------

loc_2295:                               ; CODE XREF: PARSEFILE+AE↑j
                cmp     al, 3Bh ; ';'
                jz      short loc_2275
                cmp     al, 3Ah ; ':'
                jz      short loc_2275
                cmp     al, 2Ch ; ','
                jz      short loc_2275
                cmp     al, 7Ch ; '|'
                jz      short loc_2275
                cmp     al, 2Bh ; '+'
                jz      short loc_2275
                cmp     al, 3Ch ; '<'
                jz      short loc_2275
                cmp     al, 3Eh ; '>'
                jz      short loc_2275
                cmp     al, 22h ; '"'
                jz      short loc_2275
                cmp     al, 5Bh ; '['
                jz      short loc_2275
                cmp     al, 5Dh ; ']'
                jz      short loc_2275
                cmp     al, 3Dh ; '='
                jz      short loc_2275
                cmp     al, 61h ; 'a'
                jb      short loc_22CB
                cmp     al, 7Ah ; 'z'
                ja      short loc_22CB
                add     al, 0E0h

loc_22CB:                               ; CODE XREF: PARSEFILE+E9↑j
                                        ; PARSEFILE+ED↑j
                inc     cl
                cmp     cl, 77h ; 'w'
                ja      short loc_2275

loc_22D2:                               ; CODE XREF: PARSEFILE+80↑j
                stosb
                cmp     al, 2Eh ; '.'
                jnz     short loc_22DD
                inc     ch
                mov     ah, cl
                dec     ah

loc_22DD:                               ; CODE XREF: PARSEFILE+FB↑j
                cmp     ch, 0
                jz      short loc_22F2
                cmp     cl, 0Ch
                ja      short loc_230C
                mov     al, cl
                sub     al, ah
                cmp     al, 4
                ja      short loc_230C
                jmp     loc_223D
; ---------------------------------------------------------------------------

loc_22F2:                               ; CODE XREF: PARSEFILE+106↑j
                cmp     cl, 8
                ja      short loc_230C
                jmp     loc_223D
; ---------------------------------------------------------------------------

loc_22FA:                               ; CODE XREF: PARSEFILE+A8↑j
                                        ; PARSEFILE+B3↑j
                cmp     ch, 1
                jz      short loc_2303
                ja      short loc_230C
                mov     ah, cl

loc_2303:                               ; CODE XREF: PARSEFILE+123↑j
                mov     es:[di], al
                xchg    al, ah
                or      ax, ax
                jnz     short loc_230F

loc_230C:                               ; CODE XREF: PARSEFILE+10B↑j
                                        ; PARSEFILE+113↑j ...
                jmp     loc_2275
; ---------------------------------------------------------------------------

loc_230F:                               ; CODE XREF: PARSEFILE+130↑j
                cmp     ax, 8
                ja      short loc_230C
                pop     ax
                sub     dx, ax
                lea     ax, [bx+3]
                add     ax, cx
                add     ax, dx

locret_231E:                            ; CODE XREF: PARSEFILE+9E↑j
                retn
PARSEFILE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

SEARCHPATH      proc near               ; CODE XREF: OPENPATHNAME+2D↑p
                                        ; OPENFILE+101↑p

var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 4
                les     di, [bp+arg_6]
                call    GETPURENAME
                mov     word ptr [bp+var_4], di
                mov     word ptr [bp+var_4+2], es
                lds     si, cs:PCURRENTPDB
                mov     ds, word ptr [si]
                mov     ds, word ptr ds:2Ch
                xor     si, si

loc_233E:                               ; CODE XREF: SEARCHPATH+3A↓j
                cmp     byte ptr [si], 0
                jz      short loc_2399
                lodsw
                cmp     ax, 4150h
                jnz     short loc_2354
                lodsw
                cmp     ax, 4854h
                jnz     short loc_2354
                lodsb
                cmp     al, 3Dh ; '='
                jz      short loc_235B

loc_2354:                               ; CODE XREF: SEARCHPATH+28↑j
                                        ; SEARCHPATH+2E↑j ...
                lodsb
                or      al, al
                jnz     short loc_2354
                jmp     short loc_233E
; ---------------------------------------------------------------------------

loc_235B:                               ; CODE XREF: SEARCHPATH+33↑j
                                        ; SEARCHPATH+78↓j
                les     di, [bp+arg_2]

loc_235E:                               ; CODE XREF: SEARCHPATH+47↓j
                lodsb
                stosb
                cmp     al, 3Bh ; ';'
                jz      short loc_2369
                or      al, al
                jnz     short loc_235E
                dec     si

loc_2369:                               ; CODE XREF: SEARCHPATH+43↑j
                mov     al, 5Ch ; '\'
                cmp     es:[di-2], al
                jnz     short loc_2372
                dec     di

loc_2372:                               ; CODE XREF: SEARCHPATH+50↑j
                mov     es:[di-1], al
                push    ds
                push    si
                lds     si, [bp+var_4]

loc_237B:                               ; CODE XREF: SEARCHPATH+60↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_237B
                lds     dx, [bp+arg_2]
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jb      short loc_2390
                mov     ax, [bp+arg_0]
                int     21h             ; DOS -

loc_2390:                               ; CODE XREF: SEARCHPATH+6A↑j
                pop     si
                pop     ds
                jnb     short loc_239C
                cmp     byte ptr [si], 0
                jnz     short loc_235B

loc_2399:                               ; CODE XREF: SEARCHPATH+22↑j
                mov     ax, 0FFFFh

loc_239C:                               ; CODE XREF: SEARCHPATH+73↑j
                mov     sp, bp
                pop     bp
                retn    0Ah
SEARCHPATH      endp

;
; External Entry #98 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETLASTDISKCHANGE
GETLASTDISKCHANGE proc far
                xor     ax, ax          ; KERNEL_98
                xchg    al, cs:LASTDRIVESWAPPED
                retf
GETLASTDISKCHANGE endp

;
; External Entry #92 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETTEMPDRIVE
GETTEMPDRIVE    proc far                ; CODE XREF: GETTEMPFILENAME+F↓p
                mov     bx, sp          ; KERNEL_92
                push    si
                push    di
                mov     ax, ss:[bx+4]
                and     al, 7Fh
                jnz     short loc_23BC
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                add     al, 41h ; 'A'

loc_23BC:                               ; CODE XREF: GETTEMPDRIVE+A↑j
                and     al, 5Fh
                test    byte ptr ss:[bx+4], 80h
                jnz     short loc_23E4
                sub     al, 41h ; 'A'
                cbw
                mov     si, ax
                xor     di, di

loc_23CC:                               ; CODE XREF: GETTEMPDRIVE+30↓j
                call    ISFLOPPY
                cmp     al, 3
                mov     dx, 1
                jz      short loc_23E0
                inc     di
                cmp     di, 19h
                jbe     short loc_23CC
                xor     dx, dx
                mov     di, si

loc_23E0:                               ; CODE XREF: GETTEMPDRIVE+2A↑j
                mov     ax, di
                add     al, 41h ; 'A'

loc_23E4:                               ; CODE XREF: GETTEMPDRIVE+19↑j
                mov     ah, 3Ah ; ':'
                pop     di
                pop     si
                retf    2
GETTEMPDRIVE    endp


; =============== S U B R O U T I N E =======================================


HEXTOA          proc near               ; CODE XREF: GETTEMPFILENAME+8E↓p
                                        ; GETTEMPFILENAME+94↓p
                mov     ah, al
                mov     cl, 4
                shr     al, cl
                and     ah, 0Fh
                add     ax, 3030h
                cmp     al, 39h ; '9'
                jbe     short loc_23FD
                add     al, 7

loc_23FD:                               ; CODE XREF: HEXTOA+E↑j
                cmp     ah, 39h ; '9'
                jbe     short locret_2405
                add     ah, 7

locret_2405:                            ; CODE XREF: HEXTOA+15↑j
                retn
HEXTOA          endp

;
; External Entry #97 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETTEMPFILENAME
GETTEMPFILENAME proc far

var_6           = word ptr -6
var_4           = word ptr -4
arg_0           = dword ptr  6
arg_4           = word ptr  0Ah
arg_6           = dword ptr  0Ch
arg_A           = word ptr  10h

                inc     bp              ; KERNEL_97
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 4
                push    si
                push    di
                push    [bp+arg_A]
                nop
                push    cs
                call    near ptr GETTEMPDRIVE
                mov     [bp+var_6], dx
                les     di, [bp+arg_0]
                stosw
                mov     ax, [bp+arg_A]
                test    al, 80h
                jnz     short loc_245F
                lds     si, cs:PCURRENTPDB
                mov     ds, word ptr [si]
                mov     ds, word ptr ds:2Ch
                xor     si, si

loc_2433:                               ; CODE XREF: GETTEMPFILENAME+47↓j
                lodsw
                or      al, al
                jz      short loc_2464
                cmp     ax, 4554h
                jnz     short loc_2448
                lodsw
                cmp     ax, 504Dh
                jnz     short loc_2448
                lodsb
                cmp     al, 3Dh ; '='
                jz      short loc_244F

loc_2448:                               ; CODE XREF: GETTEMPFILENAME+35↑j
                                        ; GETTEMPFILENAME+3B↑j ...
                lodsb
                or      al, al
                jnz     short loc_2448
                jmp     short loc_2433
; ---------------------------------------------------------------------------

loc_244F:                               ; CODE XREF: GETTEMPFILENAME+40↑j
                cmp     byte ptr [si+1], 3Ah ; ':'
                jnz     short loc_2457
                dec     di
                dec     di

loc_2457:                               ; CODE XREF: GETTEMPFILENAME+4D↑j
                                        ; GETTEMPFILENAME+57↓j
                lodsb
                or      al, al
                jz      short loc_2464
                stosb
                jmp     short loc_2457
; ---------------------------------------------------------------------------

loc_245F:                               ; CODE XREF: GETTEMPFILENAME+1E↑j
                mov     al, 7Eh ; '~'
                stosb
                jmp     short loc_246F
; ---------------------------------------------------------------------------

loc_2464:                               ; CODE XREF: GETTEMPFILENAME+30↑j
                                        ; GETTEMPFILENAME+54↑j
                mov     ax, 7E5Ch
                cmp     es:[di-1], al
                jnz     short loc_246E
                dec     di

loc_246E:                               ; CODE XREF: GETTEMPFILENAME+65↑j
                stosw

loc_246F:                               ; CODE XREF: GETTEMPFILENAME+5C↑j
                lds     si, [bp+arg_6]
                mov     cx, 3

loc_2475:                               ; CODE XREF: GETTEMPFILENAME+75↓j
                lodsb
                or      al, al
                jz      short loc_247D
                stosb
                loop    loc_2475

loc_247D:                               ; CODE XREF: GETTEMPFILENAME+72↑j
                mov     dx, [bp+arg_4]
                or      dx, dx
                jnz     short loc_248A
                mov     ah, 2Ch ; ','
                int     21h             ; DOS - GET CURRENT TIME
                                        ; Return: CH = hours, CL = minutes, DH = seconds
                                        ; DL = hundredths of seconds
                xor     dx, cx

loc_248A:                               ; CODE XREF: GETTEMPFILENAME+7C↑j
                                        ; GETTEMPFILENAME+8A↓j ...
                mov     [bp+var_4], dx
                jnz     short loc_2492
                inc     dx
                jmp     short loc_248A
; ---------------------------------------------------------------------------

loc_2492:                               ; CODE XREF: GETTEMPFILENAME+87↑j
                mov     al, dh
                call    HEXTOA
                stosw
                mov     al, dl
                call    HEXTOA
                stosw
                mov     ax, 542Eh
                stosw
                mov     ax, 504Dh
                stosw
                xor     ax, ax
                stosb
                cmp     [bp+arg_4], ax
                jnz     short loc_24F1
                lds     dx, [bp+arg_0]
                cmp     cs:DOS_VERSION, 3
                jb      short loc_24C7
                mov     ah, 5Bh ; '['
                xor     cx, cx
                int     21h             ; DOS - 3+ - CREATE NEW FILE
                                        ; DS:DX -> ASCIZ directory path name
                                        ; CX = file attribute
                jnb     short loc_24E3
                cmp     al, 50h ; 'P'
                jz      short loc_24CE
                jmp     short loc_24EC
; ---------------------------------------------------------------------------

loc_24C7:                               ; CODE XREF: GETTEMPFILENAME+B1↑j
                mov     ax, 4300h
                int     21h             ; DOS - 2+ - GET FILE ATTRIBUTES
                                        ; DS:DX -> ASCIZ file name or directory
                                        ; name without trailing slash
                jb      short loc_24D7

loc_24CE:                               ; CODE XREF: GETTEMPFILENAME+BD↑j
                sub     di, 9
                mov     dx, [bp+var_4]
                inc     dx
                jmp     short loc_248A
; ---------------------------------------------------------------------------

loc_24D7:                               ; CODE XREF: GETTEMPFILENAME+C6↑j
                cmp     al, 2
                jnz     short loc_24EC
                xor     cx, cx
                mov     ah, 3Ch ; '<'
                int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)
                                        ; CX = attributes for file
                                        ; DS:DX -> ASCIZ filename (may include drive and path)
                jb      short loc_24EC

loc_24E3:                               ; CODE XREF: GETTEMPFILENAME+B9↑j
                mov     bx, ax
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                jmp     short loc_24F1
; ---------------------------------------------------------------------------
                align 2

loc_24EC:                               ; CODE XREF: GETTEMPFILENAME+BF↑j
                                        ; GETTEMPFILENAME+D3↑j ...
                xor     ax, ax
                mov     [bp+var_4], ax

loc_24F1:                               ; CODE XREF: GETTEMPFILENAME+A6↑j
                                        ; GETTEMPFILENAME+E3↑j
                mov     ax, [bp+var_4]
                mov     dx, [bp+var_6]
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ch
GETTEMPFILENAME endp


; =============== S U B R O U T I N E =======================================


CALCMAXNRSEG    proc near               ; CODE XREF: ADDMODULE+43↑p
                                        ; DELMODULE+3F↑p ...
                xor     ax, ax
                mov     al, cs:FBOOTING
                or      ax, ax
                jnz     short locret_2558
                push    cs:HEXEHEAD

loc_2513:                               ; CODE XREF: CALCMAXNRSEG+23↓j
                                        ; CALCMAXNRSEG+4F↓j
                pop     cx
                jcxz    short loc_2555
                mov     es, cx
                push    word ptr es:6
                mov     bx, es:22h
                mov     cx, es:1Ch
                jcxz    short loc_2513

loc_2529:                               ; CODE XREF: CALCMAXNRSEG+4D↓j
                test    word ptr es:[bx+4], 1
                jnz     short loc_254E
                test    word ptr es:[bx+4], 0F000h
                jz      short loc_254E
                mov     dx, es:[bx+6]
                add     dx, 0Fh
                shr     dx, 1
                shr     dx, 1
                shr     dx, 1
                shr     dx, 1
                cmp     ax, dx
                jnb     short loc_254E
                mov     ax, dx

loc_254E:                               ; CODE XREF: CALCMAXNRSEG+2B↑j
                                        ; CALCMAXNRSEG+33↑j ...
                add     bx, 0Ah
                loop    loc_2529
                jmp     short loc_2513
; ---------------------------------------------------------------------------

loc_2555:                               ; CODE XREF: CALCMAXNRSEG+10↑j
                call    GRESERVE

locret_2558:                            ; CODE XREF: CALCMAXNRSEG+8↑j
                retn
CALCMAXNRSEG    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

LOADEXEHEADER   proc near               ; CODE XREF: LOADMODULE+F4↑p
                                        ; BOOTSTRAP+15D↓p ...

var_46          = byte ptr -46h
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 46h
                push    si
                push    di
                xor     ax, ax
                mov     [bp+var_4], ax
                cmp     [bp+arg_2], ax
                jz      short loc_2571
                lds     si, [bp+4]
                mov     al, [si]
                inc     ax

loc_2571:                               ; CODE XREF: LOADEXEHEADER+10↑j
                mov     [bp+var_2], ax
                mov     bx, [bp+arg_6]
                cmp     [bp+arg_4], bx
                jz      short loc_2583
                mov     ds, bx
                xor     si, si
                jmp     short loc_25CD
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_2583:                               ; CODE XREF: LOADEXEHEADER+21↑j
                push    ss
                pop     ds
                lea     si, [bp+var_46]
                mov     dx, si
                mov     cx, 40h ; '@'
                mov     bx, [bp+arg_6]
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_25C8
                cmp     ax, cx
                jb      short loc_25C8
                cmp     word ptr [si], 5A4Dh
                jnz     short loc_25C8
                mov     cx, [si+3Eh]
                mov     dx, [si+3Ch]
                mov     ax, cx
                or      ax, dx
                jz      short loc_25C8
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                jb      short loc_25C8
                mov     cx, 40h ; '@'
                mov     dx, si
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_25C8
                cmp     ax, cx
                jnz     short loc_25C8
                cmp     word ptr [si], 454Eh
                jz      short loc_25CD

loc_25C8:                               ; CODE XREF: LOADEXEHEADER+3B↑j
                                        ; LOADEXEHEADER+3F↑j ...
                xor     ax, ax
                jmp     loc_28BA
; ---------------------------------------------------------------------------

loc_25CD:                               ; CODE XREF: LOADEXEHEADER+27↑j
                                        ; LOADEXEHEADER+6D↑j
                mov     [bp+var_6], bx
                mov     di, [si+4]
                add     di, [si+6]
                mov     cx, [si+1Ch]
                add     di, cx
                shl     cx, 1
                add     di, cx
                add     di, cx
                add     di, cx
                add     cx, 2
                shl     cx, 1
                add     di, cx
                mov     cx, [si+30h]
                add     di, cx
                shl     cx, 1
                shl     cx, 1
                add     di, cx
                add     di, 10h
                add     di, [bp+var_2]
                mov     ax, 7
                xor     bx, bx
                push    ax
                push    di
                push    bx
                call    MYALLOC
                or      ax, ax
                jz      short loc_263D
                sub     di, [bp+var_2]
                mov     [bp+var_4], ax
                mov     es, ax
                cld
                mov     bx, [bp+var_6]
                cmp     [bp+arg_4], bx
                jnz     short loc_2649
                mov     ax, [si+4]
                add     ax, [si+6]
                sub     di, ax
                mov     cx, 40h ; '@'
                sub     ax, cx
                rep movsb
                mov     cx, ax
                push    es
                pop     ds
                mov     dx, di
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_263D
                lea     si, [di-40h]
                cmp     ax, cx
                jz      short loc_2649

loc_263D:                               ; CODE XREF: LOADEXEHEADER+AF↑j
                                        ; LOADEXEHEADER+DB↑j ...
                push    [bp+var_4]
                call    MYFREE
                xor     ax, ax
                inc     ax
                jmp     loc_28BA
; ---------------------------------------------------------------------------

loc_2649:                               ; CODE XREF: LOADEXEHEADER+C0↑j
                                        ; LOADEXEHEADER+E2↑j
                test    word ptr [si+0Ch], 2000h
                jnz     short loc_263D
                cmp     byte ptr [si+2], 4
                jl      short loc_263D
                xor     di, di
                mov     cx, 40h ; '@'
                cld
                rep movsb
                mov     cx, es:1Ch
                xor     ax, ax
                mov     es:22h, di
                jcxz    short loc_2673

loc_266C:                               ; CODE XREF: LOADEXEHEADER+118↓j
                movsw
                movsw
                movsw
                movsw
                stosw
                loop    loc_266C

loc_2673:                               ; CODE XREF: LOADEXEHEADER+111↑j
                mov     cx, es:26h
                sub     cx, es:24h
                mov     es:24h, di
                rep movsb
                mov     cx, es:28h
                sub     cx, es:26h
                mov     es:26h, di
                lodsb
                stosb
                mov     bx, ax
                sub     cx, bx
                dec     cx

loc_269A:                               ; CODE XREF: LOADEXEHEADER+147↓j
                lodsb
                call    MYUPPER
                stosb
                dec     bx
                jnz     short loc_269A
                rep movsb
                mov     cx, es:2Ah
                sub     cx, es:28h
                mov     es:28h, di
                rep movsb
                mov     es:3Eh, di
                mov     cx, es:1Ch
                mov     al, 0FFh
                rep stosb
                mov     es:3Ch, di
                mov     cx, es:1Ch
                jcxz    short loc_26DC
                mov     ax, 3FCDh
                xor     bx, bx

loc_26D4:                               ; CODE XREF: LOADEXEHEADER+181↓j
                inc     bh
                stosw
                xchg    ax, bx
                stosw
                xchg    ax, bx
                loop    loc_26D4

loc_26DC:                               ; CODE XREF: LOADEXEHEADER+174↑j
                xor     ax, ax
                stosw
                mov     ax, es
                stosw
                mov     es:3Ah, di
                mov     cx, es:1Ch
                jcxz    short loc_26F4
                xor     ax, ax
                shl     cx, 1
                rep stosw

loc_26F4:                               ; CODE XREF: LOADEXEHEADER+193↑j
                mov     cx, es:4
                sub     cx, es:2Ah
                mov     es:2Ah, di
                jcxz    short loc_2707
                rep movsb

loc_2707:                               ; CODE XREF: LOADEXEHEADER+1AA↑j
                mov     es:4, di

loc_270C:                               ; CODE XREF: LOADEXEHEADER+1BE↓j
                                        ; LOADEXEHEADER+1CD↓j ...
                lodsw
                stosw
                xor     cx, cx
                mov     cl, al
                jcxz    short loc_2744
                cmp     ah, 0
                jz      short loc_270C
                cmp     ah, 0FFh
                jz      short loc_2728
                mov     ax, cx
                shl     cx, 1
                add     cx, ax
                rep movsb
                jmp     short loc_270C
; ---------------------------------------------------------------------------

loc_2728:                               ; CODE XREF: LOADEXEHEADER+1C3↑j
                                        ; LOADEXEHEADER+1E7↓j
                lodsb
                mov     ah, 2Eh ; '.'
                stosw
                mov     ax, 3ED0h
                stosw
                xor     ax, ax
                mov     al, [si+2]
                dec     al
                add     ax, es:3Eh
                stosw
                movsw
                movsb
                movsw
                loop    loc_2728
                jmp     short loc_270C
; ---------------------------------------------------------------------------

loc_2744:                               ; CODE XREF: LOADEXEHEADER+1B9↑j
                xor     bx, bx
                mov     es:2, bx
                mov     es:6, bx
                mov     es:0Ah, bx
                cmp     es:32h, bx
                jnz     short loc_2763
                mov     word ptr es:32h, 9

loc_2763:                               ; CODE XREF: LOADEXEHEADER+201↑j
                mov     cx, [bp+var_2]
                jcxz    short loc_2772
                mov     es:0Ah, di
                lds     si, [bp+4]
                rep movsb

loc_2772:                               ; CODE XREF: LOADEXEHEADER+20D↑j
                mov     bx, es:0Eh
                or      bx, bx
                jz      short loc_278B
                dec     bx
                shl     bx, 1
                mov     cx, bx
                shl     bx, 1
                shl     bx, 1
                add     bx, cx
                add     bx, es:22h

loc_278B:                               ; CODE XREF: LOADEXEHEADER+220↑j
                mov     es:8, bx
                mov     bx, es:22h
                xor     cx, cx

loc_2797:                               ; CODE XREF: LOADEXEHEADER+305↓j
                inc     cx
                cmp     cx, es:1Ch
                jbe     short loc_27A2
                jmp     loc_2861
; ---------------------------------------------------------------------------

loc_27A2:                               ; CODE XREF: LOADEXEHEADER+244↑j
                mov     al, 1
                and     al, es:[bx+4]
                jz      short loc_27D4
                and     word ptr es:[bx+4], 0FFFh
                cmp     es:8, bx
                jz      short loc_27C1
                or      byte ptr es:[bx+4], 40h
                and     byte ptr es:[bx+4], 0EFh

loc_27C1:                               ; CODE XREF: LOADEXEHEADER+25C↑j
                jmp     loc_285B
; ---------------------------------------------------------------------------

loc_27C4:                               ; CODE XREF: LOADEXEHEADER+280↓j
                cmp     cs:FBOOTING, 0
                jnz     short loc_27E7
                or      word ptr es:[bx+4], 40h
                jmp     short loc_27E7
; ---------------------------------------------------------------------------

loc_27D4:                               ; CODE XREF: LOADEXEHEADER+24F↑j
                test    byte ptr es:[bx+4], 10h
                jz      short loc_27C4
                or      word ptr es:[bx+4], 0F000h
                or      byte ptr es:0Ch, 80h

loc_27E7:                               ; CODE XREF: LOADEXEHEADER+271↑j
                                        ; LOADEXEHEADER+279↑j
                test    byte ptr es:0Ch, 2
                jnz     short loc_285B
                test    byte ptr es:0Ch, 1
                jz      short loc_285B
                mov     si, es:4
                xor     ah, ah

loc_27FE:                               ; CODE XREF: LOADEXEHEADER+2B1↓j
                                        ; LOADEXEHEADER+2C1↓j ...
                lods    byte ptr es:[si]

loc_2800:                               ; DATA XREF: LOADMODULE+8C↑o
                or      ax, ax
                jz      short loc_285B
                mov     dx, ax
                lods    byte ptr es:[si]
                cmp     al, 0
                jz      short loc_27FE
                cmp     al, 0FFh
                jz      short loc_282A
                cmp     al, cl
                jz      short loc_281C
                add     si, dx
                shl     dx, 1
                add     si, dx
                jmp     short loc_27FE
; ---------------------------------------------------------------------------

loc_281C:                               ; CODE XREF: LOADEXEHEADER+2B9↑j
                                        ; LOADEXEHEADER+2CD↓j
                test    byte ptr es:[si], 2
                jnz     short loc_283E
                add     si, 3
                dec     dx
                jnz     short loc_281C
                jmp     short loc_27FE
; ---------------------------------------------------------------------------

loc_282A:                               ; CODE XREF: LOADEXEHEADER+2B5↑j
                                        ; LOADEXEHEADER+2E1↓j
                cmp     es:[si+8], cl
                jnz     short loc_2836
                test    byte ptr es:[si], 2
                jnz     short loc_283E

loc_2836:                               ; CODE XREF: LOADEXEHEADER+2D5↑j
                add     si, 0Bh
                dec     dx
                jnz     short loc_282A
                jmp     short loc_27FE
; ---------------------------------------------------------------------------

loc_283E:                               ; CODE XREF: LOADEXEHEADER+2C7↑j
                                        ; LOADEXEHEADER+2DB↑j
                or      word ptr es:[bx+4], 400h
                test    byte ptr es:[bx+4], 40h
                jz      short loc_285B
                push    bx
                mov     bx, es:8
                or      bx, bx
                jz      short loc_285A
                or      byte ptr es:[bx+4], 40h

loc_285A:                               ; CODE XREF: LOADEXEHEADER+2FA↑j
                pop     bx

loc_285B:                               ; CODE XREF: LOADEXEHEADER:loc_27C1↑j
                                        ; LOADEXEHEADER+294↑j ...
                add     bx, 0Ah
                jmp     loc_2797
; ---------------------------------------------------------------------------

loc_2861:                               ; CODE XREF: LOADEXEHEADER+246↑j
                mov     bx, es:16h
                or      bx, bx
                jz      short loc_2897
                dec     bx
                shl     bx, 1
                mov     si, bx
                shl     si, 1
                shl     si, 1
                add     si, bx
                add     si, es:22h
                or      byte ptr es:[si+4], 40h
                cmp     word ptr es:0Eh, 0
                jz      short loc_2897
                or      word ptr es:[si+4], 400h
                mov     si, es:8
                or      byte ptr es:[si+4], 40h

loc_2897:                               ; CODE XREF: LOADEXEHEADER+30F↑j
                                        ; LOADEXEHEADER+32C↑j
                test    word ptr es:0Ch, 8000h
                jnz     short loc_28AF
                cmp     word ptr es:12h, 0
                jnz     short loc_28AF
                mov     word ptr es:12h, 1000h

loc_28AF:                               ; CODE XREF: LOADEXEHEADER+345↑j
                                        ; LOADEXEHEADER+34D↑j
                mov     dx, es
                dec     dx
                mov     ds, dx
                assume ds:nothing
                mov     word ptr ds:1, es
                mov     ax, es

loc_28BA:                               ; CODE XREF: LOADEXEHEADER+71↑j
                                        ; LOADEXEHEADER+ED↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    8
LOADEXEHEADER   endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

TRIMEXEHEADER   proc near               ; CODE XREF: LOADMODULE+348↑p
                                        ; STARTTASK+64↓p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                mov     es, [bp+arg_0]
                xor     ax, ax
                cmp     word ptr es:0, 454Eh
                jnz     short loc_28E0
                mov     ax, 2Ch ; ','
                push    [bp+arg_0]
                push    ax
                call    FREENRTABLE
                mov     ax, [bp+arg_0]

loc_28E0:                               ; CODE XREF: TRIMEXEHEADER+F↑j
                mov     sp, bp
                pop     bp
                retn    2
TRIMEXEHEADER   endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

STARTLIBRARY    proc near               ; CODE XREF: STARTMODULE+88↑p

arg_2           = word ptr  6
arg_4           = dword ptr  8
arg_8           = word ptr  0Ch

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     es, [bp+arg_8]
                push    es
                call    GETINSTANCE
                push    word ptr es:10h
                mov     di, ax
                push    [bp+arg_2]
                call    MYLOCK
                mov     [bp+arg_2], ax
                push    di
                call    MYLOCK
                mov     ds, ax
                assume ds:nothing
                pop     cx
                les     si, [bp+arg_4]
                les     si, es:[si+2]
                call    dword ptr [bp+4]
                or      ax, ax
                jz      short loc_2919
                mov     ax, di

loc_2919:                               ; CODE XREF: STARTLIBRARY+2F↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    0Ah
STARTLIBRARY    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

STARTTASK       proc near               ; CODE XREF: STARTMODULE+AD↑p

arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch

                push    bp
                mov     bp, sp
                push    di
                xor     di, di
                cmp     [bp+arg_8], di
                jz      short loc_298D
                push    ds
                push    [bp+arg_4]
                call    GETINSTANCE
                mov     di, ax
                mov     ds, [bp+arg_8]
                mov     ds:10h, ax
                push    [bp+arg_2]
                call    MYLOCK
                or      ax, ax
                jz      short loc_2996
                mov     [bp+arg_2], ax
                push    di
                call    MYLOCK
                mov     es, [bp+arg_4]
                lds     bx, ds:2
                mov     [bx+0Ah], di
                mov     [bx+0Eh], ax
                mov     cx, [bp+arg_6]
                mov     [bx+0Ch], cx
                mov     ax, es:12h
                mov     [bx+2], ax
                mov     ax, es:10h
                mov     [bx+6], ax
                les     ax, [bp+4]
                mov     word ptr [bx+14h], es
                mov     [bx+12h], ax
                inc     word ptr [bx+10h]
                pop     ds
                cmp     cs:FBOOTING, 0
                jnz     short loc_298D
                push    [bp+arg_4]
                call    TRIMEXEHEADER
                nop
                push    cs
                call    near ptr YIELD

loc_298D:                               ; CODE XREF: STARTTASK+9↑j
                                        ; STARTTASK+5F↑j ...
                mov     ax, di
                pop     di
                mov     sp, bp
                pop     bp
                retn    0Ah
; ---------------------------------------------------------------------------

loc_2996:                               ; CODE XREF: STARTTASK+22↑j
                mov     ds:7Eh, ax
                push    ds
                call    DELETETASK
                push    ds
                nop
                push    cs
                call    near ptr GLOBALFREE
                xor     di, di
                jmp     short loc_298D
STARTTASK       endp

;
; External Entry #91 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public INITTASK
INITTASK        proc far
                pop     ax              ; KERNEL_91
                pop     dx
                mov     ss:0Ch, sp
                mov     ss:0Eh, sp
                sub     bx, sp
                neg     bx
                add     bx, 96h
                mov     ss:0Ah, bx
                xor     bp, bp
                push    bp
                mov     bp, sp
                push    dx
                push    ax
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                jcxz    short loc_29DC
                xor     ax, ax
                push    es
                push    ax
                push    ax
                push    cx
                nop
                push    cs
                call    near ptr LOCALINIT
                pop     es
                jcxz    short loc_2A4B

loc_29DC:                               ; CODE XREF: INITTASK+25↑j
                xor     dx, dx
                xchg    dl, cs:FBOOTING
                or      dx, dx
                jz      short loc_2A0A
                push    es
                push    ds
                nop
                push    cs
                call    near ptr UNLOCKSEGMENT
                call    CALCMAXNRSEG
                xor     dx, dx
                push    dx
                push    dx
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                xor     dx, dx
                push    dx
                push    dx
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                push    ds
                nop
                push    cs
                call    near ptr LOCKSEGMENT
                pop     es

loc_2A0A:                               ; CODE XREF: INITTASK+3E↑j
                mov     bx, 80h
                mov     cx, bx
                cmp     bh, es:[bx]
                jz      short loc_2A31

loc_2A14:                               ; CODE XREF: INITTASK+73↓j
                                        ; INITTASK+77↓j
                inc     bx
                mov     al, es:[bx]
                cmp     al, 20h ; ' '
                jz      short loc_2A14
                cmp     al, 9
                jz      short loc_2A14
                mov     cx, bx
                dec     bx

loc_2A23:                               ; CODE XREF: INITTASK+84↓j
                inc     bl
                jz      short loc_2A31
                cmp     byte ptr es:[bx], 0Dh
                jnz     short loc_2A23
                mov     byte ptr es:[bx], 0

loc_2A31:                               ; CODE XREF: INITTASK+6B↑j
                                        ; INITTASK+7E↑j
                mov     bx, cx
                mov     cx, ss:0Ah
                mov     dx, 1
                cmp     word ptr es:5Ch, 2
                jnz     short loc_2A48
                mov     dx, es:5Eh

loc_2A48:                               ; CODE XREF: INITTASK+9A↑j
                mov     ax, 1

loc_2A4B:                               ; CODE XREF: INITTASK+33↑j
                mov     sp, bp
                pop     bp
                dec     bp
                retf
INITTASK        endp

;
; External Entry #100 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public VALIDATECODESEGMENTS
VALIDATECODESEGMENTS proc far           ; CODE XREF: BOOTDONE+5A↓p
                mov     ax, ds          ; KERNEL_100
                nop
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                push    si
                push    di
                push    cs:HEXEHEAD

loc_2A61:                               ; CODE XREF: VALIDATECODESEGMENTS+22↓j
                                        ; VALIDATECODESEGMENTS+44↓j
                pop     cx
                jcxz    short loc_2A96
                mov     ds, cx
                push    word ptr ds:6
                mov     si, ds:22h
                mov     cx, ds:1Ch
                jcxz    short loc_2A61

loc_2A74:                               ; CODE XREF: VALIDATECODESEGMENTS+42↓j
                test    word ptr [si+4], 1
                jnz     short loc_2A8F
                test    word ptr [si+4], 0F000h
                jz      short loc_2A8F
                mov     di, cx
                push    word ptr [si+8]
                call    MYLOCK
                call    CHECKSEGCHKSUM
                mov     cx, di

loc_2A8F:                               ; CODE XREF: VALIDATECODESEGMENTS+29↑j
                                        ; VALIDATECODESEGMENTS+30↑j
                add     si, 0Ah
                loop    loc_2A74
                jmp     short loc_2A61
; ---------------------------------------------------------------------------

loc_2A96:                               ; CODE XREF: VALIDATECODESEGMENTS+12↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf
VALIDATECODESEGMENTS endp

;
; External Entry #60 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public FINDRESOURCE
FINDRESOURCE    proc far
                push    ds              ; KERNEL_60
                pop     ax
                nop
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                sub     sp, 1Ch
                push    si
                push    word ptr [bp+0Eh]
                call    GETEXEPTR
                mov     [bp-1Ch], ax
                mov     dx, ax
                sub     ax, ax
                mov     [bp-1Ah], ax
                mov     [bp-18h], dx
                les     bx, [bp-1Ah]
                mov     ax, es:[bx+24h]
                cmp     es:[bx+26h], ax
                jnz     short loc_2AD4

loc_2ACF:                               ; CODE XREF: FINDRESOURCE+A2↓j
                                        ; FINDRESOURCE+10A↓j
                sub     ax, ax
                jmp     loc_2BBA
; ---------------------------------------------------------------------------

loc_2AD4:                               ; CODE XREF: FINDRESOURCE+2C↑j
                mov     dx, [bp-1Ch]
                sub     ax, ax
                les     bx, [bp-1Ah]
                mov     ax, es:[bx+24h]
                mov     [bp-10h], ax
                mov     [bp-0Eh], dx
                push    word ptr [bp+8]
                push    word ptr [bp+6]
                call    GETRESORD
                mov     [bp-14h], ax
                push    word ptr [bp+0Ch]
                push    word ptr [bp+0Ah]
                call    GETRESORD
                mov     [bp-12h], ax
                mov     ax, [bp-10h]
                mov     dx, [bp-0Eh]
                add     ax, 2

loc_2B07:                               ; CODE XREF: FINDRESOURCE+BF↓j
                mov     [bp-0Ch], ax
                mov     [bp-0Ah], dx
                les     bx, [bp-0Ch]
                mov     si, es:[bx]
                or      si, si
                jz      short loc_2B3A
                add     ax, 8
                mov     [bp-8], ax
                mov     [bp-6], dx
                cmp     word ptr [bp-14h], 0
                jnz     short loc_2B45
                push    word ptr [bp-0Eh]
                push    word ptr [bp-10h]
                push    si
                push    word ptr [bp+8]
                push    word ptr [bp+6]
                call    CMPRESSTR
                or      ax, ax
                jz      short loc_2B45

loc_2B3A:                               ; CODE XREF: FINDRESOURCE+74↑j
                                        ; FINDRESOURCE+AD↓j
                les     bx, [bp-0Ch]
                cmp     word ptr es:[bx], 0
                jnz     short loc_2B62
                jmp     short loc_2ACF
; ---------------------------------------------------------------------------

loc_2B45:                               ; CODE XREF: FINDRESOURCE+83↑j
                                        ; FINDRESOURCE+97↑j
                les     bx, [bp-0Ch]
                mov     ax, [bp-14h]
                cmp     es:[bx], ax
                jz      short loc_2B3A
                mov     ax, 0Ch
                mul     word ptr es:[bx+2]
                add     [bp-8], ax
                mov     ax, [bp-8]
                mov     dx, [bp-6]
                jmp     short loc_2B07
; ---------------------------------------------------------------------------

loc_2B62:                               ; CODE XREF: FINDRESOURCE+A0↑j
                mov     word ptr [bp-16h], 0

loc_2B67:                               ; CODE XREF: FINDRESOURCE+114↓j
                les     bx, [bp-0Ch]
                mov     ax, [bp-16h]
                cmp     es:[bx+2], ax
                jbe     short loc_2B9F
                cmp     word ptr [bp-12h], 0
                jnz     short loc_2B93
                push    word ptr [bp-0Eh]
                push    word ptr [bp-10h]
                les     bx, [bp-8]
                push    word ptr es:[bx+6]
                push    word ptr [bp+0Ch]
                push    word ptr [bp+0Ah]
                call    CMPRESSTR
                or      ax, ax
                jnz     short loc_2B9F

loc_2B93:                               ; CODE XREF: FINDRESOURCE+D6↑j
                les     bx, [bp-8]
                mov     ax, [bp-12h]
                cmp     es:[bx+6], ax
                jnz     short loc_2BAE

loc_2B9F:                               ; CODE XREF: FINDRESOURCE+D0↑j
                                        ; FINDRESOURCE+F0↑j
                les     bx, [bp-0Ch]
                mov     ax, [bp-16h]
                cmp     es:[bx+2], ax
                jnz     short loc_2BB7
                jmp     loc_2ACF
; ---------------------------------------------------------------------------

loc_2BAE:                               ; CODE XREF: FINDRESOURCE+FC↑j
                inc     word ptr [bp-16h]
                add     word ptr [bp-8], 0Ch
                jmp     short loc_2B67
; ---------------------------------------------------------------------------

loc_2BB7:                               ; CODE XREF: FINDRESOURCE+108↑j
                mov     ax, [bp-8]

loc_2BBA:                               ; CODE XREF: FINDRESOURCE+30↑j
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ah
FINDRESOURCE    endp

;
; External Entry #61 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOADRESOURCE
LOADRESOURCE    proc far
                push    ds              ; KERNEL_61
                pop     ax
                nop
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                sub     sp, 20h
                push    si
                cmp     word ptr [bp+6], 0
                jnz     short loc_2BDD
                jmp     loc_2D0F
; ---------------------------------------------------------------------------

loc_2BDD:                               ; CODE XREF: LOADRESOURCE+12↑j
                push    word ptr [bp+8]
                call    GETEXEPTR
                mov     [bp-20h], ax
                or      ax, ax
                jnz     short loc_2BED
                jmp     loc_2D0F
; ---------------------------------------------------------------------------

loc_2BED:                               ; CODE XREF: LOADRESOURCE+22↑j
                mov     dx, ax
                sub     ax, ax
                mov     [bp-16h], ax
                mov     [bp-14h], dx
                les     bx, [bp-16h]
                mov     ax, es:[bx+24h]
                cmp     es:[bx+26h], ax
                jnz     short loc_2C07
                jmp     loc_2D0F
; ---------------------------------------------------------------------------

loc_2C07:                               ; CODE XREF: LOADRESOURCE+3C↑j
                sub     ax, ax
                mov     ax, [bp+6]
                mov     [bp-6], ax
                mov     [bp-4], dx
                les     bx, [bp-6]
                cmp     word ptr es:[bx+0Ah], 0
                jz      short loc_2C1F
                jmp     loc_2D39
; ---------------------------------------------------------------------------

loc_2C1F:                               ; CODE XREF: LOADRESOURCE+54↑j
                cmp     word ptr es:[bx+8], 0
                jnz     short loc_2C29
                jmp     loc_2CCB
; ---------------------------------------------------------------------------

loc_2C29:                               ; CODE XREF: LOADRESOURCE+5E↑j
                test    byte ptr es:[bx+4], 4
                jz      short loc_2C4C
                push    word ptr es:[bx+8]
                nop
                push    cs
                call    near ptr GLOBALLOCK
                or      ax, dx
                jz      short loc_2C4C
                les     bx, [bp-6]
                push    word ptr es:[bx+8]
                nop
                push    cs
                call    near ptr GLOBALUNLOCK
                jmp     loc_2D39
; ---------------------------------------------------------------------------

loc_2C4C:                               ; CODE XREF: LOADRESOURCE+68↑j
                                        ; LOADRESOURCE+75↑j ...
                mov     dx, [bp-20h]
                sub     ax, ax
                les     bx, [bp-16h]
                mov     ax, es:[bx+24h]
                mov     [bp-0Eh], ax
                mov     [bp-0Ch], dx
                add     ax, 2

loc_2C61:                               ; CODE XREF: LOADRESOURCE+146↓j
                mov     [bp-0Ah], ax
                mov     [bp-8], dx
                les     bx, [bp-0Ah]
                cmp     word ptr es:[bx], 0
                jnz     short loc_2C73
                jmp     loc_2D0F
; ---------------------------------------------------------------------------

loc_2C73:                               ; CODE XREF: LOADRESOURCE+A8↑j
                add     ax, 8
                mov     [bp-1Ah], ax
                mov     [bp-18h], dx
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                mov     [bp-1Eh], ax
                mov     [bp-1Ch], dx
                or      ax, dx
                jz      short loc_2CF9
                mov     word ptr [bp-10h], 0

loc_2C93:                               ; CODE XREF: LOADRESOURCE+131↓j
                les     bx, [bp-0Ah]
                mov     ax, [bp-10h]
                cmp     es:[bx+2], ax
                jbe     short loc_2D06
                mov     ax, [bp-6]
                cmp     [bp-1Ah], ax
                jnz     short loc_2CF0
                les     bx, [bp-6]
                push    word ptr es:[bx+8]
                push    word ptr [bp+8]
                push    word ptr [bp+6]
                call    dword ptr [bp-1Eh]
                mov     si, ax
                or      si, si
                jz      short loc_2CEC
                les     bx, [bp-6]
                mov     es:[bx+8], si
                or      byte ptr es:[bx+4], 4
                jmp     short loc_2D39
; ---------------------------------------------------------------------------

loc_2CCB:                               ; CODE XREF: LOADRESOURCE+60↑j
                les     bx, [bp-6]
                test    word ptr es:[bx+4], 0F000h
                jnz     short loc_2CD9
                jmp     loc_2C4C
; ---------------------------------------------------------------------------

loc_2CD9:                               ; CODE XREF: LOADRESOURCE+10E↑j
                push    word ptr es:[bx+4]
                push    word ptr [bp-20h]
                call    MYRESALLOC
                les     bx, [bp-6]
                mov     es:[bx+8], ax
                jmp     short loc_2D39
; ---------------------------------------------------------------------------

loc_2CEC:                               ; CODE XREF: LOADRESOURCE+F5↑j
                mov     ax, si
                jmp     short loc_2D44
; ---------------------------------------------------------------------------

loc_2CF0:                               ; CODE XREF: LOADRESOURCE+DF↑j
                inc     word ptr [bp-10h]
                add     word ptr [bp-1Ah], 0Ch
                jmp     short loc_2C93
; ---------------------------------------------------------------------------

loc_2CF9:                               ; CODE XREF: LOADRESOURCE+C6↑j
                mov     ax, 0Ch
                les     bx, [bp-0Ah]
                mul     word ptr es:[bx+2]
                add     [bp-1Ah], ax

loc_2D06:                               ; CODE XREF: LOADRESOURCE+D7↑j
                mov     ax, [bp-1Ah]
                mov     dx, [bp-18h]
                jmp     loc_2C61
; ---------------------------------------------------------------------------

loc_2D0F:                               ; CODE XREF: LOADRESOURCE+14↑j
                                        ; LOADRESOURCE+24↑j ...
                or      si, si
                jnz     short loc_2D35
                mov     dx, [bp-20h]
                sub     ax, ax
                mov     [bp-16h], ax
                mov     [bp-14h], dx
                mov     ax, 504h
                push    ax
                mov     ax, 2
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     dx, [bp-20h]
                sub     ax, ax
                push    dx
                push    ax
                call    KERNELERROR

loc_2D35:                               ; CODE XREF: LOADRESOURCE+14B↑j
                sub     ax, ax
                jmp     short loc_2D44
; ---------------------------------------------------------------------------

loc_2D39:                               ; CODE XREF: LOADRESOURCE+56↑j
                                        ; LOADRESOURCE+83↑j ...
                les     bx, [bp-6]
                inc     word ptr es:[bx+0Ah]
                mov     ax, es:[bx+8]

loc_2D44:                               ; CODE XREF: LOADRESOURCE+128↑j
                                        ; LOADRESOURCE+171↑j
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
LOADRESOURCE    endp

;
; External Entry #67 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public SETRESOURCEHANDLER
SETRESOURCEHANDLER proc far
                push    ds              ; KERNEL_67
                pop     ax
                nop
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                sub     sp, 1Ah
                push    si
                push    word ptr [bp+0Eh]
                call    GETEXEPTR
                mov     [bp-1Ah], ax
                mov     dx, ax
                sub     ax, ax
                mov     [bp-18h], ax
                mov     [bp-16h], dx
                les     bx, [bp-18h]
                mov     ax, es:[bx+24h]
                cmp     es:[bx+26h], ax
                jnz     short loc_2D84

loc_2D7E:                               ; CODE XREF: SETRESOURCEHANDLER+95↓j
                sub     ax, ax
                cwd
                jmp     loc_2E28
; ---------------------------------------------------------------------------

loc_2D84:                               ; CODE XREF: SETRESOURCEHANDLER+2C↑j
                mov     dx, [bp-1Ah]
                sub     ax, ax
                les     bx, [bp-18h]
                mov     ax, es:[bx+24h]
                mov     [bp-12h], ax
                mov     [bp-10h], dx
                push    word ptr [bp+0Ch]
                push    word ptr [bp+0Ah]
                call    GETRESORD
                mov     [bp-14h], ax
                mov     ax, [bp-12h]
                mov     dx, [bp-10h]
                add     ax, 2

loc_2DAB:                               ; CODE XREF: SETRESOURCEHANDLER+D6↓j
                mov     [bp-0Eh], ax
                mov     [bp-0Ch], dx
                les     bx, [bp-0Eh]
                mov     si, es:[bx]
                or      si, si
                jz      short loc_2DDE
                add     ax, 8
                mov     [bp-0Ah], ax
                mov     [bp-8], dx
                cmp     word ptr [bp-14h], 0
                jnz     short loc_2E0B
                push    word ptr [bp-10h]
                push    word ptr [bp-12h]
                push    si
                push    word ptr [bp+0Ch]
                push    word ptr [bp+0Ah]
                call    CMPRESSTR
                or      ax, ax
                jz      short loc_2E0B

loc_2DDE:                               ; CODE XREF: SETRESOURCEHANDLER+69↑j
                                        ; SETRESOURCEHANDLER+C4↓j
                les     bx, [bp-0Eh]
                cmp     word ptr es:[bx], 0
                jz      short loc_2D7E
                mov     ax, es:[bx+4]
                mov     dx, es:[bx+6]
                mov     [bp-6], ax
                mov     [bp-4], dx
                mov     ax, [bp+6]
                mov     dx, [bp+8]
                mov     es:[bx+4], ax
                mov     es:[bx+6], dx
                mov     ax, [bp-6]
                mov     dx, [bp-4]
                jmp     short loc_2E28
; ---------------------------------------------------------------------------

loc_2E0B:                               ; CODE XREF: SETRESOURCEHANDLER+78↑j
                                        ; SETRESOURCEHANDLER+8C↑j
                les     bx, [bp-0Eh]
                mov     ax, [bp-14h]
                cmp     es:[bx], ax
                jz      short loc_2DDE
                mov     ax, 0Ch
                mul     word ptr es:[bx+2]
                add     [bp-0Ah], ax
                mov     ax, [bp-0Ah]
                mov     dx, [bp-8]
                jmp     short loc_2DAB
; ---------------------------------------------------------------------------

loc_2E28:                               ; CODE XREF: SETRESOURCEHANDLER+31↑j
                                        ; SETRESOURCEHANDLER+B9↑j
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ah
SETRESOURCEHANDLER endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

MYRESALLOC      proc near               ; CODE XREF: LOADRESOURCE+11A↑p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                xor     ax, ax
                mov     bx, [bp+arg_2]
                or      bl, 7
                push    bx
                push    ax
                push    ax
                call    MYALLOC
                test    dl, 1
                jnz     short loc_2E60
                mov     es, cs:PGLOBALHEAP
                mov     bx, dx
                test    byte ptr es:[bx+2], 40h
                jz      short loc_2E60
                mov     ax, [bp+arg_0]
                mov     es:[bx], ax
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_2E60:                               ; CODE XREF: MYRESALLOC+14↑j
                                        ; MYRESALLOC+22↑j ...
                mov     ax, dx
                mov     sp, bp
                pop     bp
                retn    4
MYRESALLOC      endp

;
; External Entry #66 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public ALLOCRESOURCE
ALLOCRESOURCE   proc far                ; CODE XREF: RESALLOC+14↓p

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                inc     bp              ; KERNEL_66
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    [bp+arg_6]
                call    GETEXEPTR
                or      ax, ax
                jz      short loc_2EF0
                mov     es, ax
                push    es
                mov     si, [bp+arg_4]
                mov     bx, es:[si+4]
                or      bl, 7
                push    bx
                push    word ptr es:[si+2]
                mov     bx, es:24h
                mov     cx, es:[bx]
                mov     dx, [bp+arg_0]
                or      dx, [bp+arg_2]
                jz      short loc_2EB2
                pop     dx
                push    cx
                mov     dx, [bp+arg_2]
                xor     ax, ax
                not     ax
                shl     ax, cl
                not     ax
                add     ax, [bp+arg_0]

loc_2EAA:                               ; CODE XREF: ALLOCRESOURCE+46↓j
                shr     dx, 1
                rcr     ax, 1
                loop    loc_2EAA
                pop     cx
                push    ax

loc_2EB2:                               ; CODE XREF: ALLOCRESOURCE+30↑j
                cmp     word ptr es:[si+8], 0
                jz      short loc_2EDD
                pop     ax
                pop     dx
                xor     dx, dx
                jcxz    short loc_2EC5

loc_2EBF:                               ; CODE XREF: ALLOCRESOURCE+5B↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_2EBF

loc_2EC5:                               ; CODE XREF: ALLOCRESOURCE+55↑j
                xor     cx, cx
                push    word ptr es:[si+8]
                push    dx
                push    ax
                push    cx
                nop
                push    cs
                call    near ptr GLOBALREALLOC
                push    ax
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                xchg    ax, dx
                jmp     short loc_2EE1
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_2EDD:                               ; CODE XREF: ALLOCRESOURCE+4F↑j
                push    cx
                call    MYALLOC

loc_2EE1:                               ; CODE XREF: ALLOCRESOURCE+72↑j
                pop     cx
                or      ax, ax
                jz      short loc_2EF0
                dec     ax
                mov     es, ax
                inc     ax
                mov     es:1, cx
                xchg    ax, dx

loc_2EF0:                               ; CODE XREF: ALLOCRESOURCE+E↑j
                                        ; ALLOCRESOURCE+7C↑j
                mov     cx, ax
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
ALLOCRESOURCE   endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

RESALLOC        proc near               ; CODE XREF: DEFAULTRESOURCEHANDLER+30↓p
                                        ; PRELOADRESOURCES+55↓p ...

var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8

                push    bp
                mov     bp, sp
                sub     sp, 2
                push    si
                push    di
                xor     ax, ax
                push    word ptr [bp+arg_4+2]
                push    word ptr [bp+arg_4]
                push    ax
                push    ax
                nop
                push    cs
                call    near ptr ALLOCRESOURCE
                les     si, [bp+arg_4]
                mov     [bp+var_2], ax
                mov     ax, dx
                mov     bx, es:24h
                mov     cx, es:[bx]
                mov     dx, es:[si+2]
                xor     bx, bx
                cmp     [bp+var_2], bx
                jnz     short loc_2F33
                jmp     short loc_2FA7
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_2F33:                               ; CODE XREF: RESALLOC+30↑j
                                        ; RESALLOC+39↓j
                shl     dx, 1
                rcl     bx, 1
                loop    loc_2F33
                push    ds
                mov     cx, dx
                mov     bx, [bp+arg_2]
                cmp     [bp+arg_0], bx
                jz      short loc_2F57
                mov     ds, bx
                mov     bx, es
                xor     si, si
                xor     di, di
                mov     es, ax
                cld
                rep movsb
                mov     ds, ax
                mov     es, bx
                jmp     short loc_2F65
; ---------------------------------------------------------------------------

loc_2F57:                               ; CODE XREF: RESALLOC+44↑j
                xor     dx, dx
                mov     ds, ax
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_2F6B
                cmp     ax, cx
                jnz     short loc_2F6B

loc_2F65:                               ; CODE XREF: RESALLOC+57↑j
                pop     ds
                mov     ax, [bp+var_2]
                jmp     short loc_2FA7
; ---------------------------------------------------------------------------

loc_2F6B:                               ; CODE XREF: RESALLOC+61↑j
                                        ; RESALLOC+65↑j
                mov     bx, ds
                pop     ds
                push    bx
                call    MYFREE
                xor     bx, bx
                mov     ax, 505h
                push    ax
                mov     ax, offset SZERRCANTREADRESOURCE ; "Unable to read resource from "
                push    cs
                push    ax
                push    word ptr [bp+arg_4+2]
                push    bx
                call    KERNELERROR
                jmp     short loc_2FA5
; ---------------------------------------------------------------------------
SZERRCANTREADRESOURCE db 'Unable to read resource from ',0
                                        ; DATA XREF: RESALLOC+7A↑o
                db 24h
; ---------------------------------------------------------------------------

loc_2FA5:                               ; CODE XREF: RESALLOC+86↑j
                xor     ax, ax

loc_2FA7:                               ; CODE XREF: RESALLOC+32↑j
                                        ; RESALLOC+6B↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    8
RESALLOC        endp

;
; External Entry #64 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public ACCESSRESOURCE
ACCESSRESOURCE  proc far                ; CODE XREF: DEFAULTRESOURCEHANDLER+25↓p

arg_0           = word ptr  6
arg_2           = word ptr  8

                inc     bp              ; KERNEL_64
                push    bp
                mov     bp, sp
                push    ds
                push    [bp+arg_2]
                call    GETEXEPTR
                mov     es, ax
                mov     bx, [bp+arg_0]
                push    word ptr es:[bx+2]
                push    word ptr es:[bx]
                mov     ax, es:[bx+4]
                mov     dx, es:0Ah
                mov     bx, es:24h
                mov     cx, es:[bx]
                push    cx
                push    es
                mov     bx, 0A400h
                push    es
                push    dx
                push    es
                push    dx
                push    bx
                nop
                push    cs
                call    near ptr OPENFILE
                pop     es
                pop     cx
                pop     dx
                inc     ax
                jnz     short loc_2FF3
                pop     dx

loc_2FED:                               ; CODE XREF: ACCESSRESOURCE+56↓j
                mov     bx, 0FFFFh
                jmp     short loc_3013
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_2FF3:                               ; CODE XREF: ACCESSRESOURCE+3B↑j
                xor     ax, ax
                push    cx

loc_2FF6:                               ; CODE XREF: ACCESSRESOURCE+4B↓j
                shl     dx, 1
                rcl     ax, 1
                loop    loc_2FF6
                mov     cx, ax
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                pop     cx
                pop     dx
                jb      short loc_2FED
                xor     ax, ax

loc_3009:                               ; CODE XREF: ACCESSRESOURCE+5E↓j
                shl     dx, 1
                rcl     ax, 1
                loop    loc_3009
                mov     cx, ax
                mov     ax, bx

loc_3013:                               ; CODE XREF: ACCESSRESOURCE+41↑j
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
ACCESSRESOURCE  endp

;
; External Entry #62 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCKRESOURCE
LOCKRESOURCE    proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_62
                push    bp
                mov     bp, sp
                push    ds
                push    si
                mov     ax, [bp+arg_0]
                or      ax, ax
                jz      short loc_309E
                push    ax
                nop
                push    cs
                call    near ptr GLOBALLOCK
                or      cx, cx
                jnz     short loc_30A2
                mov     bx, [bp+arg_0]
                test    bl, 1
                jnz     short loc_309E
                mov     es, cs:PGLOBALHEAP
                mov     bx, es:[bx]
                mov     es, bx
                cmp     word ptr es:0, 454Eh
                jnz     short loc_309E
                mov     bx, es:24h
                cmp     es:26h, bx
                jz      short loc_309E
                mov     dx, [bp+arg_0]
                add     bx, 2

loc_3062:                               ; CODE XREF: LOCKRESOURCE+5E↓j
                cmp     es:[bx], ax
                jz      short loc_309E
                lea     si, [bx+4]
                mov     cx, es:[bx+2]
                add     bx, 8

loc_3071:                               ; CODE XREF: LOCKRESOURCE+5C↓j
                cmp     es:[bx+8], dx
                jz      short loc_307E
                add     bx, 0Ch
                loop    loc_3071
                jmp     short loc_3062
; ---------------------------------------------------------------------------

loc_307E:                               ; CODE XREF: LOCKRESOURCE+57↑j
                cmp     word ptr es:[si+2], 0
                jz      short loc_309E
                push    es
                push    bx
                push    dx
                push    es
                push    bx
                call    dword ptr es:[si]
                push    ax
                nop
                push    cs
                call    near ptr GLOBALLOCK
                pop     bx
                pop     es
                jcxz    short loc_309E
                or      byte ptr es:[bx+4], 4
                jmp     short loc_30A2
; ---------------------------------------------------------------------------

loc_309E:                               ; CODE XREF: LOCKRESOURCE+B↑j
                                        ; LOCKRESOURCE+1D↑j ...
                xor     dx, dx
                xor     ax, ax

loc_30A2:                               ; CODE XREF: LOCKRESOURCE+15↑j
                                        ; LOCKRESOURCE+7E↑j
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
LOCKRESOURCE    endp

;
; External Entry #63 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public FREERESOURCE
FREERESOURCE    proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_63
                push    bp
                mov     bp, sp
                push    ds
                push    si
                mov     ax, [bp+arg_0]
                or      ax, ax
                jz      short loc_3135
                push    ax
                call    MYLOCK
                or      ax, ax
                jnz     short loc_30DA
                mov     ds, cs:PGLOBALHEAP
                mov     bx, [bp+arg_0]
                test    bl, 1
                jnz     short loc_3132
                test    byte ptr [bx+2], 40h
                jz      short loc_3132
                mov     ds, word ptr [bx]
                jmp     short loc_30E3
; ---------------------------------------------------------------------------

loc_30DA:                               ; CODE XREF: FREERESOURCE+13↑j
                dec     ax
                mov     ds, ax
                xor     ax, ax
                mov     ds, word ptr ds:1

loc_30E3:                               ; CODE XREF: FREERESOURCE+2A↑j
                cmp     word ptr ds:0, 454Eh
                jnz     short loc_312A
                mov     bx, ds:24h
                cmp     ds:26h, bx
                jz      short loc_312A
                mov     dx, [bp+arg_0]
                add     bx, 2

loc_30FB:                               ; CODE XREF: FREERESOURCE+61↓j
                cmp     [bx], ax
                jz      short loc_312A
                mov     cx, [bx+2]
                add     bx, 8

loc_3105:                               ; CODE XREF: FREERESOURCE+5F↓j
                cmp     [bx+8], dx
                jz      short loc_3111
                add     bx, 0Ch
                loop    loc_3105
                jmp     short loc_30FB
; ---------------------------------------------------------------------------

loc_3111:                               ; CODE XREF: FREERESOURCE+5A↑j
                cmp     word ptr [bx+0Ah], 0
                jz      short loc_312A
                dec     word ptr [bx+0Ah]
                jg      short loc_3135
                test    word ptr [bx+4], 0F000h
                jnz     short loc_3132
                mov     [bx+8], ax
                and     byte ptr [bx+4], 0FBh

loc_312A:                               ; CODE XREF: FREERESOURCE+3B↑j
                                        ; FREERESOURCE+45↑j ...
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr GLOBALFREE

loc_3132:                               ; CODE XREF: FREERESOURCE+20↑j
                                        ; FREERESOURCE+26↑j ...
                mov     [bp+arg_0], ax

loc_3135:                               ; CODE XREF: FREERESOURCE+B↑j
                                        ; FREERESOURCE+6C↑j
                mov     ax, [bp+arg_0]
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
FREERESOURCE    endp

;
; External Entry #65 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public SIZEOFRESOURCE
SIZEOFRESOURCE  proc far

arg_0           = word ptr  6
arg_2           = word ptr  8

                inc     bp              ; KERNEL_65
                push    bp
                mov     bp, sp
                push    ds
                push    [bp+arg_2]
                call    GETEXEPTR
                mov     es, ax
                mov     bx, [bp+arg_0]
                mov     ax, es:[bx+2]
                xor     dx, dx
                mov     bx, es:24h
                mov     cx, es:[bx]

loc_3162:                               ; CODE XREF: SIZEOFRESOURCE+22↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_3162
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
SIZEOFRESOURCE  endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DEFAULTRESOURCEHANDLER proc far         ; DATA XREF: PRELOADRESOURCES+24↓o

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    [bp+arg_2]
                call    GETEXEPTR
                or      ax, ax
                jz      short loc_31AE
                mov     si, ax
                push    [bp+arg_4]
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                or      dx, dx
                jnz     short loc_31AE
                push    si
                push    [bp+arg_0]
                nop
                push    cs
                call    near ptr ACCESSRESOURCE
                mov     di, ax
                push    si
                push    [bp+arg_0]
                push    di
                push    di
                call    RESALLOC
                push    ax
                push    di
                nop
                push    cs
                call    near ptr _LCLOSE
                pop     ax

loc_31AE:                               ; CODE XREF: DEFAULTRESOURCEHANDLER+F↑j
                                        ; DEFAULTRESOURCEHANDLER+1D↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
DEFAULTRESOURCEHANDLER endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

PRELOADRESOURCES proc near              ; CODE XREF: LOADMODULE+305↑p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     es, [bp+arg_2]
                mov     si, es:24h
                cmp     es:26h, si
                jz      short loc_3222
                mov     di, es:[si]
                add     si, 2

loc_31D5:                               ; CODE XREF: PRELOADRESOURCES+65↓j
                cmp     word ptr es:[si], 0
                jz      short loc_3222
                mov     cx, es:[si+2]
                mov     word ptr es:[si+4], offset DEFAULTRESOURCEHANDLER
                mov     word ptr es:[si+6], cs
                add     si, 8

loc_31EC:                               ; CODE XREF: PRELOADRESOURCES+63↓j
                push    cx
                mov     ax, es:[si+4]
                test    al, 40h
                jz      short loc_321A
                mov     dx, es:[si]
                xor     ax, ax
                mov     cx, di

loc_31FC:                               ; CODE XREF: PRELOADRESOURCES+45↓j
                shl     dx, 1
                rcl     ax, 1
                loop    loc_31FC
                mov     cx, ax
                mov     ax, 4200h
                mov     bx, [bp+arg_0]
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                push    es
                push    si
                push    bx
                push    bx
                call    RESALLOC
                mov     es, [bp+arg_2]
                mov     es:[si+8], ax

loc_321A:                               ; CODE XREF: PRELOADRESOURCES+38↑j
                add     si, 0Ch
                pop     cx
                loop    loc_31EC
                jmp     short loc_31D5
; ---------------------------------------------------------------------------

loc_3222:                               ; CODE XREF: PRELOADRESOURCES+12↑j
                                        ; PRELOADRESOURCES+1E↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
PRELOADRESOURCES endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETRESORD       proc near               ; CODE XREF: FINDRESOURCE+4B↑p
                                        ; FINDRESOURCE+57↑p ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    si
                les     si, [bp+arg_0]
                mov     cx, si
                mov     ax, es
                or      ax, ax
                jz      short loc_325C
                xor     cx, cx
                cld
                lods    byte ptr es:[si]
                cmp     al, 23h ; '#'
                jnz     short loc_325C

loc_3242:                               ; CODE XREF: GETRESORD+30↓j
                lods    byte ptr es:[si]
                or      al, al
                jz      short loc_325C
                sub     al, 30h ; '0'
                cmp     al, 9
                ja      short loc_325C
                xor     ah, ah
                mov     bx, ax
                mov     al, 0Ah
                mul     cx
                add     ax, bx
                mov     cx, ax
                jmp     short loc_3242
; ---------------------------------------------------------------------------

loc_325C:                               ; CODE XREF: GETRESORD+D↑j
                                        ; GETRESORD+16↑j ...
                mov     ax, cx
                jcxz    short loc_3263
                or      ax, 8000h

loc_3263:                               ; CODE XREF: GETRESORD+34↑j
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
GETRESORD       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

CMPRESSTR       proc near               ; CODE XREF: FINDRESOURCE+92↑p
                                        ; FINDRESOURCE+EB↑p ...

arg_0           = dword ptr  4
arg_4           = word ptr  8
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                push    si
                push    ds
                lds     si, [bp+arg_6]
                add     si, [bp+arg_4]
                xor     ax, ax
                cld
                lodsb
                mov     cx, ax
                les     bx, [bp+arg_0]

loc_327E:                               ; CODE XREF: CMPRESSTR+26↓j
                mov     al, es:[bx]
                inc     bx
                or      al, al
                jz      short loc_329D
                call    MYUPPER
                mov     ah, al
                lodsb
                cmp     ah, al
                jnz     short loc_329D
                loop    loc_327E
                xor     ax, ax
                cmp     es:[bx], al
                jnz     short loc_329D
                not     ax
                jmp     short loc_329F
; ---------------------------------------------------------------------------

loc_329D:                               ; CODE XREF: CMPRESSTR+1A↑j
                                        ; CMPRESSTR+24↑j ...
                xor     ax, ax

loc_329F:                               ; CODE XREF: CMPRESSTR+31↑j
                pop     ds
                pop     si
                mov     sp, bp
                pop     bp
                retn    0Ah
CMPRESSTR       endp

; ---------------------------------------------------------------------------
FUSEDBP         dw 0                    ; DATA XREF: PATCHSTACK+12↓w
                                        ; PATCHSTACK+3E↓w ...
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR PATCHSTACK

loc_32A9:                               ; CODE XREF: PATCHSTACK+18↓j
                jmp     loc_3349
; END OF FUNCTION CHUNK FOR PATCHSTACK

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

PATCHSTACK      proc near               ; CODE XREF: GNOTIFY+1A↓p

arg_0           = word ptr  4
arg_2           = word ptr  6

; FUNCTION CHUNK AT 32A9 SIZE 00000003 BYTES

                push    bp
                mov     bp, sp
                push    si
                push    di
                mov     si, [bp+arg_2]
                mov     di, [bp+arg_0]
                push    cs:HEADTDB
                xor     cx, cx
                mov     cs:FUSEDBP, cx

loc_32C3:                               ; CODE XREF: PATCHSTACK+87↓j
                                        ; PATCHSTACK:loc_3389↓j
                pop     cx
                jcxz    short loc_32A9
                mov     es, cx
                push    word ptr es:0
                mov     ax, es:4
                cmp     ax, si
                jnz     short loc_32DA
                mov     es:4, di

loc_32DA:                               ; CODE XREF: PATCHSTACK+27↑j
                mov     bx, ss
                cmp     bx, ax
                mov     bx, es:2
                lea     bx, [bx+10h]
                jnz     short loc_32EF

loc_32E8:                               ; CODE XREF: PATCHSTACK+A9↓j
                mov     bx, bp
                mov     cs:FUSEDBP, bp

loc_32EF:                               ; CODE XREF: PATCHSTACK+3A↑j
                mov     es, ax
                mov     ax, bx

loc_32F3:                               ; CODE XREF: PATCHSTACK+9B↓j
                mov     bx, ax
                xor     ax, ax
                test    byte ptr es:[bx], 1
                jz      short loc_3330
                cmp     es:[bx+4], si
                jnz     short loc_3316
                push    es
                push    bx
                les     bx, es:[bx+2]
                cmp     word ptr es:[bx], 3FCDh
                pop     bx
                pop     es
                jz      short loc_3316
                mov     es:[bx+4], di

loc_3316:                               ; CODE XREF: PATCHSTACK+55↑j
                                        ; PATCHSTACK+64↑j
                cmp     es:[bx-2], si
                jnz     short loc_332F
                push    es
                push    bx
                les     bx, es:[bx+2]
                cmp     word ptr es:[bx], 3FCDh
                pop     bx
                pop     es
                jz      short loc_332F
                mov     es:[bx-2], di

loc_332F:                               ; CODE XREF: PATCHSTACK+6E↑j
                                        ; PATCHSTACK+7D↑j
                inc     ax

loc_3330:                               ; CODE XREF: PATCHSTACK+4F↑j
                xor     ax, es:[bx]
                jz      short loc_32C3
                cmp     ax, bx
                jbe     short loc_335A
                cmp     ax, es:0Ah
                jb      short loc_335A
                cmp     ax, es:0Eh
                ja      short loc_335A
                jmp     short loc_32F3
; ---------------------------------------------------------------------------

loc_3349:                               ; CODE XREF: PATCHSTACK:loc_32A9↑j
                xor     bx, bx
                cmp     cs:FUSEDBP, bx
                jnz     short loc_3357
                push    bx
                mov     ax, ss
                jmp     short loc_32E8
; ---------------------------------------------------------------------------

loc_3357:                               ; CODE XREF: PATCHSTACK+A4↑j
                jmp     short loc_338C
; ---------------------------------------------------------------------------
                align 2

loc_335A:                               ; CODE XREF: PATCHSTACK+8B↑j
                                        ; PATCHSTACK+92↑j ...
                mov     ax, 303h
                push    ax
                mov     ax, offset aPatchstackInva ; "PatchStack - invalid BP chain"
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_3389
; ---------------------------------------------------------------------------
aPatchstackInva db 'PatchStack - invalid BP chain',0
                                        ; DATA XREF: PATCHSTACK+B2↑o
                db 24h
; ---------------------------------------------------------------------------

loc_3389:                               ; CODE XREF: PATCHSTACK+BC↑j
                jmp     loc_32C3
; ---------------------------------------------------------------------------

loc_338C:                               ; CODE XREF: PATCHSTACK:loc_3357↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
PATCHSTACK      endp


; =============== S U B R O U T I N E =======================================


PATCHSTACKINTERNAL proc near            ; CODE XREF: SEARCHSTACK+AB↓p
                                        ; CATCH+1D↓p
                push    es
                push    bx
                mov     dx, es:[bx-2]
                or      dx, dx
                jz      short loc_33B3
                dec     dx
                mov     es, dx
                inc     dx
                cmp     byte ptr es:0, 4Dh ; 'M'
                jnz     short loc_33B3
                mov     cx, es:0Ah
                jcxz    short loc_33B3
                mov     dx, cx

loc_33B3:                               ; CODE XREF: PATCHSTACKINTERNAL+8↑j
                                        ; PATCHSTACKINTERNAL+14↑j ...
                dec     si
                mov     es, si
                inc     si
                mov     cx, es:0Ah
                jcxz    short loc_33DE
                mov     si, cx
                mov     es, word ptr es:1
                mov     bx, es:22h
                mov     cx, es:1Ch

loc_33CF:                               ; CODE XREF: PATCHSTACKINTERNAL+44↓j
                cmp     es:[bx+8], si
                jz      short loc_33E7
                add     bx, 0Ah
                loop    loc_33CF
                mov     si, es:[bx+4]

loc_33DE:                               ; CODE XREF: PATCHSTACKINTERNAL+28↑j
                pop     bx
                pop     es
                xchg    dx, si
                mov     cx, es:[bx+2]
                retn
; ---------------------------------------------------------------------------

loc_33E7:                               ; CODE XREF: PATCHSTACKINTERNAL+3F↑j
                sub     cx, es:1Ch
                neg     cx
                shl     cx, 1
                shl     cx, 1
                add     cx, es:3Ch
                mov     si, dx
                mov     dx, es
                pop     bx
                pop     es
                retn
PATCHSTACKINTERNAL endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR SEARCHSTACK

loc_33FE:                               ; CODE XREF: SEARCHSTACK+14↓j
                jmp     short loc_3468
; END OF FUNCTION CHUNK FOR SEARCHSTACK
; ---------------------------------------------------------------------------
                db 90h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

SEARCHSTACK     proc near               ; CODE XREF: GNOTIFY+37↓p

arg_0           = word ptr  4

; FUNCTION CHUNK AT 33FE SIZE 00000002 BYTES

                push    bp
                mov     bp, sp
                push    si
                mov     si, [bp+arg_0]
                push    cs:HEADTDB
                xor     cx, cx
                mov     cs:FUSEDBP, cx

loc_3414:                               ; CODE XREF: SEARCHSTACK+4E↓j
                                        ; SEARCHSTACK:loc_3599↓j
                pop     cx
                jcxz    short loc_33FE
                mov     es, cx
                push    word ptr es:0
                cmp     es:4, si
                jz      short loc_3478
                mov     bx, ss
                mov     ax, es:4
                cmp     bx, ax
                mov     bx, es:2
                lea     bx, [bx+10h]
                jnz     short loc_343E

loc_3437:                               ; CODE XREF: SEARCHSTACK+73↓j
                mov     bx, bp
                mov     cs:FUSEDBP, bp

loc_343E:                               ; CODE XREF: SEARCHSTACK+34↑j
                mov     es, ax
                mov     ax, bx

loc_3442:                               ; CODE XREF: SEARCHSTACK+62↓j
                mov     bx, ax
                xor     ax, ax
                test    byte ptr es:[bx], 1
                jnz     short loc_3497

loc_344C:                               ; CODE XREF: SEARCHSTACK+94↓j
                xor     ax, es:[bx]
                jz      short loc_3414
                cmp     ax, bx
                jbe     short loc_3465
                cmp     ax, es:0Ah
                jb      short loc_3465
                cmp     ax, es:0Eh
                ja      short loc_3465
                jmp     short loc_3442
; ---------------------------------------------------------------------------

loc_3465:                               ; CODE XREF: SEARCHSTACK+52↑j
                                        ; SEARCHSTACK+59↑j ...
                jmp     loc_3569
; ---------------------------------------------------------------------------

loc_3468:                               ; CODE XREF: SEARCHSTACK:loc_33FE↑j
                xor     bx, bx
                cmp     cs:FUSEDBP, bx
                jnz     short loc_3476
                mov     ax, ss
                push    bx
                jmp     short loc_3437
; ---------------------------------------------------------------------------

loc_3476:                               ; CODE XREF: SEARCHSTACK+6E↑j
                mov     es, bx
                assume es:cseg01

loc_3478:                               ; CODE XREF: SEARCHSTACK+22↑j
                                        ; SEARCHSTACK+91↓j ...
                mov     ax, bx
                mov     dx, es
                jmp     loc_359C
; ---------------------------------------------------------------------------

loc_347F:                               ; CODE XREF: SEARCHSTACK+9A↓j
                                        ; SEARCHSTACK+A9↓j
                cmp     es:[bx-2], si
                jnz     short loc_3494
                push    es
                push    bx
                les     bx, es:[bx+2]
                assume es:nothing
                cmp     word ptr es:[bx], 3FCDh
                pop     bx
                pop     es
                jnz     short loc_3478

loc_3494:                               ; CODE XREF: SEARCHSTACK+82↑j
                                        ; SEARCHSTACK+F4↓j
                inc     ax
                jmp     short loc_344C
; ---------------------------------------------------------------------------

loc_3497:                               ; CODE XREF: SEARCHSTACK+49↑j
                cmp     es:[bx+4], si
                jnz     short loc_347F
                push    es
                push    bx
                les     bx, es:[bx+2]
                cmp     word ptr es:[bx], 3FCDh
                pop     bx
                pop     es
                jz      short loc_347F
                call    PATCHSTACKINTERNAL
                cmp     es:[bx+4], dx
                jz      short loc_3478
                test    si, 0E001h
                jnz     short loc_3478
                shr     si, 1
                push    es
                push    bx
                push    ax
                cmp     cs:INT3FBP, bx
                jz      short loc_34F7

loc_34C7:                               ; CODE XREF: SEARCHSTACK+101↓j
                                        ; SEARCHSTACK+165↓j
                mov     ax, cx
                xchg    cx, es:[bx+2]
                mov     es:[bx-2], cx
                and     ax, 0FFF0h
                mov     cl, 4
                shr     ax, cl
                sub     ax, si
                add     dx, ax
                mov     ax, 0Fh
                and     ax, es:[bx+2]
                shl     si, cl
                or      ax, si
                mov     es:[bx+2], ax
                mov     es:[bx+4], dx
                pop     ax
                pop     bx
                pop     es
                mov     si, [bp+arg_0]
                jmp     short loc_3494
; ---------------------------------------------------------------------------

loc_34F7:                               ; CODE XREF: SEARCHSTACK+C4↑j
                mov     bx, es
                mov     ax, ss
                cmp     ax, bx
                mov     bx, cs:INT3FBP
                jnz     short loc_34C7
                cmp     cs:INT3FSAVEDSS, 0
                jz      short loc_3535
                mov     es, cs:INT3FSAVEDSS
                mov     bx, cs:INT3FSAVEDBP
                mov     ax, cs:INT3FSAVEDCS
                mov     es:[bx+4], ax
                mov     ax, cs:INT3FSAVEDIP
                mov     es:[bx+2], ax
                mov     ax, cs:INT3FSAVEDDS
                mov     es:[bx-2], ax
                push    ss
                pop     es
                mov     bx, cs:INT3FBP

loc_3535:                               ; CODE XREF: SEARCHSTACK+109↑j
                mov     cs:INT3FSAVEDSS, es
                mov     cs:INT3FSAVEDBP, bx
                mov     ax, es:[bx+4]
                mov     cs:INT3FSAVEDCS, ax
                mov     ax, es:[bx+2]
                mov     cs:INT3FSAVEDIP, ax
                mov     ax, es:[bx-2]
                mov     cs:INT3FSAVEDDS, ax
                mov     word ptr es:[bx+4], cs
                mov     word ptr es:[bx+2], offset INT3FTHUNK
                push    cs
                pop     es
                assume es:cseg01
                mov     bx, offset INT3FSAVEDFRAME
                jmp     loc_34C7
; ---------------------------------------------------------------------------

loc_3569:                               ; CODE XREF: SEARCHSTACK:loc_3465↑j
                mov     ax, 303h
                push    ax
                mov     ax, offset SZSEARCHSTACKINVALIDBPCHAIN ; "SearchStack - invalid BP chain"
                push    cs
                push    ax
                push    es
                push    bx
                call    KERNELERROR
                jmp     short loc_3599
; ---------------------------------------------------------------------------
SZSEARCHSTACKINVALIDBPCHAIN db 'SearchStack - invalid BP chain',0
                                        ; DATA XREF: SEARCHSTACK+16C↑o
                db 24h
; ---------------------------------------------------------------------------

loc_3599:                               ; CODE XREF: SEARCHSTACK+176↑j
                jmp     loc_3414
; ---------------------------------------------------------------------------

loc_359C:                               ; CODE XREF: SEARCHSTACK+7B↑j
                pop     si
                mov     sp, bp
                pop     bp
                retn    2
SEARCHSTACK     endp ; sp-analysis failed

;
; External Entry #55 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public CATCH
CATCH           proc far

arg_0           = dword ptr  6

                inc     bp              ; KERNEL_55
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    ss
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                mov     es, dx
                assume es:nothing
                mov     bx, bp
                push    word ptr es:[bx]
                push    si
                mov     si, es:[bx+4]
                push    word ptr es:[bx+2]
                call    PATCHSTACKINTERNAL
                les     bx, [bp+arg_0]
                mov     es:[bx+10h], ax
                pop     word ptr es:[bx+0Eh]
                mov     es:[bx+0Ch], si
                mov     es:[bx+0Ah], di
                pop     word ptr es:[bx+8]
                pop     word ptr es:[bx+6]
                mov     es:[bx+4], sp
                mov     es:[bx], cx
                mov     es:[bx+2], dx
                xor     ax, ax

loc_35EB:                               ; CODE XREF: THROW+61↓j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
CATCH           endp

;
; External Entry #56 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public THROW
THROW           proc far
                mov     bx, sp          ; KERNEL_56
                mov     di, ss:[bx+4]
                lds     si, ss:[bx+6]
                push    word ptr [si+10h]
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                cli
                mov     ss, dx
                mov     sp, [si+4]
                sti
                mov     bp, sp
                add     bp, 6
                push    word ptr [si+6]
                pop     word ptr [bp+0]
                push    word ptr [si+8]
                pop     word ptr [bp-4]
                push    word ptr [si+0Ah]
                pop     word ptr [bp-6]
                push    word ptr [si+0Ch]
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                mov     [bp-2], dx
                les     bx, [si]
                cmp     word ptr es:[bx], 3FCDh
                jnz     short loc_3651
                xor     cx, cx
                mov     cl, es:[bx+3]
                mov     bx, 0FFFFh
                push    es
                push    cx
                push    bx
                push    bx
                call    LOADSEGMENT
                mov     es, ax
                mov     bx, [si+0Eh]

loc_3651:                               ; CODE XREF: THROW+42↑j
                mov     word ptr [bp+4], es
                mov     [bp+2], bx
                mov     ax, di
                jmp     short loc_35EB
THROW           endp

;
; External Entry #36 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETCURRENTTASK
GETCURRENTTASK  proc far
                mov     ax, cs:CURTDB   ; KERNEL_36
                mov     dx, cs:HEADTDB
                retf
GETCURRENTTASK  endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

CREATETASK      proc far                ; CODE XREF: STARTMODULE+9D↑p

arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                mov     si, [bp+arg_4]
                cmp     [bp+arg_6], 0
                jz      short loc_3677
                xor     si, si

loc_3677:                               ; CODE XREF: CREATETASK+E↑j
                cmp     [bp+arg_2], 0
                jz      short loc_3681
                add     si, 100h

loc_3681:                               ; CODE XREF: CREATETASK+16↑j
                add     si, 8Fh
                xor     ax, ax
                mov     al, cs:FEMM
                add     si, ax
                and     si, 0FFF0h
                mov     di, si
                mov     cl, 4
                shr     si, cl
                xor     dx, dx
                mov     cx, 2040h
                push    cx
                push    dx
                push    di
                nop
                push    cs
                call    near ptr GLOBALALLOC
                or      ax, ax
                jnz     short loc_36AB
                jmp     loc_378F
; ---------------------------------------------------------------------------

loc_36AB:                               ; CODE XREF: CREATETASK+41↑j
                dec     ax
                mov     ds, ax
                inc     ax
                mov     ds:1, ax
                mov     ds, ax
                mov     ax, [bp+arg_4]
                mov     dx, [bp+arg_6]
                or      dx, dx
                jnz     short loc_36D5
                mov     ax, si
                mov     cl, 4
                shl     ax, cl
                mov     dx, ds
                mov     cx, ax
                sub     cx, [bp+arg_4]
                mov     ds:0Ah, cx
                mov     ds:0Eh, ax
                mov     ds:0Ch, ax

loc_36D5:                               ; CODE XREF: CREATETASK+57↑j
                sub     ax, 16h
                mov     ds:2, ax
                push    dx
                call    MYLOCK
                mov     ds:4, ax
                mov     si, 1
                les     di, [bp+6]
                mov     ax, es
                or      ax, di
                jz      short loc_3744
                xor     ax, ax
                mov     al, cs:FEMM
                add     ax, 8Fh
                mov     cl, 4
                shr     ax, cl
                mov     si, ds
                add     si, ax
                mov     dx, cs:TOPPDB
                mov     bx, di
                mov     cx, 100h
                push    dx
                push    si
                push    es
                push    bx
                push    cx
                nop
                push    cs
                call    near ptr BUILDPDB
                mov     ax, si
                mov     es, ax
                xchg    ax, cs:HEADPDB
                mov     es:42h, ax
                les     di, [bp+6]
                push    ds
                push    si
                lds     si, es:[di+6]
                mov     di, 5Ch ; '\'
                pop     es
                mov     cx, ds
                or      cx, si
                jz      short loc_3741
                mov     cx, [si]
                inc     cx
                inc     cx
                cmp     cx, 24h ; '$'
                jbe     short loc_373F
                mov     cx, 24h ; '$'

loc_373F:                               ; CODE XREF: CREATETASK+D5↑j
                rep movsb

loc_3741:                               ; CODE XREF: CREATETASK+CC↑j
                mov     si, es
                pop     ds

loc_3744:                               ; CODE XREF: CREATETASK+87↑j
                push    ax
                cmp     cs:FEMM, 0
                jz      short loc_3753
                mov     word ptr ds:30h, 80h

loc_3753:                               ; CODE XREF: CREATETASK+E6↑j
                push    ds
                call    SAVESTATE
                push    ds
                call    INSERTTASK
                or      si, si
                jz      short loc_3763
                mov     ds:32h, si

loc_3763:                               ; CODE XREF: CREATETASK+F8↑j
                les     di, ds:2
                mov     ax, ds:32h
                pop     word ptr es:[di+8]
                mov     es:[di+4], ax
                mov     word ptr es:[di+10h], 0
                mov     word ptr ds:34h, 80h
                mov     ds:36h, ax
                mov     word ptr ds:6, 1
                mov     word ptr ds:7Eh, 4454h
                mov     ax, ds

loc_378F:                               ; CODE XREF: CREATETASK+43↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
CREATETASK      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

INSERTTASK      proc near               ; CODE XREF: CREATETASK+F3↑p
                                        ; BOOTSCHEDULE+62↓p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    ds
                mov     es, [bp+arg_0]
                mov     ax, cs:HEADTDB
                or      ax, ax
                jnz     short loc_37B2
                mov     cs:CURTDB, es
                jmp     short loc_37C3
; ---------------------------------------------------------------------------

loc_37B2:                               ; CODE XREF: INSERTTASK+D↑j
                mov     ds, ax
                mov     bl, es:8
                cmp     bl, ds:8
                jg      short loc_37CA
                mov     es:0, ax

loc_37C3:                               ; CODE XREF: INSERTTASK+14↑j
                mov     cs:HEADTDB, es
                jmp     short loc_37E7
; ---------------------------------------------------------------------------

loc_37CA:                               ; CODE XREF: INSERTTASK+21↑j
                                        ; INSERTTASK+3E↓j
                mov     ds, ax
                mov     ax, ds:0
                or      ax, ax
                jz      short loc_37DC
                mov     es, ax
                cmp     bl, es:8
                jg      short loc_37CA

loc_37DC:                               ; CODE XREF: INSERTTASK+35↑j
                mov     es, [bp+arg_0]
                mov     word ptr ds:0, es
                mov     es:0, ax

loc_37E7:                               ; CODE XREF: INSERTTASK+2C↑j
                pop     ds
                mov     sp, bp
                pop     bp
                retn    2
INSERTTASK      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DELETETASK      proc near               ; CODE XREF: STARTTASK+79↑p
                                        ; BOOTSCHEDULE+5E↓p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    ds
                mov     dx, [bp+arg_0]
                mov     ax, cs:HEADTDB
                mov     ds, ax
                cmp     ax, dx
                jnz     short loc_3808
                mov     ax, ds:0
                mov     cs:HEADTDB, ax
                jmp     short loc_381E
; ---------------------------------------------------------------------------

loc_3808:                               ; CODE XREF: DELETETASK+F↑j
                                        ; DELETETASK+25↓j
                mov     ds, ax
                mov     ax, ds:0
                or      ax, ax
                jz      short loc_381E
                cmp     ax, dx
                jnz     short loc_3808
                mov     es, ax
                mov     ax, es:0
                mov     ds:0, ax

loc_381E:                               ; CODE XREF: DELETETASK+18↑j
                                        ; DELETETASK+21↑j
                mov     ax, dx
                pop     ds
                mov     sp, bp
                pop     bp
                retn    2
DELETETASK      endp


; =============== S U B R O U T I N E =======================================


GROWSFT         proc near               ; CODE XREF: OPENFILE:loc_1F3A↑p
                                        ; SftThing+A2↓p
                push    ax
                push    bx
                push    cx
                push    dx
                push    si
                push    di
                push    es
                push    ds
                les     bx, cs:PFILETABLE
                mov     di, cs:FILEENTRYSIZE
                mov     ax, 2

loc_383C:                               ; CODE XREF: GROWSFT+34↓j
                les     bx, es:[bx]
                cmp     bx, 0FFFFh
                jz      short loc_385D
                lea     si, [bx+6]
                mov     cx, es:[bx+4]
                add     ah, cl

loc_384D:                               ; CODE XREF: GROWSFT+32↓j
                cmp     byte ptr es:[si], 0
                jnz     short loc_3857
                dec     al
                jz      short loc_38CF

loc_3857:                               ; CODE XREF: GROWSFT+2A↑j
                add     si, di
                loop    loc_384D
                jmp     short loc_383C
; ---------------------------------------------------------------------------

loc_385D:                               ; CODE XREF: GROWSFT+1B↑j
                cmp     ah, 0F5h
                jnb     short loc_38CF
                mov     ax, di
                shl     ax, 1
                shl     ax, 1
                shl     ax, 1
                add     ax, 6
                cwd
                mov     cx, 2040h
                mov     ds, cs:CURTDB
                mov     di, ss
                cmp     di, ds:4
                jz      short loc_389F
                mov     si, sp
                mov     ss, word ptr ds:4
                mov     sp, ds:2
                mov     bp, sp
                add     bp, 10h
                push    cx
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr GLOBALALLOC
                mov     ds:2, sp
                mov     ss, di
                mov     sp, si
                jmp     short loc_38A7
; ---------------------------------------------------------------------------

loc_389F:                               ; CODE XREF: GROWSFT+55↑j
                push    cx
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr GLOBALALLOC

loc_38A7:                               ; CODE XREF: GROWSFT+76↑j
                jcxz    short loc_38CF
                les     bx, cs:PFILETABLE
                mov     cx, 0FFFFh

loc_38B1:                               ; CODE XREF: GROWSFT+90↓j
                les     bx, es:[bx]
                cmp     es:[bx], cx
                jnz     short loc_38B1
                mov     word ptr es:[bx], 0
                mov     es:[bx+2], ax
                mov     es, ax
                mov     word ptr es:[bx+4], 8
                mov     es:0, cx

loc_38CF:                               ; CODE XREF: GROWSFT+2E↑j
                                        ; GROWSFT+39↑j ...
                pop     ds
                pop     es
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax

locret_38D7:                            ; CODE XREF: CLOSEOPENFILES+1F↓j
                retn
GROWSFT         endp


; =============== S U B R O U T I N E =======================================


CLOSEOPENFILES  proc near               ; CODE XREF: PROMPT+11↑p
                push    ax
                mov     ah, 0Dh
                int     21h             ; DOS - DISK RESET
                pop     ax
                sub     al, 41h ; 'A'
                cmp     cs:DOS_VERSION, 3
                jnb     short loc_38EA
                inc     al

loc_38EA:                               ; CODE XREF: CLOSEOPENFILES+E↑j
                les     bx, cs:PFILETABLE
                xor     dx, dx

loc_38F1:                               ; CODE XREF: CLOSEOPENFILES+A9↓j
                les     bx, es:[bx]
                cmp     bx, 0FFFFh
                jz      short locret_38D7
                lea     si, [bx+6]
                mov     cx, es:[bx+4]
                add     dx, cx

loc_3902:                               ; CODE XREF: CLOSEOPENFILES+A7↓j
                cmp     byte ptr es:[si], 0
                jz      short loc_397A
                cmp     cs:DOS_VERSION, 3
                jb      short loc_3922
                test    word ptr es:[si+5], 8080h
                jnz     short loc_397A
                lds     di, es:[si+7]
                cmp     al, [di]
                jnz     short loc_397A
                jmp     short loc_392F
; ---------------------------------------------------------------------------

loc_3922:                               ; CODE XREF: CLOSEOPENFILES+36↑j
                test    byte ptr es:[si+1Bh], 80h
                jnz     short loc_397A
                cmp     al, es:[si+3]
                jnz     short loc_397A

loc_392F:                               ; CODE XREF: CLOSEOPENFILES+48↑j
                push    si
                push    dx
                push    cx
                push    bx
                push    ax
                sub     dl, cl
                lds     di, cs:PCURRENTPDB
                push    word ptr [di]
                mov     ax, cs:HEADPDB

loc_3941:                               ; CODE XREF: CLOSEOPENFILES+96↓j
                mov     ds, ax
                cmp     word ptr ds:4Ah, 0
                jnz     short loc_3969
                mov     si, 18h
                mov     cx, 14h

loc_3950:                               ; CODE XREF: CLOSEOPENFILES:loc_3967↓j
                lodsb
                cmp     dl, al
                jnz     short loc_3967
                mov     bx, ds
                mov     ah, 50h ; 'P'
                int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                                        ; BX = segment address of new PSP
                mov     bx, si
                sub     bx, 19h
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                dec     byte ptr [si-1]

loc_3967:                               ; CODE XREF: CLOSEOPENFILES+7B↑j
                loop    loc_3950

loc_3969:                               ; CODE XREF: CLOSEOPENFILES+70↑j
                mov     ax, ds:42h
                or      ax, ax
                jnz     short loc_3941
                pop     bx
                mov     ah, 50h ; 'P'
                int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                                        ; BX = segment address of new PSP
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si

loc_397A:                               ; CODE XREF: CLOSEOPENFILES+2E↑j
                                        ; CLOSEOPENFILES+3E↑j ...
                add     si, cs:FILEENTRYSIZE
                loop    loc_3902
                jmp     loc_38F1
; ---------------------------------------------------------------------------
                retn
CLOSEOPENFILES  endp

;
; External Entry #33 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOCKCURRENTTASK
LOCKCURRENTTASK proc far
                mov     bx, sp          ; KERNEL_33
                mov     ax, ss:[bx+4]
                or      ax, ax
                jz      short loc_3993
                mov     ax, cs:CURTDB

loc_3993:                               ; CODE XREF: LOCKCURRENTTASK+8↑j
                mov     cs:LOCKTDB, ax
                retf    2
LOCKCURRENTTASK endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

SAVESTATE       proc near               ; CODE XREF: CREATETASK+EF↑p
                                        ; BOOTSCHEDULE+84↓p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                cld
                mov     ax, [bp+arg_0]
                mov     es, ax
                xor     ax, ax
                mov     ds, ax
                assume ds:cseg01
                mov     di, 20h ; ' '
                mov     si, 0
                movsw
                movsw
                movsw
                movsw
                movsw
                movsw
                mov     si, 0F8h
                movsw
                movsw
                mov     ds, [bp+arg_0]
                assume ds:nothing
                cmp     word ptr ds:1Ah, 0
                jz      short loc_39CA
                xor     ax, ax
                call    STATEXJUMP

loc_39CA:                               ; CODE XREF: SAVESTATE+29↑j
                les     bx, cs:PDMAADD
                mov     ax, es:[bx]
                mov     ds:34h, ax
                mov     ax, es:[bx+2]
                mov     ds:36h, ax
                les     bx, cs:PCNTCFLAG
                mov     al, es:[bx]
                mov     ds:38h, ax
                les     bx, cs:PERRMODE
                mov     al, es:[bx]
                mov     ds:3Bh, al
                les     bx, cs:PCURRENTPDB
                mov     ax, es:[bx]
                mov     ds:32h, ax
                test    byte ptr ds:3Ah, 80h
                jnz     short loc_3A23
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                mov     dl, al
                inc     dl
                or      al, 0C0h
                mov     ds:3Ah, al
                lea     si, ds:3Dh
                mov     byte ptr [si-1], 5Ch ; '\'
                mov     ah, 47h ; 'G'
                int     21h             ; DOS - 2+ - GET CURRENT DIRECTORY
                                        ; DL = drive (0=default, 1=A, etc.)
                                        ; DS:SI points to 64-byte buffer area
                jnb     short loc_3A23
                mov     byte ptr [si-1], 0

loc_3A23:                               ; CODE XREF: SAVESTATE+68↑j
                                        ; SAVESTATE+83↑j
                mov     di, ds:30h
                or      di, di
                jz      short loc_3A32
                push    ds
                pop     es
                mov     ax, 4E00h
                int     67h             ;  - LIM EMS - GET OR SET PAGE MAP
                                        ; DS:SI -> array holding information
                                        ; ES:DI -> array to receive information
                                        ; if getting mapping registers

loc_3A32:                               ; CODE XREF: SAVESTATE+8F↑j
                mov     ax, ds
                pop     ds
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    2
SAVESTATE       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

RESTORESTATE    proc near               ; CODE XREF: BOOTSCHEDULE+89↓p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                cld
                mov     ds, [bp+arg_2]
                mov     ax, [bp+arg_2]
                mov     ds, ax
                mov     si, 20h ; ' '
                xor     ax, ax
                mov     es, ax
                assume es:cseg01
                mov     di, 0
                movsw
                movsw
                movsw
                movsw
                movsw
                movsw
                mov     di, 0F8h
                movsw
                movsw
                les     bx, cs:PCNTCFLAG
                assume es:nothing
                mov     ax, ds:38h
                mov     es:[bx], al
                les     bx, cs:PERRMODE
                mov     al, ds:3Bh
                mov     es:[bx], al
                lds     dx, ds:34h
                mov     ah, 1Ah
                pushf
                cli
                call    cs:PREVINT21PROC
                mov     ds, [bp+arg_2]
                and     byte ptr ds:3Ah, 0BFh
                mov     cx, [bp+arg_0]
                jcxz    short loc_3ABA
                mov     es, cx
                mov     al, es:3Ah
                test    al, 40h
                jz      short loc_3ABA
                mov     ah, ds:3Ah
                and     ax, 3F3Fh
                cmp     al, ah
                jnz     short loc_3ABA
                lea     di, ds:3Dh
                mov     si, di

loc_3AAC:                               ; CODE XREF: RESTORESTATE+76↓j
                cmpsb
                jnz     short loc_3ABA
                cmp     byte ptr [si-1], 0
                jnz     short loc_3AAC
                or      byte ptr ds:3Ah, 40h

loc_3ABA:                               ; CODE XREF: RESTORESTATE+52↑j
                                        ; RESTORESTATE+5C↑j ...
                mov     bx, ds:32h
                cmp     word ptr ds:1Ah, 0
                jz      short loc_3ACA
                mov     al, 1
                call    STATEXJUMP

loc_3ACA:                               ; CODE XREF: RESTORESTATE+86↑j
                mov     ah, 50h ; 'P'
                pushf
                cli
                call    cs:PREVINT21PROC
                mov     si, ds:30h
                or      si, si
                jz      short loc_3AE0
                mov     ax, 4E01h
                int     67h             ;  - LIM EMS - GET OR SET PAGE MAP
                                        ; DS:SI -> array holding information
                                        ; ES:DI -> array to receive information
                                        ; if setting mapping registers

loc_3AE0:                               ; CODE XREF: RESTORESTATE+9C↑j
                mov     ax, ds
                mov     dx, [bp+arg_0]
                pop     ds
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
RESTORESTATE    endp


; =============== S U B R O U T I N E =======================================


STATEXJUMP      proc near               ; CODE XREF: SAVESTATE+2D↑p
                                        ; RESTORESTATE+8A↑p
                cbw
                push    ds
                mov     cx, ds          ; sets dx to ds+0004
                                        ; sets cx to 8087 found state
                                        ; calls es+0018
                                        ; likely to do with leaving after saving/restoring state
                                        ; possibly a loc not a function
                mov     es, cx
                mov     ds, word ptr ds:4
                mov     cx, cs:F8087
                call    dword ptr es:18h
                pop     ds
                retn
STATEXJUMP      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

RESCHEDULE      proc far                ; CODE XREF: WAITEVENT+29↓j
                                        ; YIELD+24↓j
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    ax              ; this function is DESIGNED to run into BOOTSCHEDULE!!!!
RESCHEDULE      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


BOOTSCHEDULE    proc far                ; CODE XREF: BOOTSCHEDULE+A↓j
                                        ; BOOTSCHEDULE+E3↓j ...
                mov     ax, cs:HEADTDB

loc_3B10:                               ; CODE XREF: BOOTSCHEDULE+16↓j
                                        ; BOOTSCHEDULE+51↓j
                or      ax, ax
                jnz     short loc_3B18
                int     28h             ; DOS 2+ internal - KEYBOARD BUSY LOOP
                jmp     short near ptr BOOTSCHEDULE
; ---------------------------------------------------------------------------

loc_3B18:                               ; CODE XREF: BOOTSCHEDULE+6↑j
                mov     ds, ax
                mov     ax, ds:0
                cmp     word ptr ds:6, 0
                jz      short loc_3B10
                mov     di, ds
                mov     si, cs:CURTDB
                cmp     di, si
                jnz     short loc_3B36
                pop     ax
                pop     di
                pop     si
                pop     ds
                pop     bp
                dec     bp
                retf
; ---------------------------------------------------------------------------

loc_3B36:                               ; CODE XREF: BOOTSCHEDULE+21↑j
                push    cx
                mov     cx, cs:LOCKTDB
                jcxz    short loc_3B42
                cmp     cx, di
                jnz     short loc_3BB5

loc_3B42:                               ; CODE XREF: BOOTSCHEDULE+30↑j
                push    es
                push    bx
                les     bx, cs:PINDOS
                cmp     byte ptr es:[bx], 0
                jnz     short loc_3B5A
                les     bx, cs:PERRMODE
                cmp     byte ptr es:[bx], 0
                jz      short loc_3B5F

loc_3B5A:                               ; CODE XREF: BOOTSCHEDULE+41↑j
                pop     bx
                pop     es
                pop     cx
                jmp     short loc_3B10
; ---------------------------------------------------------------------------

loc_3B5F:                               ; CODE XREF: BOOTSCHEDULE+4C↑j
                inc     cs:INSCHEDULER
                push    dx
                inc     byte ptr ds:8
                push    ds
                call    DELETETASK
                push    ds
                call    INSERTTASK
                dec     byte ptr ds:8
                cli
                mov     es, si
                xor     si, si
                cmp     word ptr es:7Eh, 4454h
                jnz     short loc_3B93
                mov     word ptr es:4, ss
                mov     es:2, sp
                mov     si, es
                push    si
                call    SAVESTATE

loc_3B93:                               ; CODE XREF: BOOTSCHEDULE+75↑j
                push    ds
                push    si
                call    RESTORESTATE
                mov     ss, word ptr ds:4
                mov     sp, ds:2
                mov     cs:CURTDB, ds
                dec     cs:INSCHEDULER
                sti
                cmp     word ptr ds:16h, 0
                jnz     short loc_3BBD

loc_3BB2:                               ; CODE XREF: BOOTSCHEDULE+D5↓j
                pop     dx
                pop     bx
                pop     es

loc_3BB5:                               ; CODE XREF: BOOTSCHEDULE+34↑j
                pop     cx
                pop     ax
                pop     di
                pop     si
                pop     ds
                pop     bp
                dec     bp
                retf
; ---------------------------------------------------------------------------

loc_3BBD:                               ; CODE XREF: BOOTSCHEDULE+A4↑j
                mov     ax, 10h
                mov     bp, sp
                add     bp, 10h
                mov     cx, 1
                xchg    cx, ds:6
                dec     cx
                push    cx
                push    ds
                push    ax
                push    si
                push    cx
                push    word ptr ds:12h
                call    dword ptr ds:14h
                pop     cx
                add     ds:6, cx
                or      ax, ax
                jz      short loc_3BB2
                push    ds
                call    DELETETASK
                push    ds
                call    INSERTTASK
                pop     dx
                pop     bx
                pop     es
                pop     cx
                jmp     near ptr BOOTSCHEDULE
BOOTSCHEDULE    endp ; sp-analysis failed

;
; External Entry #30 into the Module
; Attributes (0001): Fixed Exported
;
; [0000003E BYTES: COLLAPSED FUNCTION WAITEVENT. PRESS CTRL-NUMPAD+ TO EXPAND]
;
; External Entry #29 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public YIELD
YIELD           proc far                ; CODE XREF: STARTTASK+69↑p
                inc     bp              ; KERNEL_29
                push    bp
                mov     bp, sp
                push    ds
                xor     ax, ax
                cmp     cs:INSCHEDULER, al
                jnz     short loc_3C8C
                mov     ds, cs:CURTDB   ; get the current task data block
                cmp     word ptr ds:7Eh, 4454h ; is 0x7E in the TDB 'MZ' header?
                jnz     short not_task_handle
                mov     ax, offset loc_3C85
                inc     word ptr ds:6
                push    cs
                push    ax
                jmp     near ptr RESCHEDULE
; ---------------------------------------------------------------------------

not_task_handle:                        ; CODE XREF: YIELD+19↑j
                mov     ax, 301h
                push    ax
                mov     ax, offset SZERRYIELDINVALIDTASKHANDLE ; "YIELD: Invalid task handle"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short loc_3C85
; ---------------------------------------------------------------------------
SZERRYIELDINVALIDTASKHANDLE db 'YIELD: Invalid task handle',0
                                        ; DATA XREF: YIELD+2B↑o
                db 24h
; ---------------------------------------------------------------------------

loc_3C85:                               ; CODE XREF: YIELD+37↑j
                                        ; DATA XREF: YIELD+1B↑o
                dec     word ptr ds:6
                mov     ax, 0FFFFh

loc_3C8C:                               ; CODE XREF: YIELD+C↑j
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf
YIELD           endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


GETTASKHANDLE_VARIANT_UNDOCUMENTED proc near ; CODE XREF: SETTASKQUEUE↓p
                                        ; SETPRIORITY↓p
                mov     bx, sp
                mov     ax, ss:[bx+8]
                mov     bx, ss:[bx+6]
                jmp     short GETTASKHANDLE
GETTASKHANDLE_VARIANT_UNDOCUMENTED endp


; =============== S U B R O U T I N E =======================================


GETTASKHANDLE_VARIANT_UNDOCUMENTED_2 proc near ; CODE XREF: POSTEVENT↓p
                                        ; GETTASKQUEUE↓p
                mov     bx, sp
                mov     ax, ss:[bx+6]
GETTASKHANDLE_VARIANT_UNDOCUMENTED_2 endp


; =============== S U B R O U T I N E =======================================


GETTASKHANDLE   proc near               ; CODE XREF: WAITEVENT+8↑p
                                        ; GETTASKHANDLE_VARIANT_UNDOCUMENTED+A↑j ...
                or      ax, ax
                jnz     short loc_3CAF
                mov     ax, cs:CURTDB

loc_3CAF:                               ; CODE XREF: GETTASKHANDLE+2↑j
                mov     es, ax
                cmp     word ptr es:7Eh, 4454h
                jnz     short loc_3CBB
                retn
; ---------------------------------------------------------------------------

loc_3CBB:                               ; CODE XREF: GETTASKHANDLE+11↑j
                mov     ax, 301h
                push    ax
                mov     ax, offset SZERRINVALIDTASKHANDLE ; "GetTaskHandle: Invalid task handle"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short locret_3CF1
; ---------------------------------------------------------------------------
SZERRINVALIDTASKHANDLE db 'GetTaskHandle: Invalid task handle',0
                                        ; DATA XREF: GETTASKHANDLE+18↑o
                db 24h
; ---------------------------------------------------------------------------

locret_3CF1:                            ; CODE XREF: GETTASKHANDLE+24↑j
                retn
GETTASKHANDLE   endp

;
; External Entry #31 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public POSTEVENT
POSTEVENT       proc far
                call    GETTASKHANDLE_VARIANT_UNDOCUMENTED_2 ; KERNEL_31
                inc     word ptr es:6
                retf    2
POSTEVENT       endp

;
; External Entry #35 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETTASKQUEUE
GETTASKQUEUE    proc far
                call    GETTASKHANDLE_VARIANT_UNDOCUMENTED_2 ; KERNEL_35
                mov     ax, es:12h
                retf    2
GETTASKQUEUE    endp

; ---------------------------------------------------------------------------
;
; External Entry #38 into the Module
; Attributes (0001): Fixed Exported
;

                public SETTASKSIGNALPROC
SETTASKSIGNALPROC:
                mov     cl, 14h
; ---------------------------------------------------------------------------
                db 0BBh
; ---------------------------------------------------------------------------
;
; External Entry #40 into the Module
; Attributes (0001): Fixed Exported
;

                public SETTASKINTERCHANGE
SETTASKINTERCHANGE:
                mov     cl, 1Ch
; ---------------------------------------------------------------------------
                db 0BBh
;
; External Entry #39 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public SETTASKSWITCHPROC
SETTASKSWITCHPROC proc far
                mov     cl, 18h
                mov     bx, sp
                mov     ax, ss:[bx+8]
                call    GETTASKHANDLE
                mov     ax, ss:[bx+4]
                mov     dx, ss:[bx+6]
                xor     bx, bx
                mov     bl, cl
                xchg    ax, es:[bx]
                xchg    dx, es:[bx+2]
                retf    6
SETTASKSWITCHPROC endp

;
; External Entry #34 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public SETTASKQUEUE
SETTASKQUEUE    proc far
                call    GETTASKHANDLE_VARIANT_UNDOCUMENTED ; KERNEL_34
                mov     ax, bx
                xchg    ax, es:12h
                retf    4
SETTASKQUEUE    endp

;
; External Entry #32 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public SETPRIORITY
SETPRIORITY     proc far
                call    GETTASKHANDLE_VARIANT_UNDOCUMENTED ; KERNEL_32
                add     bl, es:8
                cmp     bl, 0E0h
                jge     short loc_3D4A
                mov     bl, 0E0h

loc_3D4A:                               ; CODE XREF: SETPRIORITY+B↑j
                cmp     bl, 0Fh
                jle     short loc_3D51
                mov     bl, 0Fh

loc_3D51:                               ; CODE XREF: SETPRIORITY+12↑j
                push    bx
                inc     bx
                mov     es:8, bl
                push    es
                push    es
                call    DELETETASK
                push    ax
                call    INSERTTASK
                pop     es

loc_3D62:
                dec     byte ptr es:8
                pop     ax
                cbw
                retf    4
SETPRIORITY     endp

;
; External Entry #102 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public DOS3CALL
DOS3CALL        proc far
                int     21h             ; KERNEL_102
                retf
DOS3CALL        endp

;
; External Entry #103 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public NETBIOSCALL
NETBIOSCALL     proc far
                int     5Ch             ; KERNEL_103
                retf
NETBIOSCALL     endp

; ---------------------------------------------------------------------------
word_3D72       dw 0                    ; DATA XREF: ENABLEDOS+6↓w
                                        ; DISABLEDOS+12↓w ...
word_3D74       dw 0                    ; DATA XREF: INT21HANDLER+25↓w
                                        ; INT21HANDLER+35↓r ...
                db 0
                db 0
                db 0
                db 0
INT21_HOOK_TABLE db 0                   ; DATA XREF: INT21HANDLER+A4↓w
                                        ; INT21HANDLER:loc_413F↓r ...
                                        ; Int 21h hook table. Re-implements DOS API for windows use.
                                        ; 3 byte format:
                                        ; [BYTE] int 21h function ID
                                        ; [WORD PTR] ptr to function that handles it in kernel code seg
                db 0
                db 2                    ; Int 21/AH=02h - DOS 1+ - WRITE CHARACTER TO STANDARD OUTPUT
                dw offset DOSPrintCharHook
                db 9                    ; Int 21/AH=09h - DOS 1+ - WRITE STRING TO STANDARD OUTPUT
                dw offset DOSPrintStringHook
                db 40h                  ; Int 21/AH=40h - DOS 2+ - WRITE - WRITE TO FILE OR DEVICE
                dw offset DOSWriteHook
                db 3Eh                  ; Int 21/AH=3Eh - DOS 2+ - CLOSE - CLOSE FILE
                dw offset DOSGeneralFileHook
                db 42h                  ; Int 21/AH=42h - DOS 2+ - LSEEK - SET CURRENT FILE POSITION
                dw offset DOSGeneralFileHook
                db 45h                  ; Int 21/AH=45h - DOS 2+ - DUP - DUPLICATE FILE HANDLE
                dw offset DOSGeneralFileHook
                db 46h                  ; Int 21/AH=46h - DOS 2+ - DUP2, FORCEDUP - FORCE DUPLICATE FILE HANDLE
                dw offset DOSGeneralFileHook
                db 57h                  ; Int 21/AX=5700h - DOS 2+ - GET FILE'S LAST-WRITTEN DATE AND TIME
                                        ; Int 21/AX=5701h - DOS 2+ - SET FILE'S LAST-WRITTEN DATE AND TIME
                dw offset DOSGeneralFileHook
                db 5Ch                  ; Int 21/AH=5Ch - DOS 3.0+ - FLOCK - RECORD LOCKING
                dw offset DOSGeneralFileHook
                db 39h                  ; Int 21/AH=39h - DOS 2+ - MKDIR - CREATE SUBDIRECTORY
                dw offset DOSGeneralFileHook2
                db 3Ah                  ; Int 21/AH=3Ah - DOS 2+ - RMDIR - REMOVE SUBDIRECTORY
                dw offset DOSGeneralFileHook2
                db 3Ch                  ; Int 21/AH=3Ch - DOS 2+ - CREAT - CREATE OR TRUNCATE FILE
                dw offset DOSGeneralFileHook2
                db 3Dh                  ; Int 21/AH=3Dh - DOS 2+ - OPEN - OPEN EXISTING FILE
                dw offset DOSGeneralFileHook2
                db 41h                  ; Int 21/AH=41h - DOS 2+ - UNLINK - DELETE FILE
                dw offset DOSGeneralFileHook2
                db 43h                  ; Int 21/AX=4300h - DOS 2+ - GET FILE ATTRIBUTES
                                        ; Int 21/AX=4301h - DOS 2+ - CHMOD - SET FILE ATTRIBUTES
                dw offset DOSGeneralFileHook2
                db 4Eh                  ; Int 21/AH=4Eh - DOS 2+ - FINDFIRST - FIND FIRST MATCHING FILE
                dw offset DOSGeneralFileHook2
                db 56h                  ; Int 21/AH=56h - DOS 2+ - RENAME - RENAME FILE
                dw offset DOSRenameHook
                db 5Ah                  ; Int 21/AH=5Ah - DOS 3.0+ - CREATE TEMPORARY FILE
                dw offset DOSGeneralFileHook2
                db 5Bh                  ; Int 21/AH=5Bh - DOS 3.0+ - CREATE NEW FILE
                dw offset DOSGeneralFileHook2
                db 47h                  ; Int 21/AH=47h - DOS 2+ - CWD - GET CURRENT DIRECTORY
                dw offset DOSCwdHook
                db 36h                  ; Int 21/AH=36h - DOS 2+ - GET FREE DISK SPACE
                dw offset DOSDiskHook
                db 0Fh                  ; Int 21/AH=0Fh - DOS 1+ - OPEN FILE USING FCB
                dw offset DOSFcbHook
                db 11h                  ; Int 21/AH=11h - DOS 1+ - FIND FIRST MATCHING FILE USING FCB
                dw offset DOSFcbHook
                db 13h                  ; Int 21/AH=13h - DOS 1+ - DELETE FILE USING FCB
                dw offset DOSFcbHook
                db 16h                  ; Int 21/AH=16h - DOS 1+ - CREATE OR TRUNCATE FILE USING FCB
                dw offset DOSFcbHook
                db 17h                  ; Int 21/AH=17h - DOS 1+ - RENAME FILE USING FCB
                dw offset DOSFcbHook
                db 23h                  ; Int 21/AH=23h - DOS 1+ - GET FILE SIZE FOR FCB
                dw offset DOSFcbHook
                db 5Fh                  ; Int 21/AX=5F00h - DOS 3.1+ network - GET REDIRECTION MODE
                                        ; Int 21/AX=5F01h - DOS 3.1+ network - SET REDIRECTION MODE
                                        ; Int 21/AX=5F02h - DOS 3.1+ network - GET REDIRECTION LIST ENTRY
                                        ; Int 21/AX=5F03h - DOS 3.1+ network - REDIRECT DEVICE
                                        ; Int 21/AX=5F04h - DOS 3.1+ network - CANCEL REDIRECTION
                dw offset DOSNetRedirectorHook
                db 32h                  ; Int 21/AH=32h - DOS 2+ - GET DOS DRIVE PARAMETER BLOCK FOR SPECIFIC DRIVE
                dw offset DOSDiskHook
                db 60h                  ; Int 21/AH=60h - DOS 3.0+ - TRUENAME - CANONICALIZE FILENAME OR PATH
                dw offset DOSTruenameHook
                db 6                    ; Int 21/AH=06h - DOS 1+ - DIRECT CONSOLE OUTPUT
                                        ; Int 21/AH=06h/DL=FFh - DOS 1+ - DIRECT CONSOLE INPUT
                dw offset DOSDirectOutHook
                db 0Bh                  ; Int 21/AH=0Bh - DOS 1+ - GET STDIN STATUS
                dw offset DOSStdinHook
                db 44h                  ; Int 21/AX=4400h - DOS 2+ - IOCTL - GET DEVICE INFORMATION
                                        ; Int 21/AX=4401h - DOS 2+ - IOCTL - SET DEVICE INFORMATION
                                        ; Int 21/AX=4402h - DOS 2+ - IOCTL - READ FROM CHARACTER DEVICE CONTROL CHANNEL
                                        ; Int 21/AX=4403h - DOS 2+ - IOCTL - WRITE TO CHARACTER DEVICE CONTROL CHANNEL
                                        ; Int 21/AX=4404h - DOS 2+ - IOCTL - READ FROM BLOCK DEVICE CONTROL CHANNEL
                                        ; Int 21/AX=4405h - DOS 2+ - IOCTL - WRITE TO BLOCK DEVICE CONTROL CHANNEL
                                        ; Int 21/AX=4406h - DOS 2+ - IOCTL - GET INPUT STATUS
                                        ; Int 21/AX=4407h - DOS 2+ - IOCTL - GET OUTPUT STATUS
                                        ; Int 21/AX=4408h - DOS 3.0+ - IOCTL - CHECK IF BLOCK DEVICE REMOVABLE
                                        ; Int 21/AX=4409h - DOS 3.1+ - IOCTL - CHECK IF BLOCK DEVICE REMOTE
                                        ; Int 21/AX=440Ah - DOS 3.1+ - IOCTL - CHECK IF HANDLE IS REMOTE
                                        ; Int 21/AX=440Bh - DOS 3.1+ - IOCTL - SET SHARING RETRY COUNT
                                        ; Int 21/AX=440Ch - DOS 3.2+ - IOCTL - GENERIC CHARACTER DEVICE REQUEST
                                        ; Int 21/AX=440Dh - DOS 3.2+ - IOCTL - GENERIC BLOCK DEVICE REQUEST
                dw offset DOSIoctlHook
                db 7                    ; Int 21/AH=07h - DOS 1+ - DIRECT CHARACTER INPUT, WITHOUT ECHO
                dw offset DOSDirectNoEchoHook
                db 8                    ; Int 21/AH=08h - DOS 1+ - CHARACTER INPUT WITHOUT ECHO
                dw offset DOSStdInNoEchoHook
                db 0Ah                  ; Int 21/AH=0Ah - DOS 1+ - BUFFERED INPUT
                dw offset DOSBufferedInputHook
                db 0Ch                  ; Int 21/AH=0Ch - DOS 1+ - FLUSH BUFFER AND READ STANDARD INPUT
                dw offset DOSFlushBufferStdinHook
                db 1                    ; Int 21/AH=01h - DOS 1+ - READ CHARACTER FROM STANDARD INPUT, WITH ECHO
                dw offset DOSStdinHook
                db 3Fh                  ; Int 21/AH=3Fh - DOS 2+ - READ - READ FROM FILE OR DEVICE
                dw offset DOSReadHook
                db 0Eh                  ; Int 21/AH=0Eh - DOS 1+ - SELECT DEFAULT DRIVE
                dw offset DOSSelectDefaultDriveHook
                db 3Bh                  ; Int 21/AH=3Bh - DOS 2+ - CHDIR - SET CURRENT DIRECTORY
                dw offset DOSChdirHook
                db 25h                  ; Int 21/AH=25h - DOS 1+ - SET INTERRUPT VECTOR
                dw offset DOSSetInterruptVectorHook
                db 48h                  ; Int 21/AH=48h - DOS 2+ - ALLOCATE MEMORY
                dw offset DOSAllocMemoryHook
                db 49h                  ; Int 21/AH=49h - DOS 2+ - FREE MEMORY
                dw offset DOSFreeMemoryHook
                db 4Ah                  ; Int 21/AH=4Ah - DOS 2+ - RESIZE MEMORY BLOCK
                dw offset DOSResizeMemoryHook
                db 4Bh                  ; Int 21/AH=4Bh - DOS 2+ - EXEC - LOAD AND/OR EXECUTE PROGRAM
                dw offset DOSExecHook
                db 0                    ; Int 21/AH=00h - DOS 1+ - TERMINATE PROGRAM
                dw offset DOSTerminateOldHook
                db 4Ch                  ; Int 21/AH=4Ch - DOS 2+ - EXIT - TERMINATE WITH RETURN CODE
                dw offset DOSTerminateHook
                db 31h                  ; Int 21/AH=31h - DOS 2+ - TERMINATE AND STAY RESIDENT
                dw offset DOSTSRHook
LAST_INT21_FUNCTION_NUMBER db 0         ; DATA XREF: INT21HANDLER+3↓w
                dw offset loc_4296
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
                db 0
;
; External Entry #101 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public NOHOOKDOSCALL
NOHOOKDOSCALL   proc far
                pushf                   ; KERNEL_101
                cli
                call    cs:PREVINT21PROC
                retf
NOHOOKDOSCALL   endp

;
; External Entry #41 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ENABLEDOS
ENABLEDOS       proc far                ; CODE XREF: ENABLEINT21+D↓p
                push    si              ; KERNEL_41
                mov     si, 3D7Ch
                mov     dx, si
                xchg    si, cs:word_3D72
                cmp     si, dx
                jnz     short loc_3E46
                jmp     loc_3EE7
; ---------------------------------------------------------------------------

loc_3E46:                               ; CODE XREF: ENABLEDOS+D↑j
                les     bx, cs:PCNTCFLAG
                xor     ax, ax
                xchg    al, es:[bx]
                mov     cs:FBREAK, al
                les     bx, cs:PCURRENTPDB
                push    word ptr es:[bx]
                mov     bx, cs:TOPPDB
                mov     ah, 50h ; 'P'
                int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                                        ; BX = segment address of new PSP

loc_3E65:                               ; CODE XREF: ENABLEDOS+3C↓j
                mov     ah, 6
                mov     dl, 0FFh
                pushf
                cli
                call    cs:PREVINT21PROC
                jnz     short loc_3E65
                pop     bx
                mov     ah, 50h ; 'P'
                int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                                        ; BX = segment address of new PSP
                cmp     si, 3DD6h
                jz      short loc_3E96
                mov     ah, 52h ; 'R'
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     ax, 48BEh
                xchg    ax, es:[bx+0Ch]
                mov     word ptr cs:PREVBCON, ax
                mov     ax, cs
                xchg    ax, es:[bx+0Eh]
                mov     word ptr cs:PREVBCON+2, ax

loc_3E96:                               ; CODE XREF: ENABLEDOS+47↑j
                mov     ax, 3524h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr cs:PREVINT24PROC, bx
                mov     word ptr cs:PREVINT24PROC+2, es
                push    ds
                push    cs
                pop     ds
                assume ds:cseg01
                mov     dx, offset INT24HANDLER
                mov     ax, 2524h
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                mov     bx, 2
                xor     ax, ax
                push    bx
                push    ax
                call    cs:PSYSPROC
                push    cs
                pop     ds
                mov     bx, 3E12h
                xor     cx, cx

loc_3EC3:                               ; CODE XREF: ENABLEDOS+B0↓j
                push    cx
                push    bx
                mov     dx, 1
                push    dx
                push    cx
                call    cs:PSYSPROC
                pop     bx
                pop     cx
                mov     byte ptr [bx], 0
                cmp     ax, 2
                jnb     short loc_3EDF
                or      dx, dx
                jz      short loc_3EDF
                mov     [bx], dl

loc_3EDF:                               ; CODE XREF: ENABLEDOS+A3↑j
                                        ; ENABLEDOS+A7↑j
                inc     bx
                inc     cx
                cmp     cx, 1Ah
                jb      short loc_3EC3
                pop     ds
                assume ds:nothing

loc_3EE7:                               ; CODE XREF: ENABLEDOS+F↑j
                pop     si
                retf
ENABLEDOS       endp

;
; External Entry #42 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public DISABLEDOS
DISABLEDOS      proc far                ; CODE XREF: DISABLEINT21+11↓p

arg_0           = byte ptr  6

                inc     bp              ; KERNEL_42
                push    bp
                mov     bp, sp
                push    ds
                mov     bx, 2
                mov     ax, 1
                push    bx
                push    ax
                call    cs:PSYSPROC
                mov     cs:word_3D72, 3DD6h
                lds     dx, cs:PREVINT24PROC
                mov     ax, 2524h
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                mov     dl, cs:FBREAK
                mov     ax, 3301h
                int     21h             ; DOS - EXTENDED CONTROL-BREAK CHECKING
                                        ; AL = 00h get state / 01h set state / 02h set AND get
                                        ; DL = 00h for OFF or 01h for ON
                cmp     [bp+arg_0], 0
                jnz     short loc_3F34
                mov     cs:word_3D72, 3DF1h
                mov     ah, 52h ; 'R'
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                lds     ax, cs:PREVBCON
                mov     es:[bx+0Ch], ax
                mov     word ptr es:[bx+0Eh], ds

loc_3F34:                               ; CODE XREF: DISABLEDOS+31↑j
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
DISABLEDOS      endp


; =============== S U B R O U T I N E =======================================


ENABLEINT21     proc near               ; CODE XREF: SLOWBOOT+89↓p
                                        ; FASTBOOT+3E8↓p
                mov     al, 1
                xchg    al, cs:FINT21
                or      al, al
                jnz     short locret_3F75
                nop
                push    cs
                call    near ptr ENABLEDOS
                xor     bx, bx
                mov     es, bx
                assume es:cseg01
                mov     bx, 80h
                cli
                mov     word ptr es:[bx], offset INT20HANDLER
                mov     word ptr es:[bx+2], cs
                mov     word ptr es:[bx+4], offset INT21HANDLER
                mov     word ptr es:[bx+6], cs
                mov     word ptr es:[bx+1Ch], offset INT27HANDLER
                mov     word ptr es:[bx+1Eh], cs
                sti

locret_3F75:                            ; CODE XREF: ENABLEINT21+9↑j
                retn
ENABLEINT21     endp


; =============== S U B R O U T I N E =======================================


DISABLEINT21    proc near               ; CODE XREF: EXITKERNEL+24↓p
                xor     ax, ax
                xchg    al, cs:FINT21
                or      al, al
                jz      short locret_3FC4
                cli
                xor     ax, ax
                push    ax
                nop
                push    cs
                call    near ptr DISABLEDOS
                xor     bx, bx
                mov     es, bx
                mov     bx, 80h
                mov     ax, word ptr cs:PREVINT20PROC ; ""
                mov     dx, word ptr cs:PREVINT20PROC+2 ; ""
                mov     es:[bx], ax     ; ES:[BX] contains ISR
                mov     es:[bx+2], dx
                mov     ax, word ptr cs:PREVINT21PROC
                mov     dx, word ptr cs:PREVINT21PROC+2
                mov     es:[bx+4], ax
                mov     es:[bx+6], dx
                mov     ax, word ptr cs:PREVINT27PROC ; ""
                mov     dx, word ptr cs:PREVINT27PROC+2 ; ""
                mov     es:[bx+1Ch], ax
                mov     es:[bx+1Eh], dx
                sti

locret_3FC4:                            ; CODE XREF: DISABLEINT21+9↑j
                retn
DISABLEINT21    endp

;
; External Entry #2 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public EXITKERNEL
EXITKERNEL      proc near               ; CODE XREF: FATALEXIT+10B↓p
                                        ; BOOTSTRAP+291↓p ...
                mov     si, sp          ; KERNEL_2
                mov     si, ss:[si+4]
                xor     ax, ax
                mov     es, ax
                mov     bx, 0FCh
                mov     ax, word ptr cs:PREVINT3FPROC
                mov     es:[bx], ax
                mov     ax, word ptr cs:PREVINT3FPROC+2
                mov     es:[bx+2], ax
                cmp     word ptr cs:PREVINT21PROC+2, 0
                jz      short loc_3FEC
                call    DISABLEINT21

loc_3FEC:                               ; CODE XREF: EXITKERNEL+22↑j
                mov     ax, 0C00h
                int     21h             ; DOS - CLEAR KEYBOARD BUFFER
                                        ; AL must be 01h, 06h, 07h, 08h, or 0Ah.
                mov     bx, cs:HEADPDB

loc_3FF6:                               ; CODE XREF: EXITKERNEL+4A↓j
                mov     es, bx
                assume es:nothing
                mov     ah, 50h ; 'P'
                int     21h             ; DOS - 2+ internal - SET PSP SEGMENT
                                        ; BX = segment address of new PSP
                mov     cx, 14h

loc_3FFF:                               ; CODE XREF: EXITKERNEL+41↓j
                mov     bx, cx
                dec     bx
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                loop    loc_3FFF
                mov     bx, es:42h
                or      bx, bx
                jnz     short loc_3FF6
                les     bx, cs:PSFTLINK
                mov     cx, es
                jcxz    short loc_4025
                mov     word ptr es:[bx], 0FFFFh
                mov     word ptr es:[bx+2], 0

loc_4025:                               ; CODE XREF: EXITKERNEL+53↑j
                cmp     word ptr cs:PSWAPHOOK+2, 0
                jz      short loc_4036
                xor     ax, ax
                push    ax
                push    ax
                call    cs:PSWAPHOOK

loc_4036:                               ; CODE XREF: EXITKERNEL+66↑j
                mov     ax, si
                mov     ah, 4Ch ; 'L'
                int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
EXITKERNEL      endp                    ; AL = exit code

;
; External Entry #99 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETLPERRMODE
GETLPERRMODE    proc far
                mov     ax, word ptr cs:PERRMODE ; KERNEL_99
                mov     dx, word ptr cs:PERRMODE+2
                retf
GETLPERRMODE    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

PDB_CALL_SYSTEM_ENTRY proc far

var_s4          = word ptr  4
arg_0           = word ptr  0Ah

                push    ds
                push    bp
                push    ax
                mov     bp, sp
                xor     ax, ax
                mov     ds, ax
                assume ds:cseg01
                mov     ds, word ptr PREVINT3FPROC
                assume ds:nothing
                mov     ax, [bp+var_s4]
                cli
                mov     ds:3D78h, ax
                mov     ax, [bp+8]
                mov     ds:3D76h, ax
                mov     ax, [bp+arg_0]
                mov     ds:3D74h, ax
                pop     ax
                pop     bp
                add     sp, 8
                pushf
                push    word ptr ds:3D76h
                push    word ptr ds:3D74h
                push    ds
                mov     word ptr ds:3D76h, offset INT21HANDLER
                push    word ptr ds:3D76h
                mov     ds, word ptr ds:3D78h
                sti
                mov     ah, cl
                retf
PDB_CALL_SYSTEM_ENTRY endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


INT27HANDLER    proc near               ; DATA XREF: ENABLEINT21+2B↑o
                mov     ax, 3100h       ; MS-DOS INT 21h,AH=31h (Terminate and Stay Resident)
                jmp     short INT21HANDLER
INT27HANDLER    endp


; =============== S U B R O U T I N E =======================================


INT20HANDLER    proc near               ; DATA XREF: ENABLEINT21+18↑o
                xor     ax, ax
INT20HANDLER    endp


; =============== S U B R O U T I N E =======================================


INT21HANDLER    proc near               ; CODE XREF: INT27HANDLER+3↑j
                                        ; INT21HANDLER:loc_415B↓j
                                        ; DATA XREF: ...
                inc     bp
                push    bp
                push    ds
                mov     cs:LAST_INT21_FUNCTION_NUMBER, ah
                mov     bp, cs:word_3D72
                sub     bp, 3

loc_409E:                               ; CODE XREF: INT21HANDLER+17↓j
                add     bp, 3
                cmp     ah, cs:[bp+0]
                jnz     short loc_409E
                push    word ptr cs:[bp+1]
                mov     bp, sp
                add     bp, 4
                sti
                retn
; ---------------------------------------------------------------------------

loc_40B2:                               ; CODE XREF: DOSIoctlHook+16↓p
                                        ; DOSIoctlHook:DOSWriteHook↓p ...
                cli
                pop     cs:word_3D74
                push    dx
                push    es
                push    bx
                push    ax
                push    cx
                push    si
                push    di
                and     byte ptr [bp+6], 0FEh
                push    cs:word_3D74
                cld
                sti
                retn
; ---------------------------------------------------------------------------

loc_40CB:                               ; CODE XREF: INT21HANDLER+A1↓p
                                        ; DOSIoctlHook:loc_4410↓p ...
                cli
                pop     cs:word_3D74
                pop     di
                pop     si
                pop     cx
                pop     ax
                pop     bx
                pop     es
                pop     dx
                pop     ds
                pop     bp
                dec     bp
                jmp     cs:word_3D74
; ---------------------------------------------------------------------------

DOSTSRHook:                             ; DATA XREF: cseg01:3E0D↑o
                mov     ah, 1Bh
                jmp     short loc_40E7
; ---------------------------------------------------------------------------

loc_40E4:                               ; CODE XREF: DOSIoctlHook+2E↓p
                                        ; DOSIoctlHook+3E↓p ...
                or      ah, 80h

loc_40E7:                               ; CODE XREF: INT21HANDLER+54↑j
                                        ; DOSIoctlHook+67↓p ...
                push    ds
                pop     es
                mov     ds, cs:CURTDB
                cmp     word ptr ds:7Eh, 4454h
                jnz     short locret_415E
                cmp     word ptr ds:1Eh, 0
                jz      short locret_415E
                mov     di, ss
                cmp     di, ds:4
                jnz     short loc_410B
                call    dword ptr ds:1Ch
                jmp     short loc_412C
; ---------------------------------------------------------------------------

loc_410B:                               ; CODE XREF: INT21HANDLER+75↑j
                push    bp
                mov     si, sp
                cli
                mov     ss, word ptr ds:4
                mov     sp, ds:2
                sti
                mov     bp, sp
                add     bp, 10h
                call    dword ptr ds:1Ch
                mov     ds:2, sp
                cli
                mov     ss, di
                mov     sp, si
                sti
                pop     bp

loc_412C:                               ; CODE XREF: INT21HANDLER+7B↑j
                jcxz    short locret_415E
                pop     ax
                call    loc_40CB
                mov     word ptr cs:INT21_HOOK_TABLE, sp
                int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
                                        ; Return: return via RETF 2 with CF set
                                        ; DOS will abort program with errorlevel 0
                                        ; else
                                        ; interrupted DOS call continues
                pushf
                pop     cs:word_3D74

loc_413F:
                cmp     sp, word ptr cs:INT21_HOOK_TABLE
                jz      short loc_415B
                add     sp, 2
                cmp     sp, word ptr cs:INT21_HOOK_TABLE
                jnz     short loc_4158
                push    cs:word_3D74
                popf
                jnb     short loc_415B

loc_4158:                               ; CODE XREF: INT21HANDLER+C0↑j
                mov     ax, 4C00h

loc_415B:                               ; CODE XREF: INT21HANDLER+B6↑j
                                        ; INT21HANDLER+C8↑j
                jmp     INT21HANDLER
; ---------------------------------------------------------------------------

locret_415E:                            ; CODE XREF: INT21HANDLER+66↑j
                                        ; INT21HANDLER+6D↑j ...
                retn
; ---------------------------------------------------------------------------

DOSNetRedirectorHook:                   ; DATA XREF: cseg01:3DCE↑o
                cmp     ax, 5F03h
                jnz     short loc_41DC  ; these are all handlers for int21 function
                cmp     bl, 4
                jnz     short loc_41DC
                cmp     byte ptr [si], 0
                jz      short loc_41DC
                push    dx
                mov     dx, si
                call    near ptr PATHDRVDSDX
                pop     dx
                jnb     short loc_41DC
                push    word ptr [si]
                mov     byte ptr [si], 24h ; '$'
                pushf
                cli
                call    cs:PREVINT21PROC
                pop     word ptr [si]
                jmp     loc_4541
; ---------------------------------------------------------------------------

DOSTruenameHook:                        ; DATA XREF: cseg01:3DD4↑o
                push    dx
                mov     dx, si
                call    near ptr PATHDRVDSDX
                pop     dx
                jnb     short loc_41DC
                push    word ptr [si]
                mov     byte ptr [si], 24h ; '$'
                pushf
                cli
                call    cs:PREVINT21PROC
                pop     word ptr [si]
                jmp     loc_4541
; ---------------------------------------------------------------------------

DOSGeneralFileHook2:                    ; DATA XREF: cseg01:3D98↑o
                                        ; cseg01:3D9B↑o ...
                call    near ptr PATHDRVDSDX
                jnb     short loc_41DC
                call    near ptr PREVINT21RETURN_1
                jmp     loc_4541
; ---------------------------------------------------------------------------

DOSDiskHook:                            ; DATA XREF: cseg01:3DB9↑o
                                        ; cseg01:3DD1↑o
                call    sub_425B
                jnb     short loc_41DC
                call    PREVINT21RETURN_2
                jmp     loc_44E6
; ---------------------------------------------------------------------------

DOSCwdHook:                             ; DATA XREF: cseg01:3DB6↑o
                call    sub_425B
                jnb     short loc_41DC
                call    PREVINT21RETURN_2
                jmp     loc_4541
; ---------------------------------------------------------------------------

DOSFcbHook:                             ; DATA XREF: cseg01:3DBC↑o
                                        ; cseg01:3DBF↑o ...
                push    dx
                push    si
                mov     si, dx
                cmp     byte ptr [si], 0FFh
                jnz     short loc_41CF
                add     si, 7

loc_41CF:                               ; CODE XREF: INT21HANDLER+13C↑j
                mov     dl, [si]
                or      dl, dl
                jz      short loc_41DA
                call    sub_425B
                jb      short loc_41DF

loc_41DA:                               ; CODE XREF: INT21HANDLER+145↑j
                pop     si
                pop     dx

loc_41DC:                               ; CODE XREF: INT21HANDLER+D4↑j
                                        ; INT21HANDLER+D9↑j ...
                jmp     loc_4296
; ---------------------------------------------------------------------------

loc_41DF:                               ; CODE XREF: INT21HANDLER+14A↑j
                push    dx
                mov     dx, si
                mov     byte ptr [si], 0F0h
                pushf
                cli
                call    cs:PREVINT21PROC
                pop     dx
                mov     [si], dl
                pop     si
                pop     dx
                jmp     loc_44E6
; ---------------------------------------------------------------------------

DOSRenameHook:                          ; DATA XREF: cseg01:3DAD↑o
                call    near ptr PATHDRVDSDX
                jb      short loc_420A
                xchg    di, dx
                push    ds
                push    es
                pop     ds
                pop     es
                call    near ptr PATHDRVDSDX
                xchg    di, dx
                push    ds
                push    es
                pop     ds
                pop     es
                jnb     short loc_41DC

loc_420A:                               ; CODE XREF: INT21HANDLER+169↑j
                push    word ptr es:[di]
                mov     byte ptr es:[di], 24h ; '$'
                call    near ptr PREVINT21RETURN_1
                pop     word ptr es:[di]
                jmp     loc_4541
INT21HANDLER    endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


PATHDRVDSDX     proc far                ; CODE XREF: OPENFILE+52↑p
                                        ; INT21HANDLER+E3↑p ...
                push    si
                push    dx
                mov     si, dx
                mov     dx, [si]
                or      dl, dl
                jz      short loc_4238
                or      dh, dh
                jz      short loc_4238
                cmp     dh, 3Ah ; ':'
                jnz     short loc_4238
                or      dl, 20h
                sub     dl, 60h ; '`'
                call    sub_425B
                jmp     short loc_4239
; ---------------------------------------------------------------------------

loc_4238:                               ; CODE XREF: PATHDRVDSDX+8↑j
                                        ; PATHDRVDSDX+C↑j ...
                clc

loc_4239:                               ; CODE XREF: PATHDRVDSDX+1C↑j
                pop     dx
                pop     si
                retn
PATHDRVDSDX     endp


; =============== S U B R O U T I N E =======================================


PREVINT21RETURN_1 proc far              ; CODE XREF: INT21HANDLER+119↑p
                                        ; INT21HANDLER+183↑p ...
                push    si              ; ======== THIS IS THE START ========
                                        ; ====== OF INTERRUPT HANDLERS ======
                mov     si, dx
                push    word ptr [si]
                mov     byte ptr [si], 24h ; '$'
                pushf
                cli
                call    cs:PREVINT21PROC
                pop     word ptr [si]
                pop     si
                retn
PREVINT21RETURN_1 endp


; =============== S U B R O U T I N E =======================================


PREVINT21RETURN_2 proc near             ; CODE XREF: INT21HANDLER+124↑p
                                        ; INT21HANDLER+12F↑p ...
                push    dx
                mov     dl, 0F0h
                pushf
                cli
                call    cs:PREVINT21PROC
                pop     dx

nullsub_3:                              ; CODE XREF: SftThing+B↓j
                retn
PREVINT21RETURN_2 endp


; =============== S U B R O U T I N E =======================================


sub_425B        proc near               ; CODE XREF: INT21HANDLER:DOSDiskHook↑p
                                        ; INT21HANDLER:DOSCwdHook↑p ...
                push    bx
                push    dx
                mov     bx, 3E12h
                cmp     dl, 1Ah
                ja      short loc_4276
                or      dl, dl
                jz      short loc_4276
                dec     dl
                xor     dh, dh
                add     bx, dx
                cmp     byte ptr cs:[bx], 0
                stc
                jnz     short loc_4277

loc_4276:                               ; CODE XREF: sub_425B+8↑j
                                        ; sub_425B+C↑j
                clc

loc_4277:                               ; CODE XREF: sub_425B+19↑j
                pop     dx
                pop     bx
                retn
sub_425B        endp


; =============== S U B R O U T I N E =======================================


sub_427A        proc near               ; CODE XREF: DOSIoctlHook:loc_43B9↓p
                push    ax
                call    sub_4336
                jmp     short loc_4292
sub_427A        endp


; =============== S U B R O U T I N E =======================================


sub_4280        proc near               ; CODE XREF: DOSIoctlHook:DOSFlushBufferStdinHook↓p
                                        ; DOSDirectNoEchoHook↓p ...
                push    ax
                xor     ax, ax
                call    sub_4338
                jmp     short loc_4292
sub_4280        endp


; =============== S U B R O U T I N E =======================================


SftThing        proc near               ; CODE XREF: SftThing+16↓j
                                        ; SftThing+20↓j
                jmp     jmp_previous_int21
; ---------------------------------------------------------------------------

loc_428B:                               ; CODE XREF: DOSIoctlHook:loc_4458↓p
                                        ; DOSPrintStringHook↓p ...
                push    ax
                mov     ax, 1
                call    sub_4338

loc_4292:                               ; CODE XREF: sub_427A+4↑j
                                        ; sub_4280+6↑j
                pop     ax
                jz      short nullsub_3
                pop     ds

loc_4296:                               ; CODE XREF: INT21HANDLER:loc_41DC↑j
                                        ; DATA XREF: cseg01:3E10↑o
                cmp     ah, 29h ; ')'
                jb      short loc_42AA
                cmp     ah, 30h ; '0'
                jbe     short SftThing
                cmp     ah, 50h ; 'P'
                jb      short loc_42AA
                cmp     ah, 51h ; 'Q'
                jbe     short SftThing

loc_42AA:                               ; CODE XREF: SftThing+11↑j
                                        ; SftThing+1B↑j ...
                mov     ds, cs:CURTDB
                test    byte ptr ds:3Ah, 40h
                jnz     short loc_4325
                cmp     word ptr ds:7Eh, 4454h
                jnz     short loc_4325
                push    ax
                push    bx
                push    dx
                push    es
                inc     cs:INSCHEDULER
                xor     ax, ax
                mov     es, ax
                assume es:cseg01
                mov     bx, 90h
                mov     ax, 48E2h
                xchg    ax, es:[bx]
                push    ax
                mov     ax, cs
                xchg    ax, es:[bx+2]
                push    ax
                mov     dl, ds:3Ah
                and     dx, 3Fh
                or      byte ptr ds:3Ah, 40h
                mov     ah, 0Eh
                cmp     cs:word_3D72, 3D7Ch
                jnz     short loc_4301
                push    bx
                mov     bx, 3E12h
                add     bx, dx
                cmp     byte ptr cs:[bx], 0
                pop     bx
                jnz     short loc_4315

loc_4301:                               ; CODE XREF: SftThing+6A↑j
                pushf
                cli
                call    cs:PREVINT21PROC
                lea     dx, ds:3Ch
                mov     ah, 3Bh ; ';'
                pushf
                cli
                call    cs:PREVINT21PROC

loc_4315:                               ; CODE XREF: SftThing+77↑j
                pop     word ptr es:[bx+2]
                pop     word ptr es:[bx]
                dec     cs:INSCHEDULER
                pop     es
                assume es:nothing
                pop     dx
                pop     bx
                pop     ax

loc_4325:                               ; CODE XREF: SftThing+2C↑j
                                        ; SftThing+34↑j
                cmp     ah, 3Dh ; '='
                jnz     short jmp_previous_int21
                call    GROWSFT

jmp_previous_int21:                     ; CODE XREF: SftThing↑j
                                        ; SftThing+A0↑j ...
                pop     ds
                pop     bp
                dec     bp
                cli
                jmp     cs:PREVINT21PROC
SftThing        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


sub_4336        proc near               ; CODE XREF: sub_427A+1↑p
                                        ; DOSIoctlHook+24↓p ...
                mov     ax, bx
sub_4336        endp


; =============== S U B R O U T I N E =======================================


sub_4338        proc near               ; CODE XREF: sub_4280+3↑p
                                        ; SftThing+7↑p
                push    es
                push    bx
                les     bx, cs:PCURRENTPDB
                mov     es, word ptr es:[bx]
                mov     bx, ax
                mov     al, es:[bx+18h]
                cmp     al, 0FEh
                jnz     short loc_4354
                inc     byte ptr es:[bx+18h]

loc_4350:                               ; CODE XREF: sub_4338+27↓j
                or      ax, ax
                jmp     short loc_43A3
; ---------------------------------------------------------------------------

loc_4354:                               ; CODE XREF: sub_4338+12↑j
                les     bx, cs:PFILETABLE

loc_4359:                               ; CODE XREF: sub_4338+2D↓j
                les     bx, es:[bx]
                cmp     bx, 0FFFFh
                jz      short loc_4350
                sub     al, es:[bx+4]
                jnb     short loc_4359
                add     al, es:[bx+4]
                lea     bx, [bx+0Ah]
                or      al, al
                jz      short loc_437B

loc_4372:                               ; CODE XREF: sub_4338+41↓j
                add     bx, cs:FILEENTRYSIZE
                dec     al
                jnz     short loc_4372

loc_437B:                               ; CODE XREF: sub_4338+38↑j
                cmp     cs:DOS_VERSION, 3
                jb      short loc_4396
                test    byte ptr es:[bx+2], 80h
                jnz     short loc_43A3
                add     bx, 1Dh
                cmp     cs:DOS_REVISION, 0
                jz      short loc_4396
                dec     bx

loc_4396:                               ; CODE XREF: sub_4338+49↑j
                                        ; sub_4338+5B↑j
                cmp     word ptr es:[bx], 4F43h
                jnz     short loc_43A3
                cmp     word ptr es:[bx+2], 204Eh

loc_43A3:                               ; CODE XREF: sub_4338+1A↑j
                                        ; sub_4338+50↑j ...
                pop     bx
                pop     es
                retn
sub_4338        endp


; =============== S U B R O U T I N E =======================================


DOSIoctlHook    proc far                ; DATA XREF: cseg01:3DDD↑o
                cmp     al, 6
                jz      short loc_43B9
                cmp     al, 4
                jb      short loc_43C4
                cmp     al, 7
                jz      short loc_43C4
                cmp     al, 0Ah
                jz      short loc_43C4
                jmp     loc_42AA
; ---------------------------------------------------------------------------

loc_43B9:                               ; CODE XREF: DOSIoctlHook+2↑j
                call    sub_427A
                call    loc_40B2
                mov     ah, 0Bh
                jmp     loc_4490
; ---------------------------------------------------------------------------

loc_43C4:                               ; CODE XREF: DOSIoctlHook+6↑j
                                        ; DOSIoctlHook+A↑j ...
                jmp     DOSGeneralFileHook
; ---------------------------------------------------------------------------

DOSWriteHook:                           ; DATA XREF: cseg01:3D83↑o
                call    loc_40B2
                call    sub_4336
                jnz     short loc_43ED
                mov     [bp-0Ah], cx
                mov     ah, 9
                call    loc_40E4
                jmp     loc_44DF
; ---------------------------------------------------------------------------

DOSReadHook:                            ; DATA XREF: cseg01:3DEF↑o
                call    loc_40B2
                call    sub_4336
                jnz     short loc_43ED
                mov     ah, 5
                call    loc_40E4
                mov     [bp-0Ah], ax
                jmp     loc_44DF
; ---------------------------------------------------------------------------

loc_43ED:                               ; CODE XREF: DOSIoctlHook+27↑j
                                        ; DOSIoctlHook+3A↑j
                lds     bx, cs:PCURRENTPDB
                mov     bx, [bx]
                mov     ds, bx
                cmp     word ptr ds:4Ah, 0
                jz      short loc_4410
                cmp     [bp+4], bx
                jb      short loc_4410
                mov     bx, ds:2
                cmp     [bp+4], bx
                jnb     short loc_4410
                mov     ah, 17h
                call    loc_40E7

loc_4410:                               ; CODE XREF: DOSIoctlHook+55↑j
                                        ; DOSIoctlHook+5A↑j ...
                call    loc_40CB
                jmp     cs:PREVINT21PROC
; ---------------------------------------------------------------------------

DOSFlushBufferStdinHook:                ; DATA XREF: cseg01:3DE9↑o
                call    sub_4280
                call    loc_40B2
                push    dx
                push    ax
                call    loc_40E7
                pop     ax
                pop     dx
                mov     ah, al
                mov     al, 0
                cmp     ah, 1
                jz      short loc_4490
                cmp     ah, 0Ah
                jz      short loc_449E
                cmp     ah, 6
                jz      short loc_446A
                cmp     ah, 7
                jz      short loc_447B
                cmp     ah, 8
                mov     ah, 7
                jz      short loc_4490
                jmp     loc_44DF
; ---------------------------------------------------------------------------

DOSDirectOutHook:                       ; DATA XREF: cseg01:3DD7↑o
                cmp     cs:word_3D72, 3D7Ch
                jz      short loc_4458
                cmp     dl, 0FFh
                jz      short loc_4458
                jmp     jmp_previous_int21
; ---------------------------------------------------------------------------

loc_4458:                               ; CODE XREF: DOSIoctlHook+A8↑j
                                        ; DOSIoctlHook+AD↑j
                call    loc_428B
                call    loc_40B2
                cmp     dl, 0FFh
                jz      short loc_446A
                mov     ah, 2
                call    loc_40E7
                jmp     short loc_44DF
; ---------------------------------------------------------------------------

loc_446A:                               ; CODE XREF: DOSIoctlHook+90↑j
                                        ; DOSIoctlHook+BB↑j
                or      byte ptr [bp+6], 40h
                mov     ah, 0Bh
                call    loc_40E7
                or      al, al
                jz      short loc_4493
                and     byte ptr [bp+6], 0BFh

loc_447B:                               ; CODE XREF: DOSIoctlHook+95↑j
                                        ; DOSDirectNoEchoHook+6↓j
                mov     ah, 7
                call    loc_40E7
                jmp     short loc_4493
DOSIoctlHook    endp


; =============== S U B R O U T I N E =======================================


DOSDirectNoEchoHook proc far            ; DATA XREF: cseg01:3DE0↑o
                call    sub_4280
                call    loc_40B2
                jmp     short loc_447B
DOSDirectNoEchoHook endp


; =============== S U B R O U T I N E =======================================


DOSStdinHook    proc far                ; DATA XREF: cseg01:3DDA↑o
                                        ; cseg01:3DEC↑o
                call    sub_4280
                call    loc_40B2

loc_4490:                               ; CODE XREF: DOSIoctlHook+1B↑j
                                        ; DOSIoctlHook+86↑j ...
                call    loc_40E4

loc_4493:                               ; CODE XREF: DOSIoctlHook+CF↑j
                                        ; DOSIoctlHook+DA↑j
                mov     [bp-0Ah], al
                jmp     short loc_44DF
DOSStdinHook    endp


; =============== S U B R O U T I N E =======================================


DOSBufferedInputHook proc far           ; DATA XREF: cseg01:3DE6↑o
                call    sub_4280
                call    loc_40B2

loc_449E:                               ; CODE XREF: DOSIoctlHook+8B↑j
                mov     di, dx
                mov     ds, word ptr [bp-2]
                mov     cx, [di]
                add     dx, 2
                call    loc_40E4
                mov     di, [bp-4]
                mov     ds, word ptr [bp-2]
                or      al, al
                jz      short loc_44B7
                dec     al

loc_44B7:                               ; CODE XREF: DOSBufferedInputHook+1B↑j
                mov     [di+1], al
                jmp     short loc_44DF
DOSBufferedInputHook endp


; =============== S U B R O U T I N E =======================================


DOSPrintStringHook proc far             ; DATA XREF: cseg01:3D80↑o
                call    loc_428B
                call    loc_40B2
                mov     di, ds
                mov     es, di
                mov     di, dx
                mov     cx, 0FFFFh
                mov     al, 24h ; '$'
                repne scasb
                neg     cx
                sub     cx, 2
                jmp     short loc_44DC
DOSPrintStringHook endp


; =============== S U B R O U T I N E =======================================


DOSPrintCharHook proc far               ; DATA XREF: cseg01:3D7D↑o
                call    loc_428B
                call    loc_40B2

loc_44DC:                               ; CODE XREF: DOSPrintStringHook+18↑j
                call    loc_40E4

loc_44DF:                               ; CODE XREF: DOSIoctlHook+31↑j
                                        ; DOSIoctlHook+44↑j ...
                pop     di
                pop     si
                pop     cx
                pop     ax
                pop     bx
                pop     es
                pop     dx

loc_44E6:                               ; CODE XREF: INT21HANDLER+127↑j
                                        ; INT21HANDLER+163↑j ...
                pop     ds
                pop     bp
                dec     bp
                iret
DOSPrintCharHook endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


DOSStdInNoEchoHook proc far             ; DATA XREF: cseg01:3DE3↑o
                call    sub_4280
                call    loc_40B2
                mov     ah, 7
                jmp     short loc_4490
DOSStdInNoEchoHook endp


; =============== S U B R O U T I N E =======================================


DOSSelectDefaultDriveHook proc far      ; DATA XREF: cseg01:3DF2↑o
                cmp     cs:word_3D72, 3D7Ch
                jnz     short loc_450A
                push    dx
                inc     dx
                call    sub_425B
                pop     dx
                jnb     short loc_450A
                call    PREVINT21RETURN_2
                jmp     short loc_44E6
; ---------------------------------------------------------------------------

loc_450A:                               ; CODE XREF: DOSSelectDefaultDriveHook+7↑j
                                        ; DOSSelectDefaultDriveHook+F↑j
                push    dx
                mov     ah, 19h
                pushf
                cli
                call    cs:PREVINT21PROC
                mov     ah, 0Eh
                cmp     al, dl
                pop     dx
                jz      short loc_452D

loc_451B:                               ; CODE XREF: DOSChdirHook+7↓j
                                        ; DOSChdirHook+C↓j
                mov     ds, cs:CURTDB
                cmp     word ptr ds:7Eh, 4454h
                jnz     short loc_452D
                and     byte ptr ds:3Ah, 7Fh

loc_452D:                               ; CODE XREF: DOSSelectDefaultDriveHook+25↑j
                                        ; DOSSelectDefaultDriveHook+32↑j
                jmp     loc_42AA
DOSSelectDefaultDriveHook endp


; =============== S U B R O U T I N E =======================================


DOSChdirHook    proc far                ; DATA XREF: cseg01:3DF5↑o
                cmp     cs:word_3D72, 3D7Ch
                jnz     short loc_451B
                call    near ptr PATHDRVDSDX
                jnb     short loc_451B
                call    near ptr PREVINT21RETURN_1

loc_4541:                               ; CODE XREF: INT21HANDLER+F7↑j
                                        ; INT21HANDLER+111↑j ...
                or      byte ptr [bp+6], 1
                jmp     short loc_44E6
DOSChdirHook    endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


DOSSetInterruptVectorHook proc far      ; DATA XREF: cseg01:3DF8↑o
                pop     ds
                pop     bp
                dec     bp
                cmp     al, 21h ; '!'
                jnz     short loc_454F
                iret
; ---------------------------------------------------------------------------

loc_454F:                               ; CODE XREF: DOSSetInterruptVectorHook+5↑j
                cli
                jmp     cs:PREVINT21PROC
DOSSetInterruptVectorHook endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


DOSGeneralFileHook proc near            ; CODE XREF: DOSIoctlHook:loc_43C4↑j
                                        ; DATA XREF: cseg01:3D86↑o ...
                push    es
                push    di
                les     di, cs:PCURRENTPDB
                mov     es, word ptr es:[di]
                cmp     byte ptr es:[bx+18h], 0FEh
                jnz     short loc_456A
                inc     byte ptr es:[bx+18h]

loc_456A:                               ; CODE XREF: DOSGeneralFileHook+F↑j
                pop     di
                pop     es
                jmp     jmp_previous_int21
DOSGeneralFileHook endp


; =============== S U B R O U T I N E =======================================


DOSResizeMemoryHook proc far            ; DATA XREF: cseg01:3E01↑o

; FUNCTION CHUNK AT 45B0 SIZE 00000016 BYTES

                call    loc_40B2
                mov     dx, es
                dec     dx
                mov     ds, dx
                assume ds:nothing
                inc     dx
                cmp     dx, cs:TOPPDB
                ja      short loc_4586
                mov     bx, ds:3
                jmp     short loc_45B6
; ---------------------------------------------------------------------------
                nop

loc_4586:                               ; CODE XREF: DOSResizeMemoryHook+E↑j
                mov     ax, 7
                cmp     byte ptr ds:0, 4Dh ; 'M'
                jz      short loc_4597
                cmp     byte ptr ds:0, 5Ah ; 'Z'
                jnz     short loc_45BC

loc_4597:                               ; CODE XREF: DOSResizeMemoryHook+1F↑j
                mov     cx, ds:1
                lds     si, cs:PCURRENTPDB
                assume ds:nothing
                cmp     cx, [si]
                jnz     short loc_45BC
                call    INT21REALLOC
                jmp     short loc_45B0
; ---------------------------------------------------------------------------
                nop
DOSResizeMemoryHook endp


; =============== S U B R O U T I N E =======================================


DOSAllocMemoryHook proc near            ; DATA XREF: cseg01:3DFB↑o
                call    loc_40B2
                call    INT21ALLOC
DOSAllocMemoryHook endp

; START OF FUNCTION CHUNK FOR PREVINT21RETURN_1
;   ADDITIONAL PARENT FUNCTION DOSResizeMemoryHook

loc_45B0:                               ; CODE XREF: DOSResizeMemoryHook+38↑j
                or      ax, ax
                jnz     short loc_45C0
                mov     bx, dx

loc_45B6:                               ; CODE XREF: DOSResizeMemoryHook+14↑j
                mov     [bp-8], bx

loc_45B9:                               ; CODE XREF: DOSFreeMemoryHook+A↓j
                mov     ax, 8

loc_45BC:                               ; CODE XREF: DOSResizeMemoryHook+26↑j
                                        ; DOSResizeMemoryHook+33↑j
                or      byte ptr [bp+6], 1

loc_45C0:                               ; CODE XREF: PREVINT21RETURN_1+376↑j
                                        ; DOSFreeMemoryHook+C↓j
                mov     [bp-0Ah], ax
                jmp     loc_44DF
; END OF FUNCTION CHUNK FOR PREVINT21RETURN_1

; =============== S U B R O U T I N E =======================================


DOSFreeMemoryHook proc far              ; DATA XREF: cseg01:3DFE↑o
                call    loc_40B2
                mov     dx, es
                call    j_GENTERCURRENTPDB
                or      ax, ax
                jnz     short loc_45B9
                jmp     short loc_45C0
DOSFreeMemoryHook endp

; ---------------------------------------------------------------------------
SZWINOLDAP      db 'WINOLDAP.MOD',0

; =============== S U B R O U T I N E =======================================


DOSExecHook     proc far                ; DATA XREF: cseg01:3E04↑o
                cmp     cs:word_3D72, 3D7Ch
                jnz     short loc_45F5
                call    near ptr PATHDRVDSDX
                jnb     short loc_45F5
                call    near ptr PREVINT21RETURN_1
                jmp     loc_4541
; ---------------------------------------------------------------------------

loc_45F5:                               ; CODE XREF: DOSExecHook+7↑j
                                        ; DOSExecHook+C↑j
                call    loc_40B2
                mov     es, cs:CURTDB
                cmp     word ptr es:1Eh, 0
                jz      short loc_4608
                jmp     loc_46B1
; ---------------------------------------------------------------------------

loc_4608:                               ; CODE XREF: DOSExecHook+22↑j
                les     di, [bp-4]
                mov     cx, 0FFFFh
                xor     al, al
                repne scasb
                neg     cx
                dec     cx
                mov     ax, es:[di-5]
                or      ah, 20h
                mov     bx, es:[di-3]
                or      bx, 2020h
                cmp     ax, 632Eh
                jnz     short loc_462F
                cmp     bx, 6D6Fh
                jz      short loc_465F

loc_462F:                               ; CODE XREF: DOSExecHook+46↑j
                cmp     ax, 622Eh
                jnz     short loc_463A
                cmp     bx, 7461h
                jz      short loc_465F

loc_463A:                               ; CODE XREF: DOSExecHook+51↑j
                cmp     ax, 702Eh
                jnz     short loc_4645
                cmp     bx, 6669h
                jz      short loc_465F

loc_4645:                               ; CODE XREF: DOSExecHook+5C↑j
                lds     si, [bp-8]
                push    cx
                push    es
                push    dx
                push    ds
                push    si
                nop
                push    cs
                call    near ptr LOADMODULE
                pop     cx
                cmp     ax, 40h ; '@'
                jb      short loc_465A
                jmp     short loc_46CA
; ---------------------------------------------------------------------------

loc_465A:                               ; CODE XREF: DOSExecHook+75↑j
                cmp     ax, 0Bh
                jnz     short loc_46C6

loc_465F:                               ; CODE XREF: DOSExecHook+4C↑j
                                        ; DOSExecHook+57↑j ...
                mov     dx, cx
                mov     ax, 80h
                sub     sp, ax
                push    ss
                pop     es
                mov     di, sp
                lds     si, [bp-8]
                lds     si, [si+2]
                xor     ch, ch
                mov     cl, [si]
                add     cx, 2
                rep movsb
                mov     cx, dx
                lds     si, [bp-4]
                rep movsb
                mov     byte ptr es:[di-1], 0Ah
                mov     di, sp
                add     es:[di], dl
                lds     si, [bp-8]
                mov     [si+2], di
                mov     word ptr [si+4], es
                mov     dx, 45D4h
                push    cs
                push    dx
                push    ds
                push    si
                nop
                push    cs
                call    near ptr LOADMODULE
                add     sp, 80h
                cmp     ax, 40h ; '@'
                jnb     short loc_46CA
                cmp     ax, 2
                jnz     short loc_46C6
                mov     al, 17h
                jmp     short loc_46C6
; ---------------------------------------------------------------------------

loc_46B1:                               ; CODE XREF: DOSExecHook+24↑j
                mov     ax, [bp-0Ah]
                les     bx, [bp-8]
                mov     cx, es
                lds     dx, [bp-4]
                mov     ah, 10h
                call    loc_40E7
                cmp     ax, 40h ; '@'
                jnb     short loc_46CA

loc_46C6:                               ; CODE XREF: DOSExecHook+7C↑j
                                        ; DOSExecHook+CA↑j ...
                or      byte ptr [bp+6], 1

loc_46CA:                               ; CODE XREF: DOSExecHook+77↑j
                                        ; DOSExecHook+C5↑j ...
                mov     [bp-0Ah], ax
                call    loc_40CB
                iret
DOSExecHook     endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


DOSTerminateOldHook proc near           ; DATA XREF: cseg01:3E07↑o
                xor     ax, ax
                lds     si, cs:PCURRENTPDB
                mov     si, [si]
                cmp     si, [bp+4]
                jz      short near ptr DOSTerminateHook
                jmp     jmp_previous_int21
DOSTerminateOldHook endp


; =============== S U B R O U T I N E =======================================


DOSTerminateHook proc far               ; CODE XREF: DOSTerminateOldHook+C↑j
                                        ; DATA XREF: cseg01:3E0A↑o
                lds     si, cs:PCURRENTPDB
                mov     bx, [si]
                mov     ds, bx
                mov     dx, ds:42h
                mov     cx, cs:HEADPDB
                cmp     bx, cx
                jnz     short loc_46FF
                mov     cs:HEADPDB, dx
                jmp     short loc_4711
; ---------------------------------------------------------------------------

loc_46FF:                               ; CODE XREF: DOSTerminateHook+14↑j
                                        ; DOSTerminateHook+28↓j
                jcxz    short loc_4711
                mov     es, cx
                mov     cx, es:42h
                cmp     cx, bx
                jnz     short loc_46FF
                mov     es:42h, dx

loc_4711:                               ; CODE XREF: DOSTerminateHook+1B↑j
                                        ; DOSTerminateHook:loc_46FF↑j
                mov     ds, cs:CURTDB
                cmp     word ptr ds:1Eh, 0
                jnz     short loc_475E
                xchg    ax, di
                xor     si, si
                push    si
                nop
                push    cs
                call    near ptr GLOBALFREEALL
                cmp     ds:16h, si
                jz      short loc_473E
                mov     bx, 20h ; ' '
                push    ds
                push    bx
                push    di
                push    word ptr ds:10h
                push    word ptr ds:12h
                call    dword ptr ds:14h

loc_473E:                               ; CODE XREF: DOSTerminateHook+48↑j
                mov     ds:7Eh, si
                push    ds
                call    DELETETASK
                mov     cx, cs:HEADTDB
                jcxz    short loc_47A8
                mov     es, si
                mov     bx, cs:INT22BASE
                mov     word ptr es:[bx], offset int22_handler
                mov     word ptr es:[bx+2], cs
                xchg    ax, di

loc_475E:                               ; CODE XREF: DOSTerminateHook+39↑j
                lds     si, cs:PCURRENTPDB
                mov     ds, word ptr [si]
                mov     ds, word ptr ds:16h
                mov     es, cs:HEADTDB
                mov     si, es:2
                sub     si, 18h
                mov     ds:2Eh, si
                mov     si, es:4
                mov     ds:30h, si
                mov     ah, 4Ch ; 'L'
                pushf
                cli
                call    cs:PREVINT21PROC

int22_handler:                          ; DATA XREF: DOSTerminateHook+72↑o
                                        ; BUILDPDB+8B↓o
                mov     bp, sp
                add     bp, 10h
                mov     ds, cs:CURTDB
                push    word ptr ds:10h
                push    ds
                nop
                push    cs
                call    near ptr GLOBALFREE
                nop
                push    cs
                call    near ptr FREEMODULE
                jmp     near ptr BOOTSCHEDULE
; ---------------------------------------------------------------------------

loc_47A8:                               ; CODE XREF: DOSTerminateHook+69↑j
                push    si
                push    si
                call    cs:PEXITPROC
DOSTerminateHook endp ; sp-analysis failed

;
; External Entry #44 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public BUILDPDB
BUILDPDB        proc far                ; CODE XREF: CREATETASK+AB↑p

var_4           = byte ptr -4
arg_0           = word ptr  6
arg_2           = dword ptr  8
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh

                inc     bp              ; KERNEL_44
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 2
                push    si
                push    di
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                mov     dl, al
                mov     ah, 0Eh
                pushf
                cli
                call    cs:PREVINT21PROC
                mov     [bp+var_4], al
                les     di, cs:PCURRENTPDB
                push    word ptr es:[di]
                mov     bx, [bp+arg_8]
                mov     ah, 50h ; 'P'
                pushf
                cli
                call    cs:PREVINT21PROC
                mov     dx, [bp+arg_6]
                mov     si, [bp+arg_0]
                mov     ah, 55h ; 'U'
                int     21h             ; DOS - 2+ internal - CREATE PSP
                                        ; DX = segment number at which to set up PSP
                                        ; SI = (DOS 3+) value to place in memory size field at DX:[0002h]
                pop     bx
                mov     ah, 50h ; 'P'
                pushf
                cli
                call    cs:PREVINT21PROC
                mov     es, dx
                add     si, dx
                mov     ax, [bp+arg_8]
                mov     es:16h, ax
                mov     es:2, si
                mov     ax, [bp+arg_0]
                cmp     ax, 0FFFh
                jbe     short loc_480E
                mov     ax, 0FFFh

loc_480E:                               ; CODE XREF: BUILDPDB+5A↑j
                sub     ax, 10h
                mov     bx, cs
                mov     cl, 4
                mov     dx, 4046h
                mov     si, dx
                shr     si, cl
                add     bx, si
                sub     bx, ax
                shl     ax, cl
                and     dx, 0Fh
                add     ax, dx
                mov     es:6, ax
                mov     es:8, bx
                mov     es:51h, ax
                mov     es:53h, bx
                mov     word ptr es:0Ah, offset int22_handler
                mov     word ptr es:0Ch, cs
                xor     cx, cx
                mov     es:48h, cx
                mov     es:4Ah, cx
                cld
                lds     si, [bp+arg_2]
                lds     si, [si+6]
                mov     cx, 6
                mov     di, 5Ch ; '\'
                mov     dl, [si]
                rep movsw
                xor     ax, ax
                stosw
                stosw
                lds     si, [bp+arg_2]
                lds     si, [si+0Ah]
                mov     di, 6Ch ; 'l'
                mov     dh, [si]
                mov     cl, 6
                rep movsw
                stosw
                stosw
                lds     si, [bp+arg_2]
                lds     si, [si+2]
                mov     cx, 80h
                mov     di, cx
                rep movsb
                mov     ax, dx
                xor     dx, dx
                mov     dh, [bp+var_4]
                cmp     ah, dh
                mov     ah, dl
                jbe     short loc_4894
                dec     ah

loc_4894:                               ; CODE XREF: BUILDPDB+E1↑j
                cmp     al, dh
                mov     al, dl
                jbe     short loc_489C
                dec     al

loc_489C:                               ; CODE XREF: BUILDPDB+E9↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ah
BUILDPDB        endp

;
; External Entry #37 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GETCURRENTPDB
GETCURRENTPDB   proc far
                push    ds              ; KERNEL_37
                push    si
                lds     si, cs:PCURRENTPDB
                lodsw
                mov     dx, cs:TOPPDB
                pop     si
                pop     ds
                retf
GETCURRENTPDB   endp

;
; External Entry #43 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ISSCREENGRAB
ISSCREENGRAB    proc far
                mov     ax, cs:FWINX    ; KERNEL_43
                retf
ISSCREENGRAB    endp

; ---------------------------------------------------------------------------
unk_48BE        db    0                 ; DATA XREF: sub_48D3+2↓r
                db    0
unk_48C0        db    0                 ; DATA XREF: sub_48C1+C↓w

; =============== S U B R O U T I N E =======================================


sub_48C1        proc far
                add     [bp+di], al     ; these are all also different interrupt handlers.
                or      al, 48h
                ror     word ptr [bx+si+2Eh], cl
                mov     ds:48BEh, bx
                mov     word ptr cs:unk_48C0, es
                retf
sub_48C1        endp


; =============== S U B R O U T I N E =======================================


sub_48D3        proc far
                push    ds
                push    bx
                lds     bx, dword ptr cs:unk_48BE
                mov     word ptr [bx+3], 300h
                pop     bx
                pop     ds
                retf
sub_48D3        endp


; =============== S U B R O U T I N E =======================================


INT24HANDLER    proc far                ; DATA XREF: ENABLEDOS+74↑o
                inc     cs:INSCHEDULER
                cmp     cs:INSCHEDULER, 1
                jz      short notinscheduler
                jmp     inscheduler
; ---------------------------------------------------------------------------

notinscheduler:                         ; CODE XREF: INT24HANDLER+B↑j
                sti
                cld
                push    ds
                push    es
                push    dx
                push    cx
                push    bx
                push    di
                mov     ds, bp
                mov     cx, [si+4]
                mov     cs:CDEVAT, ch
                push    cs
                pop     es
                assume es:cseg01
                mov     di, 1DAh
                mov     cx, 8
                lea     si, [si+0Ah]
                push    si
                rep movsb
                pop     si
                mov     di, 1FAh
                mov     cx, 8
                rep movsb
                pop     di
                mov     bp, sp
                mov     bp, [bp+1Ch]
                push    cs
                pop     ds
                assume ds:cseg01
                mov     si, 92h
                mov     BUFPOS, si
                add     al, 41h ; 'A'
                mov     byte ptr DRVLET1, al ; "X:"
                mov     byte ptr DRVLET2, al ; "X:"
                mov     byte ptr DRVLET3, al ; "X:"
                test    ah, 1
                jz      short loc_4949
                mov     si, 1E3h
                test    CDEVAT, 80h
                jnz     short loc_4956
                mov     si, 1A9h
                jmp     short loc_4956
; ---------------------------------------------------------------------------

loc_4949:                               ; CODE XREF: INT24HANDLER+56↑j
                mov     si, 1C2h
                test    CDEVAT, 80h
                jnz     short loc_4956
                mov     si, 18Fh

loc_4956:                               ; CODE XREF: INT24HANDLER+60↑j
                                        ; INT24HANDLER+65↑j ...
                mov     ax, di
                xor     ah, ah
                mov     OLDERRNO, ax
                mov     dx, 16Eh
                or      ax, ax
                jz      short loc_496D
                mov     dx, 203h
                cmp     al, 9
                jz      short loc_496D
                mov     dx, si

loc_496D:                               ; CODE XREF: INT24HANDLER+80↑j
                                        ; INT24HANDLER+87↑j
                call    APPEND
                call    GENTER
                inc     word ptr [di+2]
                call    GLEAVE
                call    loc_49D9
                call    GENTER
                dec     word ptr [di+2]
                call    GLEAVE
                cmp     ax, 2
                nop
                mov     al, 2
                jz      short loc_498F
                mov     al, 1

loc_498F:                               ; CODE XREF: INT24HANDLER+A9↑j
                pop     bx
                pop     cx
                pop     dx
                pop     es
                assume es:nothing
                pop     ds
                assume ds:nothing
                cmp     al, 2
                jb      short dos31_or_above

inscheduler:                            ; CODE XREF: INT24HANDLER+D↑j
                mov     al, 3
                cmp     cs:DOS_VERSION, al
                jb      short loc_49B3
                ja      short dos31_or_above
                cmp     cs:DOS_REVISION, 0Ah
                jnb     short dos31_or_above
                test    cs:CDEVAT, 80h
                jz      short dos31_or_above

loc_49B3:                               ; CODE XREF: INT24HANDLER+BD↑j
                lds     si, cs:PERRMODE
                mov     byte ptr [si], 0
                mov     bp, sp
                or      byte ptr [bp+1Ch], 1
                add     sp, 8
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     bp
                pop     ds
                pop     es
                mov     ax, cs:OLDERRNO
                add     ax, 13h

dos31_or_above:                         ; CODE XREF: INT24HANDLER+B4↑j
                                        ; INT24HANDLER+BF↑j ...
                dec     cs:INSCHEDULER
                iret
; ---------------------------------------------------------------------------

loc_49D9:                               ; CODE XREF: INT24HANDLER+97↑p
                mov     bx, 153h
                mov     cx, 1015h
                mov     ds, cs:CURTDB
                mov     di, ss
                cmp     di, ds:4
                jz      short SHOWDIALOGBOX2
                mov     si, sp
                cli
                mov     ss, word ptr ds:4
                mov     sp, ds:2
                sti
                mov     bp, sp
                add     bp, 10h
                call    SHOWDIALOGBOX2
                mov     ds:2, sp
                cli
                mov     ss, di
                mov     sp, si
                sti
                retn
INT24HANDLER    endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


SHOWDIALOGBOX2  proc near               ; CODE XREF: PROMPT:loc_217D↑p
                                        ; INT24HANDLER+108↑j ...
                xor     ax, ax
                cmp     cs:FINT21, al
                jz      short locret_4A25
                push    ax
                push    cs
                mov     dx, 92h
                push    dx
                push    cs
                push    bx
                push    cx
                call    cs:PMBOXPROC
                cmp     ax, 2

locret_4A25:                            ; CODE XREF: SHOWDIALOGBOX2+7↑j
                retn
SHOWDIALOGBOX2  endp


; =============== S U B R O U T I N E =======================================


APPENDFIRST     proc near               ; CODE XREF: PROMPT+2D↑p
                mov     cs:BUFPOS, 92h
APPENDFIRST     endp


; =============== S U B R O U T I N E =======================================


APPEND          proc near               ; CODE XREF: ISFLOPPY+18↑p
                                        ; PROMPT+B↑p ...
                push    si
                push    di
                mov     di, cs
                mov     es, di
                assume es:cseg01
                mov     di, cs:BUFPOS
                mov     si, dx

loc_4A3A:                               ; CODE XREF: APPEND+11↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_4A3A
                dec     di
                mov     cs:BUFPOS, di
                pop     di
                pop     si
                retn
APPEND          endp

;
; External Entry #68 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public INITATOMTABLE
INITATOMTABLE   proc far                ; CODE XREF: LOOKUPATOM+2F↓p

arg_0           = word ptr  6

                inc     bp              ; KERNEL_68
                push    bp
                mov     bp, sp
                push    ds
                mov     ax, ds:8
                or      ax, ax
                jnz     short loc_4A76
                mov     bx, [bp+arg_0]
                or      bx, bx
                jnz     short loc_4A5E
                mov     bl, 25h ; '%'

loc_4A5E:                               ; CODE XREF: INITATOMTABLE+11↑j
                push    bx
                inc     bx
                shl     bx, 1
                mov     ax, 40h ; '@'
                push    ax
                push    bx
                nop
                push    cs
                call    near ptr LOCALALLOC
                pop     dx
                jcxz    short loc_4A76
                mov     ds:8, ax
                mov     bx, ax
                mov     [bx], dx

loc_4A76:                               ; CODE XREF: INITATOMTABLE+A↑j
                                        ; INITATOMTABLE+24↑j
                mov     cx, ax
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
INITATOMTABLE   endp


; =============== S U B R O U T I N E =======================================


DELATOM         proc near               ; CODE XREF: DELETEATOM+19↓p
                mov     cl, 2
DELATOM         endp

; ---------------------------------------------------------------------------
                db 0BBh
;
; External Entry #70 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ADDATOM
ADDATOM         proc near
                mov     cl, 1
ADDATOM         endp

; ---------------------------------------------------------------------------
                db 0BBh
;
; External Entry #69 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public FINDATOM
FINDATOM        proc far
                mov     cl, 0           ; KERNEL_69
FINDATOM        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

LOOKUPATOM      proc far

var_5           = byte ptr -5
var_4           = word ptr -4
arg_0           = dword ptr  6

                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 4
                push    si
                push    di
                mov     [bp+var_5], cl
                mov     cx, word ptr [bp+arg_0+2]
                jcxz    short loc_4B0F
                push    cx
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                mov     [bp+var_4], ax
                les     si, [bp+arg_0]
                assume es:nothing
                cmp     byte ptr es:[si], 23h ; '#'
                jz      short loc_4AF2
                xor     ax, ax
                cmp     ds:8, ax
                jnz     short loc_4AD0
                push    ax
                nop
                push    cs
                call    near ptr INITATOMTABLE
                jcxz    short loc_4B1F
                mov     cx, [bp+var_4]
                jcxz    short loc_4ACD
                push    cx
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                mov     word ptr [bp+arg_0+2], dx

loc_4ACD:                               ; CODE XREF: LOOKUPATOM+37↑j
                                        ; LOOKUPATOM+74↓j
                les     si, [bp+arg_0]

loc_4AD0:                               ; CODE XREF: LOOKUPATOM+2A↑j
                xor     ax, ax
                xor     cx, cx
                xor     dx, dx
                cld

loc_4AD7:                               ; CODE XREF: LOOKUPATOM+65↓j
                lods    byte ptr es:[si]
                or      al, al
                jz      short loc_4B24
                inc     cl
                jz      short loc_4B1F
                call    MYUPPER
                mov     bx, dx
                rol     bx, 1
                add     bx, dx
                add     bx, ax
                ror     dx, 1
                add     dx, bx
                jmp     short loc_4AD7
; ---------------------------------------------------------------------------

loc_4AF2:                               ; CODE XREF: LOOKUPATOM+22↑j
                inc     si
                xor     cx, cx

loc_4AF5:                               ; CODE XREF: LOOKUPATOM+82↓j
                lods    byte ptr es:[si]
                or      al, al
                jz      short loc_4B12
                sub     al, 30h ; '0'
                cmp     al, 9
                ja      short loc_4ACD
                xor     ah, ah
                mov     bx, ax
                mov     al, 0Ah
                mul     cx
                add     ax, bx
                mov     cx, ax
                jmp     short loc_4AF5
; ---------------------------------------------------------------------------

loc_4B0F:                               ; CODE XREF: LOOKUPATOM+10↑j
                mov     cx, word ptr [bp+arg_0]

loc_4B12:                               ; CODE XREF: LOOKUPATOM+6E↑j
                jcxz    short loc_4B1F
                cmp     cx, 0C000h
                jnb     short loc_4B1F
                mov     ax, cx
                jmp     loc_4BE2
; ---------------------------------------------------------------------------

loc_4B1F:                               ; CODE XREF: LOOKUPATOM+32↑j
                                        ; LOOKUPATOM+54↑j ...
                xor     ax, ax
                jmp     loc_4BE2
; ---------------------------------------------------------------------------

loc_4B24:                               ; CODE XREF: LOOKUPATOM+50↑j
                jcxz    short loc_4B1F
                xchg    ax, dx
                mov     bx, ds:8
                div     word ptr [bx]
                lea     bx, [bx+2]
                shl     dx, 1
                add     bx, dx
                mov     dx, cx
                mov     ax, ss
                mov     es, ax

loc_4B3A:                               ; CODE XREF: LOOKUPATOM+DC↓j
                mov     si, [bx]
                or      si, si
                jz      short loc_4B69
                cmp     [si+4], dl
                jnz     short loc_4B65
                les     di, [bp+arg_0]
                lea     si, [si+5]
                mov     cx, dx

loc_4B4D:                               ; CODE XREF: LOOKUPATOM+D4↓j
                jcxz    short loc_4B61
                dec     cx
                lodsb
                call    MYUPPER
                mov     ah, al
                mov     al, es:[di]
                call    MYUPPER
                inc     di
                cmp     ah, al
                jz      short loc_4B4D

loc_4B61:                               ; CODE XREF: LOOKUPATOM:loc_4B4D↑j
                mov     si, [bx]
                jz      short loc_4B69

loc_4B65:                               ; CODE XREF: LOOKUPATOM+B8↑j
                lea     bx, [si]
                jmp     short loc_4B3A
; ---------------------------------------------------------------------------

loc_4B69:                               ; CODE XREF: LOOKUPATOM+B3↑j
                                        ; LOOKUPATOM+D8↑j
                xor     cx, cx
                mov     cl, [bp+var_5]
                jcxz    short loc_4BD7
                loop    loc_4B7B
                or      si, si
                jz      short loc_4B94
                inc     word ptr [si+2]
                jmp     short loc_4BD7
; ---------------------------------------------------------------------------

loc_4B7B:                               ; CODE XREF: LOOKUPATOM+E5↑j
                or      si, si
                jz      short loc_4BE2
                dec     word ptr [si+2]
                jg      short loc_4B90
                xor     di, di
                xchg    di, [si]
                mov     [bx], di
                push    si
                nop
                push    cs
                call    near ptr LOCALFREE

loc_4B90:                               ; CODE XREF: LOOKUPATOM+F7↑j
                xor     si, si
                jmp     short loc_4BD7
; ---------------------------------------------------------------------------

loc_4B94:                               ; CODE XREF: LOOKUPATOM+E9↑j
                mov     di, bx
                push    dx
                add     dx, 6
                mov     bx, 40h ; '@'
                push    bx
                push    dx
                nop
                push    cs
                call    near ptr LOCALALLOC
                pop     cx
                mov     si, ax
                or      si, si
                jz      short loc_4BD7
                mov     [di], si
                inc     word ptr [si+2]
                mov     [si+4], cl
                mov     cx, [bp+var_4]
                jcxz    short loc_4BC1
                push    cx
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                mov     word ptr [bp+arg_0+2], dx

loc_4BC1:                               ; CODE XREF: LOOKUPATOM+12B↑j
                mov     bx, si
                push    ds
                pop     es
                lea     di, [si+5]
                xor     cx, cx
                mov     cl, [si+4]
                inc     cx
                lds     si, [bp+arg_0]
                rep movsb
                push    es
                pop     ds
                mov     si, bx

loc_4BD7:                               ; CODE XREF: LOOKUPATOM+E3↑j
                                        ; LOOKUPATOM+EE↑j ...
                mov     ax, si
                shr     ax, 1
                shr     ax, 1
                jz      short loc_4BE2
                or      ax, 0C000h

loc_4BE2:                               ; CODE XREF: LOOKUPATOM+91↑j
                                        ; LOOKUPATOM+96↑j ...
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
LOOKUPATOM      endp

;
; External Entry #71 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public DELETEATOM
DELETEATOM      proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_71
                push    bp
                mov     bp, sp
                push    ds
                mov     bx, [bp+arg_0]
                cmp     bx, 0C000h
                jb      short loc_4C0D
                shl     bx, 1
                shl     bx, 1
                lea     bx, [bx+5]
                push    ds
                push    bx
                nop
                push    cs
                call    DELATOM
                jmp     short loc_4C0F
; ---------------------------------------------------------------------------

loc_4C0D:                               ; CODE XREF: DELETEATOM+C↑j
                xor     ax, ax

loc_4C0F:                               ; CODE XREF: DELETEATOM+1C↑j
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
DELETEATOM      endp

;
; External Entry #73 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETATOMHANDLE
GETATOMHANDLE   proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_73
                push    bp
                mov     bp, sp
                push    ds
                mov     ax, [bp+arg_0]
                cmp     ax, 0C000h
                jb      short loc_4C2D
                shl     ax, 1
                shl     ax, 1
                jmp     short loc_4C2F
; ---------------------------------------------------------------------------

loc_4C2D:                               ; CODE XREF: GETATOMHANDLE+B↑j
                xor     ax, ax

loc_4C2F:                               ; CODE XREF: GETATOMHANDLE+11↑j
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
GETATOMHANDLE   endp

;
; External Entry #72 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETATOMNAME
GETATOMNAME     proc far

arg_0           = word ptr  6
arg_2           = dword ptr  8
arg_6           = word ptr  0Ch

                inc     bp              ; KERNEL_72
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                les     di, [bp+arg_2]
                xor     cx, cx
                mov     es:[di], cl
                mov     bx, [bp+arg_6]
                cmp     bx, 0C000h
                jb      short loc_4C7A
                shl     bx, 1
                shl     bx, 1
                cmp     [bx+2], cx
                jz      short loc_4C76
                mov     cl, [bx+4]
                jcxz    short loc_4C76
                cmp     [bp+arg_0], cx
                jg      short loc_4C69
                mov     cx, [bp+arg_0]
                dec     cx

loc_4C69:                               ; CODE XREF: GETATOMNAME+29↑j
                lea     si, [bx+5]
                mov     ax, cx
                rep movsb
                mov     byte ptr es:[di], 0
                jmp     short loc_4CAA
; ---------------------------------------------------------------------------

loc_4C76:                               ; CODE XREF: GETATOMNAME+1F↑j
                                        ; GETATOMNAME+24↑j ...
                xor     ax, ax
                jmp     short loc_4CAA
; ---------------------------------------------------------------------------

loc_4C7A:                               ; CODE XREF: GETATOMNAME+16↑j
                or      bx, bx
                jz      short loc_4C76
                mov     al, 23h ; '#'
                stosb
                mov     ax, bx
                mov     bx, 0Ah
                mov     cx, [bp+arg_0]

loc_4C89:                               ; CODE XREF: GETATOMNAME+5B↓j
                xor     dx, dx
                div     bx
                push    dx
                dec     cx
                or      ax, ax
                jz      short loc_4C97
                jcxz    short loc_4C97
                jmp     short loc_4C89
; ---------------------------------------------------------------------------

loc_4C97:                               ; CODE XREF: GETATOMNAME+57↑j
                                        ; GETATOMNAME+59↑j
                sub     [bp+arg_0], cx
                mov     cx, [bp+arg_0]

loc_4C9D:                               ; CODE XREF: GETATOMNAME+67↓j
                pop     ax
                add     al, 30h ; '0'
                stosb
                loop    loc_4C9D
                xor     al, al
                stosb
                mov     ax, [bp+arg_0]
                inc     ax

loc_4CAA:                               ; CODE XREF: GETATOMNAME+3A↑j
                                        ; GETATOMNAME+3E↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
GETATOMNAME     endp ; sp-analysis failed

; ---------------------------------------------------------------------------
SZINISECTION    db '[]',0Dh,0Ah,'='
;
; External Entry #57 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETPROFILEINT
GETPROFILEINT   proc far                ; CODE XREF: BOOTDONE+F↓p
                                        ; BOOTDONE+2A↓p ...

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch
arg_8           = word ptr  0Eh

                inc     bp              ; KERNEL_57
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    cs
                pop     ds
                assume ds:cseg01
                push    [bp+arg_8]
                push    [bp+arg_6]
                push    [bp+arg_4]
                push    [bp+arg_2]
                call    GETSTRING
                mov     si, ax
                mov     ax, [bp+arg_0]
                cmp     cx, 0FFFFh
                jz      short loc_4CFC
                push    ds
                mov     ds, dx
                assume ds:nothing
                xor     ax, ax

loc_4CE3:                               ; CODE XREF: GETPROFILEINT+3D↓j
                mov     dx, 0Ah
                mov     bl, [si]
                sub     bl, 30h ; '0'
                jb      short loc_4CFB
                cmp     bl, 0Ah
                jnb     short loc_4CFB
                inc     si
                mul     dx
                xor     bh, bh
                add     ax, bx
                loop    loc_4CE3

loc_4CFB:                               ; CODE XREF: GETPROFILEINT+2F↑j
                                        ; GETPROFILEINT+34↑j
                pop     ds

loc_4CFC:                               ; CODE XREF: GETPROFILEINT+20↑j
                push    ax
                call    UNLOCKBUFFER
                pop     ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ah
GETPROFILEINT   endp

;
; External Entry #58 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GETPROFILESTRING
GETPROFILESTRING proc far

arg_0           = word ptr  6
arg_2           = dword ptr  8
arg_6           = dword ptr  0Ch
arg_A           = word ptr  10h
arg_C           = word ptr  12h
arg_E           = word ptr  14h
arg_10          = word ptr  16h

                inc     bp              ; KERNEL_58
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                push    cs
                pop     ds
                assume ds:cseg01
                mov     ax, [bp+arg_A]
                mov     dx, [bp+arg_C]
                or      ax, dx
                jnz     short loc_4D38
                push    [bp+arg_10]
                push    [bp+arg_E]
                push    word ptr [bp+arg_2+2]
                push    word ptr [bp+arg_2]
                push    [bp+arg_0]
                call    GETKEYS
                jnb     short loc_4D93
                jmp     short loc_4D52
; ---------------------------------------------------------------------------
                align 2

loc_4D38:                               ; CODE XREF: GETPROFILESTRING+11↑j
                push    [bp+arg_10]
                push    [bp+arg_E]
                push    [bp+arg_C]
                push    [bp+arg_A]
                call    GETSTRING
                cmp     cx, 0FFFFh
                jz      short loc_4D52
                mov     word ptr [bp+arg_6+2], dx
                mov     word ptr [bp+arg_6], ax

loc_4D52:                               ; CODE XREF: GETPROFILESTRING+27↑j
                                        ; GETPROFILESTRING+3C↑j
                les     di, [bp+arg_6]
                call    loc_51D1
                mov     al, es:[di-1]
                les     di, [bp+arg_6]
                cmp     cx, 2
                jb      short loc_4D77
                mov     ah, es:[di]
                cmp     ah, al
                jnz     short loc_4D77
                cmp     al, 27h ; '''
                jz      short loc_4D73
                cmp     al, 22h ; '"'
                jnz     short loc_4D77

loc_4D73:                               ; CODE XREF: GETPROFILESTRING+5F↑j
                sub     cx, 2
                inc     di

loc_4D77:                               ; CODE XREF: GETPROFILESTRING+54↑j
                                        ; GETPROFILESTRING+5B↑j ...
                mov     dx, [bp+arg_0]
                dec     dx
                cmp     cx, dx
                jbe     short loc_4D81
                mov     cx, dx

loc_4D81:                               ; CODE XREF: GETPROFILESTRING+6F↑j
                push    ds
                push    es
                pop     ds
                assume ds:nothing
                mov     si, di
                push    cx
                les     di, [bp+arg_2]
                rep movsb
                xor     al, al
                mov     es:[di], al
                pop     ax
                pop     ds

loc_4D93:                               ; CODE XREF: GETPROFILESTRING+25↑j
                push    ax
                call    UNLOCKBUFFER
                pop     ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    12h
GETPROFILESTRING endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETKEYS         proc near               ; CODE XREF: GETPROFILESTRING+22↑p

arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                xor     di, di
                call    BUFFERINIT
                push    ds
                xor     cx, cx
                mov     di, ax
                or      ax, dx
                jnz     short loc_4DBC
                jmp     short loc_4E33
; ---------------------------------------------------------------------------
                align 2

loc_4DBC:                               ; CODE XREF: GETKEYS+12↑j
                dec     [bp+arg_0]
                mov     es, dx

loc_4DC1:                               ; CODE XREF: GETKEYS+39↓j
                cmp     byte ptr es:[di], 5Bh ; '['
                jnz     short loc_4DD2
                inc     di
                lds     si, [bp+arg_6]
                mov     bl, 5Dh ; ']'
                call    PROFILESTRINGTOLOWER
                jz      short loc_4DE2

loc_4DD2:                               ; CODE XREF: GETKEYS+20↑j
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                mov     al, es:[di]
                or      al, al
                jnz     short loc_4DC1
                jmp     short loc_4E33
; ---------------------------------------------------------------------------

loc_4DE2:                               ; CODE XREF: GETKEYS+2B↑j
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                lds     si, [bp+arg_2]
                xor     dx, dx

loc_4DEE:                               ; CODE XREF: GETKEYS+55↓j
                                        ; GETKEYS+83↓j
                mov     bx, di

loc_4DF0:                               ; CODE XREF: GETKEYS+5D↓j
                mov     al, es:[di]
                inc     di
                cmp     al, 3Dh ; '='
                jz      short loc_4E06
                cmp     al, 0Ah
                jz      short loc_4DEE
                cmp     al, 5Bh ; '['
                jz      short loc_4E2A
                or      al, al
                jnz     short loc_4DF0
                jmp     short loc_4E2A
; ---------------------------------------------------------------------------

loc_4E06:                               ; CODE XREF: GETKEYS+51↑j
                mov     di, bx

loc_4E08:                               ; CODE XREF: GETKEYS+7A↓j
                mov     al, es:[di]
                inc     di
                cmp     al, 3Dh ; '='
                jnz     short loc_4E12
                xor     al, al

loc_4E12:                               ; CODE XREF: GETKEYS+69↑j
                mov     [si], al
                inc     dx
                inc     si
                cmp     dx, [bp+arg_0]
                jb      short loc_4E1D
                dec     si
                dec     dx

loc_4E1D:                               ; CODE XREF: GETKEYS+74↑j
                or      al, al
                jnz     short loc_4E08
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                jmp     short loc_4DEE
; ---------------------------------------------------------------------------

loc_4E2A:                               ; CODE XREF: GETKEYS+59↑j
                                        ; GETKEYS+5F↑j
                xor     al, al
                mov     [si], al
                mov     ax, dx
                clc
                jmp     short loc_4E34
; ---------------------------------------------------------------------------

loc_4E33:                               ; CODE XREF: GETKEYS+14↑j
                                        ; GETKEYS+3B↑j
                stc

loc_4E34:                               ; CODE XREF: GETKEYS+8C↑j
                pop     ds
                pop     ds
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    0Ah
GETKEYS         endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETSTRING       proc near               ; CODE XREF: GETPROFILEINT+15↑p
                                        ; GETPROFILESTRING+36↑p

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    ds
                xor     di, di
                call    BUFFERINIT
                push    ds
                mov     cx, 0FFFFh
                mov     di, ax
                or      ax, dx
                jz      short loc_4EA9
                mov     es, dx

loc_4E55:                               ; CODE XREF: GETSTRING+34↓j
                cmp     byte ptr es:[di], 5Bh ; '['
                jnz     short loc_4E66
                inc     di
                lds     si, [bp+arg_4]
                mov     bl, 5Dh ; ']'
                call    PROFILESTRINGTOLOWER
                jz      short loc_4E76

loc_4E66:                               ; CODE XREF: GETSTRING+1B↑j
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                mov     al, es:[di]
                or      al, al
                jnz     short loc_4E55
                jmp     short loc_4E88
; ---------------------------------------------------------------------------

loc_4E76:                               ; CODE XREF: GETSTRING+26↑j
                                        ; GETSTRING+57↓j
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                mov     al, es:[di]
                or      al, al
                jz      short loc_4E88
                cmp     al, 5Bh ; '['
                jnz     short loc_4E8D

loc_4E88:                               ; CODE XREF: GETSTRING+36↑j
                                        ; GETSTRING+44↑j
                mov     cx, 0FFFFh
                jmp     short loc_4EA9
; ---------------------------------------------------------------------------

loc_4E8D:                               ; CODE XREF: GETSTRING+48↑j
                lds     si, [bp+arg_0]
                mov     bl, 3Dh ; '='
                call    PROFILESTRINGTOLOWER
                jnz     short loc_4E76
                inc     di
                mov     dx, es
                mov     bx, di
                mov     al, 0Dh
                mov     cx, 0FFFFh
                repne scasb
                inc     cx
                inc     cx
                neg     cx
                mov     ax, bx

loc_4EA9:                               ; CODE XREF: GETSTRING+13↑j
                                        ; GETSTRING+4D↑j
                pop     ds
                pop     ds
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    8
GETSTRING       endp


; =============== S U B R O U T I N E =======================================


PROFILESTRINGTOLOWER proc near          ; CODE XREF: GETKEYS+28↑p
                                        ; GETSTRING+23↑p ...
                mov     al, es:[di]
                cmp     al, bl
                jnz     short loc_4EC0
                mov     al, [si]
                or      al, al
                jmp     short locret_4ED2
; ---------------------------------------------------------------------------

loc_4EC0:                               ; CODE XREF: PROFILESTRINGTOLOWER+5↑j
                call    MYLOWER
                mov     cl, [si]
                xchg    al, cl
                call    MYLOWER
                xchg    cl, al
                inc     si
                inc     di
                cmp     al, cl
                jz      short PROFILESTRINGTOLOWER

locret_4ED2:                            ; CODE XREF: PROFILESTRINGTOLOWER+B↑j
                retn
PROFILESTRINGTOLOWER endp


; =============== S U B R O U T I N E =======================================


BUFFERINIT      proc near               ; CODE XREF: GETKEYS+8↑p
                                        ; GETSTRING+8↑p ...

; FUNCTION CHUNK AT 4F71 SIZE 00000071 BYTES

                push    cs
                pop     ds
                assume ds:cseg01
                mov     ax, BUFFER
                or      ax, ax
                jz      short loc_4EE9
                call    LOCKBUFFER
                mov     bx, ax
                or      bx, dx
                jz      short loc_4EE6
                retn
; ---------------------------------------------------------------------------

loc_4EE6:                               ; CODE XREF: BUFFERINIT+10↑j
                call    BUFFERFREE

loc_4EE9:                               ; CODE XREF: BUFFERINIT+7↑j
                mov     ax, di
                or      di, di
                jz      short loc_4EF1
                mov     ah, 10h

loc_4EF1:                               ; CODE XREF: BUFFERINIT+1A↑j
                mov     dx, 116h
                mov     bx, 0C6h
                cmp     byte ptr [bx], 0
                jz      short loc_4F01
                mov     dx, 138h
                mov     ah, 0A0h

loc_4F01:                               ; CODE XREF: BUFFERINIT+27↑j
                push    ds
                push    dx
                push    ds
                push    bx
                push    ax
                nop
                push    cs
                call    near ptr OPENFILE
                mov     HFILE, ax
                inc     ax
                jz      short loc_4F62
                mov     ax, 4202h
                call    loc_500F
                add     ax, 3
                adc     dx, 0
                mov     bx, 2042h
                push    bx
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr GLOBALALLOC
                mov     BUFFER, ax
                or      ax, ax
                jz      short loc_4F62
                call    LOCKBUFFER
                call    MOVEBUFFERPOINTER
                push    ds
                lds     dx, dword ptr BUFADDR
                assume ds:nothing
                mov     ax, 2020h
                push    si
                mov     si, dx
                mov     [si], ax
                pop     si
                mov     cx, 0FFFFh
                mov     ah, 3Fh ; '?'
                int     21h             ; DOS - 2+ - READ FROM FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to read
                                        ; DS:DX -> buffer
                jb      short loc_4F59
                mov     cx, ax
                pop     ds
                cmp     cx, 2
                jge     short loc_4F57
                mov     cx, 2

loc_4F57:                               ; CODE XREF: BUFFERINIT+7F↑j
                jmp     short loc_4F71
; ---------------------------------------------------------------------------

loc_4F59:                               ; CODE XREF: BUFFERINIT+77↑j
                call    UNLOCKBUFFER
BUFFERINIT      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


BUFFERFREE      proc near               ; CODE XREF: BUFFERINIT:loc_4EE6↑p
                                        ; WRITEPROFILESTRING+192↓p
                push    si
                nop
                push    cs
                call    near ptr GLOBALFREE

loc_4F62:                               ; CODE XREF: BUFFERINIT+3C↑j
                                        ; BUFFERINIT+5A↑j
                xor     ax, ax
                xor     dx, dx
                mov     ds:22h, ax
                mov     ds:24h, ax
                mov     ds:26h, dx
                retn
BUFFERFREE      endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR BUFFERINIT

loc_4F71:                               ; CODE XREF: BUFFERINIT:loc_4F57↑j
                push    ds
                les     di, ds:24h
                lds     si, ds:24h

loc_4F7A:                               ; CODE XREF: BUFFERINIT:loc_4F81↓j
                                        ; BUFFERINIT+C7↓j ...
                lodsb
                cmp     al, 20h ; ' '
                jz      short loc_4F81
                cmp     al, 9

loc_4F81:                               ; CODE XREF: BUFFERINIT+AA↑j
                loope   loc_4F7A
                jcxz    short loc_4FBD
                dec     si
                inc     cx

loc_4F87:                               ; CODE XREF: BUFFERINIT+BF↓j
                                        ; BUFFERINIT+C3↓j ...
                lodsb
                stosb
                dec     cx
                cmp     al, 3Dh ; '='
                jz      short loc_4FA0
                jcxz    short loc_4FBD
                cmp     al, 20h ; ' '
                jz      short loc_4F87
                cmp     al, 9
                jz      short loc_4F87
                cmp     al, 0Ah
                jz      short loc_4F7A
                mov     bx, di
                jmp     short loc_4F87
; ---------------------------------------------------------------------------

loc_4FA0:                               ; CODE XREF: BUFFERINIT+B9↑j
                mov     di, bx
                stosb
                jcxz    short loc_4FBD

loc_4FA5:                               ; CODE XREF: BUFFERINIT:loc_4FAC↓j
                lodsb
                cmp     al, 20h ; ' '
                jz      short loc_4FAC
                cmp     al, 9

loc_4FAC:                               ; CODE XREF: BUFFERINIT+D5↑j
                loope   loc_4FA5
                jcxz    short loc_4FBD
                dec     si
                inc     cx

loc_4FB2:                               ; CODE XREF: BUFFERINIT+E8↓j
                lodsb
                stosb
                dec     cx
                jz      short loc_4FBD
                cmp     al, 0Ah
                jz      short loc_4F7A
                jmp     short loc_4FB2
; ---------------------------------------------------------------------------

loc_4FBD:                               ; CODE XREF: BUFFERINIT+B0↑j
                                        ; BUFFERINIT+BB↑j ...
                dec     di
                cmp     byte ptr es:[di], 1Ah
                jz      short loc_4FBD
                inc     di
                mov     ax, 0A0Dh
                stosw
                xor     ax, ax
                stosb
                pop     ds
                mov     si, ds:22h
                push    si
                nop
                push    cs
                call    near ptr GLOBALUNLOCK
                xor     ax, ax
                push    si
                push    ax
                push    di
                push    ax
                nop
                push    cs
                call    near ptr GLOBALREALLOC
; END OF FUNCTION CHUNK FOR BUFFERINIT

; =============== S U B R O U T I N E =======================================


LOCKBUFFER      proc near               ; CODE XREF: BUFFERINIT+9↑p
                                        ; BUFFERINIT+5C↑p
                mov     si, ax
                push    ax
                nop
                push    cs
                call    near ptr GLOBALLOCK
                mov     ds:24h, ax
                mov     ds:26h, dx
                retn
LOCKBUFFER      endp


; =============== S U B R O U T I N E =======================================


UNLOCKBUFFER    proc near               ; CODE XREF: GETPROFILEINT+41↑p
                                        ; GETPROFILESTRING+86↑p ...
                mov     si, ds:22h
                push    si
                nop
                push    cs
                call    near ptr GLOBALUNLOCK
                mov     bx, 0FFFFh
                xchg    bx, ds:28h
                inc     bx
                jz      short locret_500B
                dec     bx
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle

locret_500B:                            ; CODE XREF: UNLOCKBUFFER+12↑j
                retn
UNLOCKBUFFER    endp


; =============== S U B R O U T I N E =======================================


MOVEBUFFERPOINTER proc near             ; CODE XREF: BUFFERINIT+5F↑p
                                        ; WRITEPROFILESTRING+2A↓p
                mov     ax, 4200h

loc_500F:                               ; CODE XREF: BUFFERINIT+41↑p
                mov     bx, ds:28h
                xor     cx, cx
                xor     dx, dx
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                retn
MOVEBUFFERPOINTER endp

;
; External Entry #59 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public WRITEPROFILESTRING
WRITEPROFILESTRING proc far

var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = dword ptr -6
arg_0           = dword ptr  6
arg_4           = dword ptr  0Ah
arg_8           = dword ptr  0Eh

                inc     bp              ; KERNEL_59
                push    bp
                mov     bp, sp
                push    ds
                sub     sp, 8
                push    si
                push    di
                push    cs
                pop     ds
                assume ds:cseg01
                xor     ax, ax
                xchg    ax, BUFFER
                push    ax
                nop
                push    cs
                call    near ptr GLOBALFREE
                mov     di, 2
                call    BUFFERINIT
                mov     di, ax
                or      ax, dx
                jnz     short loc_5041
                jmp     loc_51B2
; ---------------------------------------------------------------------------

loc_5041:                               ; CODE XREF: WRITEPROFILESTRING+22↑j
                push    ds
                mov     es, dx
                call    MOVEBUFFERPOINTER

loc_5047:                               ; CODE XREF: WRITEPROFILESTRING+4A↓j
                cmp     byte ptr es:[di], 5Bh ; '['
                jnz     short loc_5058
                inc     di
                lds     si, [bp+arg_8]
                assume ds:nothing
                mov     bl, 5Dh ; ']'
                call    PROFILESTRINGTOLOWER
                jz      short loc_506D

loc_5058:                               ; CODE XREF: WRITEPROFILESTRING+31↑j
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                mov     al, es:[di]
                or      al, al
                jnz     short loc_5047
                mov     [bp+var_8], 2
                jmp     short loc_509F
; ---------------------------------------------------------------------------

loc_506D:                               ; CODE XREF: WRITEPROFILESTRING+3C↑j
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb
                jmp     short loc_5087
; ---------------------------------------------------------------------------

loc_5076:                               ; CODE XREF: WRITEPROFILESTRING+76↓j
                lds     si, [bp+arg_4]
                mov     bl, 3Dh ; '='
                call    PROFILESTRINGTOLOWER
                jz      short loc_5099
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb

loc_5087:                               ; CODE XREF: WRITEPROFILESTRING+5A↑j
                mov     al, es:[di]
                cmp     al, 5Bh ; '['
                jz      short loc_5092
                or      al, al
                jnz     short loc_5076

loc_5092:                               ; CODE XREF: WRITEPROFILESTRING+72↑j
                mov     [bp+var_8], 4
                jmp     short loc_509F
; ---------------------------------------------------------------------------

loc_5099:                               ; CODE XREF: WRITEPROFILESTRING+64↑j
                inc     di
                mov     [bp+var_8], 1

loc_509F:                               ; CODE XREF: WRITEPROFILESTRING+51↑j
                                        ; WRITEPROFILESTRING+7D↑j
                cmp     [bp+var_8], 1
                jz      short loc_50B4

loc_50A5:                               ; CODE XREF: WRITEPROFILESTRING+91↓j
                                        ; WRITEPROFILESTRING+95↓j
                dec     di
                mov     al, es:[di]
                cmp     al, 0Dh
                jz      short loc_50A5
                cmp     al, 0Ah
                jz      short loc_50A5
                add     di, 3

loc_50B4:                               ; CODE XREF: WRITEPROFILESTRING+89↑j
                pop     ds
                push    ds
                mov     bx, ds:28h
                cmp     bx, 0FFFFh
                jnz     short loc_50E0
                mov     dx, 116h
                xor     cx, cx
                mov     ah, 3Ch ; '<'
                int     21h             ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)
                                        ; CX = attributes for file
                                        ; DS:DX -> ASCIZ filename (may include drive and path)
                mov     ds:28h, ax
                mov     bx, ax
                jb      short loc_50D7
                xor     cx, cx
                mov     ah, 40h ; '@'
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                jnb     short loc_50E0

loc_50D7:                               ; CODE XREF: WRITEPROFILESTRING+B3↑j
                                        ; BUFFERWRITE+F↓j
                pop     ds
                call    UNLOCKBUFFER
                xor     ax, ax
                jmp     loc_51B2
; ---------------------------------------------------------------------------

loc_50E0:                               ; CODE XREF: WRITEPROFILESTRING+A3↑j
                                        ; WRITEPROFILESTRING+BB↑j
                xor     cx, cx
                mov     [bp+var_A], cx
                mov     word ptr [bp+var_6], di
                mov     word ptr [bp+var_6+2], es
                mov     cx, di
                push    es
                pop     ds
                xor     dx, dx
                call    near ptr BUFFERWRITE
                cmp     [bp+var_8], 2
                jnz     short loc_5125
                pop     ds
                push    ds
                mov     dx, 4CB9h
                mov     cx, 2
                call    near ptr BUFFERWRITE
                mov     dx, 4CB7h
                mov     cx, 1
                call    near ptr BUFFERWRITE
                les     di, [bp+arg_8]
                call    loc_51D1
                lds     dx, [bp+arg_8]
                call    near ptr BUFFERWRITE
                pop     ds
                push    ds
                mov     dx, 4CB8h
                mov     cx, 3
                call    near ptr BUFFERWRITE

loc_5125:                               ; CODE XREF: WRITEPROFILESTRING+DE↑j
                cmp     [bp+var_8], 1
                jz      short loc_5142
                les     di, [bp+arg_4]
                call    loc_51D1
                lds     dx, [bp+arg_4]
                call    near ptr BUFFERWRITE
                pop     ds
                push    ds
                mov     dx, 4CBBh
                mov     cx, 1
                call    near ptr BUFFERWRITE

loc_5142:                               ; CODE XREF: WRITEPROFILESTRING+10F↑j
                les     di, [bp+arg_0]
                call    loc_51D1
                lds     dx, [bp+arg_0]
                call    near ptr BUFFERWRITE
                pop     ds
                push    ds
                mov     dx, 4CB9h
                mov     cx, 2
                call    near ptr BUFFERWRITE
                les     di, [bp+var_6]
                cmp     [bp+var_8], 1
                jnz     short loc_5169
                mov     al, 0Ah
                mov     cx, 0FFFFh
                repne scasb

loc_5169:                               ; CODE XREF: WRITEPROFILESTRING+146↑j
                mov     dx, di
                xor     al, al
                mov     cx, 0FFFFh
                repne scasb
                sub     di, 3
                sub     di, dx
                mov     cx, di
                or      cx, cx
                jle     short loc_51A3
                mov     si, dx
                mov     dx, cx
                add     dx, [bp+var_A]
                xor     cx, cx
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                xor     cx, cx
                call    near ptr BUFFERWRITE
                mov     dx, [bp+var_A]
                xor     cx, cx
                mov     ax, 4200h
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method: offset from beginning of file
                push    es
                pop     ds
                mov     cx, di
                mov     dx, si
                call    near ptr BUFFERWRITE

loc_51A3:                               ; CODE XREF: WRITEPROFILESTRING+161↑j
                xor     cx, cx
                call    near ptr BUFFERWRITE
                pop     ds
                call    UNLOCKBUFFER
                call    BUFFERFREE
                mov     ax, 1

loc_51B2:                               ; CODE XREF: WRITEPROFILESTRING+24↑j
                                        ; WRITEPROFILESTRING+C3↑j
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    0Ch
WRITEPROFILESTRING endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


BUFFERWRITE     proc far                ; CODE XREF: WRITEPROFILESTRING+D7↑p
                                        ; WRITEPROFILESTRING+E8↑p ...
                mov     ah, 40h ; '@'
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                jb      short loc_51CD
                cmp     ax, cx
                jnz     short loc_51CD
                add     [bp-0Ah], cx
                retn
; ---------------------------------------------------------------------------

loc_51CD:                               ; CODE XREF: BUFFERWRITE+4↑j
                                        ; BUFFERWRITE+8↑j
                pop     ax
                jmp     loc_50D7
; ---------------------------------------------------------------------------

loc_51D1:                               ; CODE XREF: GETPROFILESTRING+47↑p
                                        ; WRITEPROFILESTRING+F7↑p ...
                mov     cx, di
                dec     di

loc_51D4:                               ; CODE XREF: BUFFERWRITE+1A↓j
                inc     di
                cmp     byte ptr es:[di], 0Dh
                ja      short loc_51D4
                neg     cx
                add     cx, di
                retn
BUFFERWRITE     endp ; sp-analysis failed

;
; External Entry #85 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public _LOPEN
_LOPEN          proc near
                mov     ch, 3Dh ; '='   ; KERNEL_85
_LOPEN          endp

; ---------------------------------------------------------------------------
                db 0BBh
;
; External Entry #83 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public _LCREAT
_LCREAT         proc far
                mov     ch, 3Ch ; '<'   ; KERNEL_83
                mov     bx, sp
                push    ds
                mov     dx, ss:[bx+6]
                mov     ds, word ptr ss:[bx+8]
                mov     cl, ss:[bx+4]
                mov     ax, cx
                xor     ch, ch
                int     21h             ; DOS 2+ - CREAT - CREATE OR TRUNCATE FILE
                                        ; (see CH mov above)
                jnb     short loc_51FF
                mov     ax, 0FFFFh

loc_51FF:                               ; CODE XREF: _LCREAT+17↑j
                pop     ds
                retf    6
_LCREAT         endp

;
; External Entry #81 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public _LCLOSE
_LCLOSE         proc far                ; CODE XREF: STARTMODULE+42↑p
                                        ; STARTMODULE+63↑p ...
                mov     bx, sp          ; KERNEL_81
                mov     bx, ss:[bx+4]
                mov     ah, 3Eh ; '>'
                int     21h             ; DOS - 2+ - CLOSE A FILE WITH HANDLE
                                        ; BX = file handle
                mov     ax, 0FFFFh
                jb      short locret_5213
                inc     ax

locret_5213:                            ; CODE XREF: _LCLOSE+D↑j
                retf    2
_LCLOSE         endp

;
; External Entry #84 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public _LLSEEK
_LLSEEK         proc far                ; CODE XREF: FINDSEGSYMS+1F4↓p
                                        ; FINDSEGSYMS+24B↓p ...
                mov     bx, sp          ; KERNEL_84
                mov     dx, ss:[bx+6]
                mov     cx, ss:[bx+8]
                mov     ax, ss:[bx+4]
                mov     bx, ss:[bx+0Ah]
                mov     ah, 42h ; 'B'
                int     21h             ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
                                        ; AL = method:
                                        ; 0-from beginnig,1-from current,2-from end
                jnb     short locret_5232
                mov     ax, 0FFFFh
                cwd

locret_5232:                            ; CODE XREF: _LLSEEK+16↑j
                retf    8
_LLSEEK         endp

;
; External Entry #82 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public _LREAD
_LREAD          proc near               ; CODE XREF: FINDSEGSYMS+170↓p
                                        ; FINDSEGSYMS+18D↓p ...
                mov     cl, 3Fh ; '?'   ; KERNEL_82
_LREAD          endp

; ---------------------------------------------------------------------------
                db 0BBh
;
; External Entry #86 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public _LWRITE
_LWRITE         proc far                ; CODE XREF: KERNELERROR+26↓p
                                        ; KERNELERROR+8A↓p ...
                mov     cl, 40h ; '@'   ; KERNEL_86
                mov     bx, sp
                push    ds
                mov     ah, cl
                mov     dx, ss:[bx+6]
                mov     ds, word ptr ss:[bx+8]
                mov     cx, ss:[bx+4]
                mov     bx, ss:[bx+0Ah]
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                jnb     short loc_5256
                mov     ax, 0FFFFh

loc_5256:                               ; CODE XREF: _LWRITE+19↑j
                pop     ds
                retf    8
_LWRITE         endp

;
; External Entry #90 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LSTRLEN
LSTRLEN         proc far                ; CODE XREF: LOADMODULE+23↑p
                                        ; KERNELERROR+20↓p ...
                mov     bx, sp          ; KERNEL_90
                push    di
                les     di, ss:[bx+4]
                cld
                xor     ax, ax
                mov     cx, 0FFFFh
                repne scasb
                mov     ax, cx
                neg     ax
                dec     ax
                dec     ax
                pop     di
                retf    4
LSTRLEN         endp


; =============== S U B R O U T I N E =======================================


INTERNALSTRFUNC proc near               ; CODE XREF: LSTRCPY↓p
                                        ; LSTRCAT↓p ...
                pop     dx
                mov     bx, sp
                push    ds
                push    si
                push    di
                lds     si, ss:[bx+4]
                les     di, ss:[bx+8]
                cld
                jmp     dx
INTERNALSTRFUNC endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR LSTRCPY
;   ADDITIONAL PARENT FUNCTION LSTRCMP
;   ADDITIONAL PARENT FUNCTION ANSIPREV

loc_5284:                               ; CODE XREF: LSTRCPY+E↓j
                                        ; LSTRCMP:loc_52EE↓j ...
                pop     di
                pop     si
                pop     ds
                retf    8
; END OF FUNCTION CHUNK FOR LSTRCPY
;
; External Entry #88 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LSTRCPY
LSTRCPY         proc far

; FUNCTION CHUNK AT 5284 SIZE 00000006 BYTES

                call    INTERNALSTRFUNC ; KERNEL_88

loc_528D:                               ; CODE XREF: LSTRCPY+7↓j
                                        ; LSTRCAT+B↓j
                lodsb
                stosb
                or      al, al
                jnz     short loc_528D
                mov     ax, di
                dec     ax
                mov     dx, es
                jmp     short loc_5284
LSTRCPY         endp ; sp-analysis failed

;
; External Entry #89 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LSTRCAT
LSTRCAT         proc far
                call    INTERNALSTRFUNC ; KERNEL_89
                xor     ax, ax
                mov     cx, 0FFFFh
                repne scasb
                dec     di
                jmp     short loc_528D
LSTRCAT         endp

;
; External Entry #87 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LSTRCMP
LSTRCMP         proc far

; FUNCTION CHUNK AT 5284 SIZE 00000006 BYTES

                call    INTERNALSTRFUNC ; KERNEL_87

loc_52AA:                               ; CODE XREF: LSTRCMP+36↓j
                xor     ax, ax
                cmp     [si], al
                jz      short loc_52E7
                cmp     es:[di], al
                jz      short loc_52E4
                lodsb
                call    ISKANJI
                jb      short loc_52C0
                mov     ah, [si]
                inc     si
                jmp     short loc_52C5
; ---------------------------------------------------------------------------

loc_52C0:                               ; CODE XREF: LSTRCMP+12↑j
                call    MYLOWER
                xor     ah, ah

loc_52C5:                               ; CODE XREF: LSTRCMP+17↑j
                mov     bx, ax
                mov     al, es:[di]
                inc     di
                call    ISKANJI
                jb      short loc_52D6
                mov     ah, es:[di]
                inc     di
                jmp     short loc_52DB
; ---------------------------------------------------------------------------

loc_52D6:                               ; CODE XREF: LSTRCMP+27↑j
                call    MYLOWER
                xor     ah, ah

loc_52DB:                               ; CODE XREF: LSTRCMP+2D↑j
                cmp     ax, bx
                jz      short loc_52AA
                mov     ax, 0
                jb      short loc_52ED

loc_52E4:                               ; CODE XREF: LSTRCMP+C↑j
                inc     ax
                jmp     short loc_52EE
; ---------------------------------------------------------------------------

loc_52E7:                               ; CODE XREF: LSTRCMP+7↑j
                cmp     byte ptr es:[di], 0
                jz      short loc_52EE

loc_52ED:                               ; CODE XREF: LSTRCMP+3B↑j
                dec     ax

loc_52EE:                               ; CODE XREF: LSTRCMP+3E↑j
                                        ; LSTRCMP+44↑j
                jmp     short loc_5284
LSTRCMP         endp ; sp-analysis failed

;
; External Entry #79 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ANSIUPPER
ANSIUPPER       proc far
                mov     bx, sp          ; KERNEL_79
                push    di
                push    si
                les     di, ss:[bx+4]
                mov     cx, es
                mov     ax, di
                call    MYUPPER
                jcxz    short loc_530A
                call    MYANSIUPPER
                mov     dx, es
                mov     ax, ss:[bx+4]

loc_530A:                               ; CODE XREF: ANSIUPPER+F↑j
                pop     si
                pop     di
                retf    4
ANSIUPPER       endp

;
; External Entry #80 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ANSILOWER
ANSILOWER       proc far
                mov     bx, sp          ; KERNEL_80
                push    di
                push    si
                les     di, ss:[bx+4]
                mov     cx, es
                mov     ax, di
                call    MYLOWER
                jcxz    short loc_5329
                call    MYANSILOWER
                mov     dx, es
                mov     ax, ss:[bx+4]

loc_5329:                               ; CODE XREF: ANSILOWER+F↑j
                pop     si
                pop     di
                retf    4
ANSILOWER       endp

;
; External Entry #78 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ANSIPREV
ANSIPREV        proc far

; FUNCTION CHUNK AT 5284 SIZE 00000006 BYTES

                call    INTERNALSTRFUNC ; KERNEL_78
                cmp     si, di
                jz      short loc_5350
                dec     si
                cmp     cs:FFAREAST, 0
                jz      short loc_5350
                xchg    di, si
                inc     di

loc_5341:                               ; CODE XREF: ANSIPREV+1E↓j
                mov     dx, si
                lodsb
                call    ISKANJI
                jb      short loc_534A
                inc     si

loc_534A:                               ; CODE XREF: ANSIPREV+19↑j
                cmp     si, di
                jb      short loc_5341
                mov     si, dx

loc_5350:                               ; CODE XREF: ANSIPREV+5↑j
                                        ; ANSIPREV+E↑j
                mov     ax, si
                mov     dx, ds
                jmp     loc_5284
ANSIPREV        endp ; sp-analysis failed

; ---------------------------------------------------------------------------
                db 2 dup(90h)
;
; External Entry #77 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public ANSINEXT
ANSINEXT        proc far
                mov     bx, sp          ; KERNEL_77
                push    di
                les     di, ss:[bx+4]
                mov     al, es:[di]
                or      al, al
                jz      short loc_536E
                inc     di
                call    ISKANJI
                jb      short loc_536E
                inc     di

loc_536E:                               ; CODE XREF: ANSINEXT+C↑j
                                        ; ANSINEXT+12↑j
                mov     ax, di
                mov     dx, es
                pop     di
                retf    4
ANSINEXT        endp


; =============== S U B R O U T I N E =======================================


MYANSIUPPER     proc near               ; CODE XREF: ANSIUPPER+11↑p
                cld
                mov     si, di

loc_5379:                               ; CODE XREF: MYANSIUPPER+D↓j
                                        ; MYANSIUPPER+15↓j
                lods    byte ptr es:[si]
                call    ISKANJI
                jb      short loc_5385
                inc     si
                inc     di
                inc     di
                jmp     short loc_5379
; ---------------------------------------------------------------------------

loc_5385:                               ; CODE XREF: MYANSIUPPER+8↑j
                call    MYUPPER
                stosb
                or      al, al
                jnz     short loc_5379
                retn
MYANSIUPPER     endp


; =============== S U B R O U T I N E =======================================


MYANSILOWER     proc near               ; CODE XREF: ANSILOWER+11↑p
                cld
                mov     si, di

loc_5391:                               ; CODE XREF: MYANSILOWER+D↓j
                                        ; MYANSILOWER+15↓j
                lods    byte ptr es:[si]
                call    ISKANJI
                jb      short loc_539D
                inc     si
                inc     di
                inc     di
                jmp     short loc_5391
; ---------------------------------------------------------------------------

loc_539D:                               ; CODE XREF: MYANSILOWER+8↑j
                call    MYLOWER
                stosb
                or      al, al
                jnz     short loc_5391
                retn
MYANSILOWER     endp


; =============== S U B R O U T I N E =======================================


MYUPPER         proc near               ; CODE XREF: LOADEXEHEADER+142↑p
                                        ; CMPRESSTR+1C↑p ...
                cmp     al, 61h ; 'a'
                jb      short locret_53B8
                cmp     al, 7Ah ; 'z'
                jbe     short loc_53B6
                cmp     al, 0E0h
                jb      short locret_53B8
                cmp     al, 0FEh
                ja      short locret_53B8

loc_53B6:                               ; CODE XREF: MYUPPER+6↑j
                sub     al, 20h ; ' '

locret_53B8:                            ; CODE XREF: MYUPPER+2↑j
                                        ; MYUPPER+A↑j ...
                retn
MYUPPER         endp


; =============== S U B R O U T I N E =======================================


MYLOWER         proc near               ; CODE XREF: PROFILESTRINGTOLOWER:loc_4EC0↑p
                                        ; PROFILESTRINGTOLOWER+14↑p ...
                cmp     al, 41h ; 'A'
                jb      short locret_53CB
                cmp     al, 5Ah ; 'Z'
                jbe     short loc_53C9
                cmp     al, 0C0h
                jb      short locret_53CB
                cmp     al, 0DEh
                ja      short locret_53CB

loc_53C9:                               ; CODE XREF: MYLOWER+6↑j
                add     al, 20h ; ' '

locret_53CB:                            ; CODE XREF: MYLOWER+2↑j
                                        ; MYLOWER+A↑j ...
                retn
MYLOWER         endp


; =============== S U B R O U T I N E =======================================


ISKANJI         proc near               ; CODE XREF: LSTRCMP+F↑p
                                        ; LSTRCMP+24↑p ...
                cmp     cs:FFAREAST, 1
                jb      short locret_53F9
                mov     cx, word ptr cs:KEYINFO ; ""
                cmp     cl, ch
                ja      short loc_53F8
                cmp     al, cl
                jb      short loc_53E5
                cmp     al, ch
                jbe     short loc_53F6

loc_53E5:                               ; CODE XREF: ISKANJI+13↑j
                mov     cx, word ptr cs:KEYINFO+2 ; ""
                cmp     cl, ch
                ja      short loc_53F8
                cmp     al, cl
                jb      short locret_53F9
                cmp     al, ch
                ja      short loc_53F8

loc_53F6:                               ; CODE XREF: ISKANJI+17↑j
                clc
                retn
; ---------------------------------------------------------------------------

loc_53F8:                               ; CODE XREF: ISKANJI+F↑j
                                        ; ISKANJI+20↑j ...
                stc

locret_53F9:                            ; CODE XREF: ISKANJI+6↑j
                                        ; ISKANJI+24↑j
                retn
ISKANJI         endp


; =============== S U B R O U T I N E =======================================


LJOIN           proc near               ; CODE XREF: LFREE+22↓p
                                        ; LFREE+2E↓p ...
                dec     word ptr [di+4]
                mov     bx, [bx+2]
                and     word ptr [bx], 3
                or      [bx], si
                mov     [si+2], bx
                retn
LJOIN           endp


; =============== S U B R O U T I N E =======================================


LREPSETUP       proc near               ; CODE XREF: LZERO+C↓p
                                        ; LOCALREALLOC+15E↓p ...
                shr     cx, 1
                push    ds
                pop     es
                cld
                retn
LREPSETUP       endp


; =============== S U B R O U T I N E =======================================


LZERO           proc near               ; CODE XREF: LALLOC+B2↓p
                                        ; LOCALREALLOC+119↓p
                push    di
                mov     di, cx
                sub     cx, bx
                jnb     short loc_5422
                neg     cx
                push    ax
                xor     ax, ax
                call    LREPSETUP
                rep stosw
                pop     ax

loc_5422:                               ; CODE XREF: LZERO+5↑j
                pop     di
                retn
LZERO           endp


; =============== S U B R O U T I N E =======================================


LALLOC          proc near               ; CODE XREF: LALLOC+3D↓j
                                        ; LCOMPACT+15F↓p ...
                push    si
                push    ax
                push    bx
                mov     cx, [di+4]
                test    al, 2
                jnz     short loc_5479
                add     bx, 4
                call    LALIGN
                mov     bx, [di+6]
                mov     si, 2

loc_543A:                               ; CODE XREF: LALLOC+27↓j
                mov     ax, [bx+si]
                test    byte ptr [bx], 1
                jnz     short loc_5449
                sub     ax, bx
                cmp     ax, dx
                jnb     short loc_5466
                mov     ax, [bx+si]

loc_5449:                               ; CODE XREF: LALLOC+1B↑j
                mov     bx, ax
                loop    loc_543A
                call    LCOMPACT
                cmp     ax, dx
                jnb     short loc_5466

loc_5454:                               ; CODE XREF: LALLOC+78↓j
                push    ax
                xor     bx, bx
                xchg    ax, bx
                mov     cx, dx
                call    LNOTIFY
                pop     dx
                pop     bx
                pop     ax
                pop     si
                jnz     short LALLOC
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------

loc_5466:                               ; CODE XREF: LALLOC+21↑j
                                        ; LALLOC+2E↑j
                mov     ax, 4
                mov     cx, [bx+si]
                sub     cx, 8
                mov     si, bx
                add     si, dx
                cmp     si, cx
                jnb     short loc_54C5
                push    bx
                jmp     short loc_54AF
; ---------------------------------------------------------------------------

loc_5479:                               ; CODE XREF: LALLOC+8↑j
                add     bx, 6
                call    LALIGN
                mov     bx, [di+8]

loc_5482:                               ; CODE XREF: LALLOC+71↓j
                mov     ax, [bx]
                test    al, 1
                jnz     short loc_5491
                mov     si, [bx+2]
                sub     si, bx
                cmp     si, dx
                ja      short loc_54A0

loc_5491:                               ; CODE XREF: LALLOC+62↑j
                and     al, 0FCh
                mov     bx, ax
                loop    loc_5482
                call    LCOMPACT
                cmp     ax, dx
                jb      short loc_5454
                mov     si, ax

loc_54A0:                               ; CODE XREF: LALLOC+6B↑j
                mov     ax, 6
                sub     si, dx
                mov     cx, si
                add     si, bx
                cmp     cx, 8
                jb      short loc_54C5
                push    si

loc_54AF:                               ; CODE XREF: LALLOC+53↑j
                mov     cx, si
                xchg    cx, [bx+2]
                mov     [si], bx
                mov     [si+2], cx
                xchg    si, cx
                and     word ptr [si], 3
                or      [si], cx
                inc     word ptr [di+4]
                pop     bx

loc_54C5:                               ; CODE XREF: LALLOC+50↑j
                                        ; LALLOC+88↑j
                add     ax, bx
                or      byte ptr [bx], 1
                pop     dx
                pop     dx
                test    dl, 40h
                jz      short loc_54D9
                mov     cx, ax
                mov     bx, [bx+2]
                call    LZERO

loc_54D9:                               ; CODE XREF: LALLOC+AB↑j
                pop     si
                or      ax, ax
                retn
LALLOC          endp


; =============== S U B R O U T I N E =======================================


LFREE           proc near               ; CODE XREF: LCOMPACT+61↓p
                                        ; LCOMPACT+149↓p ...
                mov     si, bx
                or      si, si
                jz      short loc_5511
                push    dx
                mov     dx, 3
                and     dx, [bx]
                xor     [bx], dx
                and     dl, 2
                jz      short loc_54F5
                xor     dx, dx
                xchg    dx, [bx+4]

loc_54F5:                               ; CODE XREF: LFREE+11↑j
                mov     si, [bx+2]
                test    byte ptr [si], 1
                jnz     short loc_5504
                xchg    bx, si
                call    LJOIN
                mov     bx, si

loc_5504:                               ; CODE XREF: LFREE+1E↑j
                mov     si, [bx]
                test    byte ptr [si], 1
                jnz     short loc_550E
                call    LJOIN

loc_550E:                               ; CODE XREF: LFREE+2C↑j
                mov     si, dx
                pop     dx

loc_5511:                               ; CODE XREF: LFREE+4↑j
                or      si, si
                retn
LFREE           endp


; =============== S U B R O U T I N E =======================================


LMOVE           proc near               ; CODE XREF: LCOMPACT+9A↓p
                                        ; LCOMPACT+105↓p
                mov     cx, [si+2]
                sub     cx, si
                add     si, cx
                mov     di, [bx+2]
                cmp     si, bx
                jz      short loc_5535
                mov     ax, di
                sub     ax, cx
                sub     ax, 8
                cmp     ax, bx
                jnb     short loc_5535
                mov     ax, di
                mov     di, bx
                add     di, cx
                jmp     short loc_5537
; ---------------------------------------------------------------------------

loc_5535:                               ; CODE XREF: LMOVE+C↑j
                                        ; LMOVE+17↑j
                mov     ax, di

loc_5537:                               ; CODE XREF: LMOVE+1F↑j
                dec     si
                dec     si
                dec     di
                dec     di
                shr     cx, 1
                push    ds
                pop     es
                std
                rep movsw
                cld
                inc     si
                inc     si
                inc     di
                inc     di
                retn
LMOVE           endp


; =============== S U B R O U T I N E =======================================


LBESTFIT        proc near               ; CODE XREF: LCOMPACT:loc_5685↓p
                push    bx
                push    cx
                push    dx
                xor     si, si
                push    si
                mov     dx, [bx+2]
                sub     dx, bx

loc_5553:                               ; CODE XREF: LBESTFIT+3C↓j
                mov     ax, [bx]
                test    al, 1
                jz      short loc_5580
                test    al, 2
                jz      short loc_5580
                mov     si, [bx+4]
                cmp     byte ptr [si+3], 0
                jnz     short loc_5580
                mov     ax, [bx+2]
                sub     ax, bx
                cmp     ax, dx
                ja      short loc_557E
                pop     si
                or      si, si
                jz      short loc_557B
                add     ax, si
                cmp     ax, [si+2]
                jbe     short loc_557D

loc_557B:                               ; CODE XREF: LBESTFIT+2A↑j
                mov     si, bx

loc_557D:                               ; CODE XREF: LBESTFIT+31↑j
                push    si

loc_557E:                               ; CODE XREF: LBESTFIT+25↑j
                mov     ax, [bx]

loc_5580:                               ; CODE XREF: LBESTFIT+F↑j
                                        ; LBESTFIT+13↑j ...
                and     al, 0FCh
                mov     bx, ax
                loop    loc_5553
                pop     si
                pop     dx
                pop     cx
                pop     bx
                retn
LBESTFIT        endp


; =============== S U B R O U T I N E =======================================


LCOMPACT        proc near               ; CODE XREF: LALLOC+29↑p
                                        ; LALLOC+73↑p ...
                push    si
                mov     word ptr [di+0Ah], 1001h
                cmp     word ptr [di+2], 0
                jz      short loc_559A
                dec     byte ptr [di+0Ah]

loc_559A:                               ; CODE XREF: LCOMPACT+A↑j
                                        ; LCOMPACT+7E↓j
                push    dx
                xor     ax, ax
                push    ax
                mov     bx, [di+8]
                mov     cx, [di+4]

loc_55A4:                               ; CODE XREF: LCOMPACT:loc_55AE↓j
                mov     ax, [bx]
                test    al, 1
                jz      short loc_560B
                and     al, 0FCh
                mov     bx, ax

loc_55AE:                               ; CODE XREF: LCOMPACT:loc_565D↓j
                loop    loc_55A4

loc_55B0:                               ; CODE XREF: LCOMPACT+42↓j
                                        ; LCOMPACT+76↓j
                pop     bx
                pop     dx
                mov     ax, bx
                or      ax, ax
                jz      short loc_55C6
                sub     ax, [bx+2]
                neg     ax
                dec     byte ptr [di+0Ah]
                jl      short loc_55C6
                cmp     ax, dx
                jb      short loc_55C8

loc_55C6:                               ; CODE XREF: LCOMPACT+2B↑j
                                        ; LCOMPACT+35↑j
                pop     si
                retn
; ---------------------------------------------------------------------------

loc_55C8:                               ; CODE XREF: LCOMPACT+39↑j
                push    dx
                push    bx
                dec     byte ptr [di+0Bh]
                jz      short loc_55B0
                inc     byte ptr [di+0Ah]
                xor     si, si

loc_55D4:                               ; CODE XREF: LCOMPACT+5A↓j
                                        ; LCOMPACT+70↓j
                call    HENUM
                jz      short loc_55FD
                push    cx
                mov     cl, 2
                xchg    ax, cx
                mov     bx, si
                call    LNOTIFY
                pop     cx
                or      ax, ax
                jz      short loc_55D4
                mov     bx, [si]
                sub     bx, 6
                call    LFREE
                xor     ax, ax
                mov     [si], ax
                or      byte ptr [si+2], 40h
                or      byte ptr [di+0Ah], 80h
                jmp     short loc_55D4
; ---------------------------------------------------------------------------

loc_55FD:                               ; CODE XREF: LCOMPACT+4C↑j
                test    byte ptr [di+0Ah], 80h
                jz      short loc_55B0
                xor     byte ptr [di+0Ah], 80h
                pop     bx
                pop     dx
                jmp     short loc_559A
; ---------------------------------------------------------------------------

loc_560B:                               ; CODE XREF: LCOMPACT+1D↑j
                cmp     word ptr [di+2], 0
                jnz     short loc_5660
                mov     si, ax
                test    byte ptr [si], 2
                jz      short loc_5685
                mov     si, [si+4]
                cmp     byte ptr [si+3], 0
                jnz     short loc_5685
                push    cx
                push    di
                mov     si, ax
                call    LMOVE
                mov     [di], si
                or      byte ptr [di], 3
                mov     bx, ax
                mov     [di+2], bx
                and     word ptr [bx], 3
                or      [bx], di
                mov     [si+2], di
                and     byte ptr [si], 0FCh
                mov     bx, [di+4]
                lea     ax, [di+6]
                mov     [bx], ax
                pop     di
                mov     al, 1
                lea     cx, [si+6]
                call    LNOTIFY
                pop     cx
                mov     bx, si
                mov     si, [bx]
                test    byte ptr [si], 1
                jnz     short loc_565D
                call    LJOIN
                dec     cx

loc_565D:                               ; CODE XREF: LCOMPACT+CC↑j
                                        ; LCOMPACT+F8↓j
                jmp     loc_55AE
; ---------------------------------------------------------------------------

loc_5660:                               ; CODE XREF: LCOMPACT+84↑j
                                        ; LCOMPACT+FF↓j
                pop     si
                cmp     si, bx
                jz      short loc_567D
                test    word ptr [bx], 1
                jnz     short loc_567D
                or      si, si
                jz      short loc_567B
                mov     ax, [si+2]
                sub     ax, si
                add     ax, bx
                cmp     [bx+2], ax
                jbe     short loc_567D

loc_567B:                               ; CODE XREF: LCOMPACT+E2↑j
                mov     si, bx

loc_567D:                               ; CODE XREF: LCOMPACT+D8↑j
                                        ; LCOMPACT+DE↑j ...
                push    si

loc_567E:                               ; CODE XREF: LCOMPACT+153↓j
                mov     bx, [bx]
                and     bl, 0FCh
                jmp     short loc_565D
; ---------------------------------------------------------------------------

loc_5685:                               ; CODE XREF: LCOMPACT+8B↑j
                                        ; LCOMPACT+94↑j
                call    LBESTFIT
                or      si, si
                jz      short loc_5660
                push    cx
                push    di
                push    word ptr [bx]
                call    LMOVE
                pop     cx
                cmp     bx, di
                jz      short loc_569D
                mov     cx, bx
                mov     [bx+2], di

loc_569D:                               ; CODE XREF: LCOMPACT+10B↑j
                mov     [di], cx
                or      byte ptr [di], 3
                mov     [di+2], ax
                xchg    ax, di
                and     word ptr [di], 3
                or      [di], ax
                xchg    ax, di
                lea     cx, [di+6]
                cmp     bx, di
                mov     bx, di
                mov     di, [di+4]
                xchg    cx, [di]
                pop     di
                pop     ax
                jz      short loc_56C1
                inc     ax
                inc     word ptr [di+4]

loc_56C1:                               ; CODE XREF: LCOMPACT+130↑j
                push    bx
                push    ax
                mov     al, 1
                mov     bx, [bx+4]
                call    LNOTIFY
                pop     cx
                and     byte ptr [si], 0FDh
                mov     bx, si
                push    word ptr [di+4]
                call    LFREE
                pop     si
                sub     si, [di+4]
                sub     cx, si
                pop     bx
                jmp     short loc_567E
; ---------------------------------------------------------------------------

loc_56E0:                               ; DATA XREF: LOCALINIT+5D↓o
                xor     ax, ax
                mov     bx, cx
                inc     bx
                shl     bx, 1
                shl     bx, 1
                push    cx
                call    LALLOC
                pop     cx
                jz      short loc_5702
                mov     bx, ax
                xchg    bx, [di+0Eh]
                push    di
                mov     di, ax
                mov     [di], cx
                inc     di
                inc     di
                call    HTHREAD
                mov     [di], bx
                pop     di

loc_5702:                               ; CODE XREF: LCOMPACT+163↑j
                mov     cx, ax
                retn
LCOMPACT        endp


; =============== S U B R O U T I N E =======================================


LENTER          proc near               ; CODE XREF: LOCALALLOC:loc_5849↓p
                                        ; LOCALREALLOC:loc_58EA↓p ...
                mov     di, ds:6
                mov     cx, 1
                xchg    cx, [di+1Ah]
                jcxz    short locret_5742
                xor     ax, ax
                mov     ax, 140h
                push    ax
                mov     ax, offset SZERRORENTERCRIT ; "EnterCrit: local heap is busy"
                push    cs
                push    ax
                push    ax
                push    cx
                call    KERNELERROR
                jmp     short locret_5742
; ---------------------------------------------------------------------------
SZERRORENTERCRIT db 'EnterCrit: local heap is busy',0
                                        ; DATA XREF: LENTER+12↑o
                db 24h
; ---------------------------------------------------------------------------

locret_5742:                            ; CODE XREF: LENTER+A↑j
                                        ; LENTER+1C↑j
                retn
LENTER          endp


; =============== S U B R O U T I N E =======================================


LLEAVE          proc near               ; CODE XREF: LOCALALLOC:loc_5896↓p
                                        ; LOCALREALLOC:loc_5A28↓p ...
                mov     di, ds:6
                xor     cx, cx
                xchg    cx, [di+1Ah]
                jcxz    short loc_574F
                retn
; ---------------------------------------------------------------------------

loc_574F:                               ; CODE XREF: LLEAVE+9↑j
                mov     ax, 140h
                push    ax
                mov     ax, offset SZLEAVECRITNOTBUSYHEAP ; "LeaveCrit: local heap is NOT busy"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short LALIGN
LLEAVE          endp

; ---------------------------------------------------------------------------
SZLEAVECRITNOTBUSYHEAP db 'LeaveCrit: local heap is NOT busy',0
                                        ; DATA XREF: LLEAVE+10↑o
                db 24h

; =============== S U B R O U T I N E =======================================


LALIGN          proc near               ; CODE XREF: LALLOC+D↑p
                                        ; LALLOC+58↑p ...
                jnb     short loc_5789
                mov     bx, 0FFFCh

loc_5789:                               ; CODE XREF: LALIGN↑j
                lea     dx, [bx+3]
                and     dl, 0FCh
                cmp     dx, bx
                jnb     short locret_5796
                mov     dx, 0FFFCh

locret_5796:                            ; CODE XREF: LALIGN+D↑j
                retn
LALIGN          endp


; =============== S U B R O U T I N E =======================================


LDREF           proc near               ; CODE XREF: LOCALREALLOC+52↓p
                                        ; LOCALREALLOC+153↓p ...
                xor     cx, cx
                mov     ax, si
                test    al, 2
                jnz     short loc_57AE
                xor     si, si
                or      ax, ax
                jz      short locret_57AD
                mov     bx, ax
                and     bl, 0FCh
                sub     bx, 4

locret_57AD:                            ; CODE XREF: LDREF+C↑j
                retn
; ---------------------------------------------------------------------------

loc_57AE:                               ; CODE XREF: LDREF+6↑j
                call    HDREF
                test    cl, 40h
                jnz     short loc_57F5
                or      ax, ax
                jz      short loc_57C4
                mov     bx, ax
                sub     bx, 6
                cmp     [bx+4], si
                jz      short loc_57F5

loc_57C4:                               ; CODE XREF: LDREF+21↑j
                xor     ax, ax
                mov     ax, 180h
                push    ax
                mov     ax, offset SZERRLDREF ; "LDREF: Invalid local handle"
                push    cs
                push    ax
                push    ax
                push    si
                call    KERNELERROR
                jmp     short loc_57F3
; ---------------------------------------------------------------------------
SZERRLDREF      db 'LDREF: Invalid local handle',0
                                        ; DATA XREF: LDREF+33↑o
                db 24h
; ---------------------------------------------------------------------------

loc_57F3:                               ; CODE XREF: LDREF+3D↑j
                xor     ax, ax

loc_57F5:                               ; CODE XREF: LDREF+1D↑j
                                        ; LDREF+2B↑j
                or      ax, ax
                retn
LDREF           endp


; =============== S U B R O U T I N E =======================================


LNOTIFY         proc near               ; CODE XREF: LALLOC+36↑p
                                        ; LCOMPACT+54↑p ...
                cmp     word ptr [di+18h], 0
                jz      short loc_5806
                xor     ah, ah
                push    ax
                push    bx
                push    cx
                call    dword ptr [di+16h]

loc_5806:                               ; CODE XREF: LNOTIFY+4↑j
                or      ax, ax
                retn
LNOTIFY         endp

;
; External Entry #5 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALALLOC
LOCALALLOC      proc far                ; CODE XREF: INITATOMTABLE+20↑p
                                        ; LOOKUPATOM+116↑p

arg_0           = word ptr  6
arg_2           = word ptr  8

                inc     bp              ; KERNEL_5
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKLOCALHEAP
                or      ax, ax
                jz      short loc_5849
                or      ax, 100h
                push    ax
                mov     ax, offset SZERRLOCALALLOC ; "LocalAlloc: Invalid local heap"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short loc_5849
; ---------------------------------------------------------------------------
SZERRLOCALALLOC db 'LocalAlloc: Invalid local heap',0
                                        ; DATA XREF: LOCALALLOC+12↑o
                db 24h
; ---------------------------------------------------------------------------

loc_5849:                               ; CODE XREF: LOCALALLOC+C↑j
                                        ; LOCALALLOC+1E↑j
                call    LENTER
                mov     ax, [bp+arg_2]
                test    al, 10h
                jz      short loc_5856
                inc     word ptr [di+2]

loc_5856:                               ; CODE XREF: LOCALALLOC+48↑j
                mov     bx, [bp+arg_0]
                or      bx, bx
                jnz     short loc_586E
                and     ax, 2
                jz      short loc_588C
                call    HALLOC
                xor     byte ptr [bx], 2
                or      byte ptr [bx+2], 40h
                jmp     short loc_588C
; ---------------------------------------------------------------------------

loc_586E:                               ; CODE XREF: LOCALALLOC+52↑j
                call    LALLOC
                jz      short loc_588C
                test    dl, 2
                jz      short loc_588C
                call    HALLOC
                mov     si, [bx]
                mov     [si-2], ax
                or      byte ptr [si-6], 2
                and     dh, 0Fh
                jz      short loc_588C
                mov     [bx+2], dh

loc_588C:                               ; CODE XREF: LOCALALLOC+57↑j
                                        ; LOCALALLOC+63↑j ...
                test    [bp+arg_2], 10h
                jz      short loc_5896
                dec     word ptr [di+2]

loc_5896:                               ; CODE XREF: LOCALALLOC+88↑j
                call    LLEAVE
                mov     cx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
LOCALALLOC      endp

;
; External Entry #6 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALREALLOC
LOCALREALLOC    proc far

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                inc     bp              ; KERNEL_6
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKLOCALHEAP
                or      ax, ax
                jz      short loc_58EA
                or      ax, 100h
                push    ax
                mov     ax, offset SZERRLOCALREALLOC ; "LocalReAlloc: Invalid local heap"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short loc_58EA
; ---------------------------------------------------------------------------
SZERRLOCALREALLOC db 'LocalReAlloc: Invalid local heap',0
                                        ; DATA XREF: LOCALREALLOC+12↑o
                db 24h
; ---------------------------------------------------------------------------

loc_58EA:                               ; CODE XREF: LOCALREALLOC+C↑j
                                        ; LOCALREALLOC+1E↑j
                call    LENTER
                test    [bp+arg_0], 10h
                jz      short loc_58F7
                inc     word ptr [di+2]

loc_58F7:                               ; CODE XREF: LOCALREALLOC+4A↑j
                mov     si, [bp+arg_4]
                call    LDREF
                jz      short loc_5957
                test    [bp+arg_0], 80h
                jnz     short loc_5944
                mov     si, bx
                mov     bx, ax
                add     bx, [bp+arg_2]
                call    LALIGN
                mov     bx, [si+2]
                cmp     [bp+arg_2], 0
                jnz     short loc_5973
                jcxz    short loc_5920

loc_591B:                               ; CODE XREF: LOCALREALLOC+7D↓j
                                        ; LOCALREALLOC+89↓j ...
                xor     ax, ax
                jmp     loc_5A1E
; ---------------------------------------------------------------------------

loc_5920:                               ; CODE XREF: LOCALREALLOC+71↑j
                test    [bp+arg_0], 2
                jz      short loc_591B
                mov     al, 2
                xor     cx, cx
                mov     bx, [bp+arg_4]
                call    LNOTIFY
                jz      short loc_591B
                xor     ax, ax
                mov     bx, si
                call    LFREE
                jz      short loc_59A8
                mov     [si], ax
                or      byte ptr [si+2], 40h
                jmp     short loc_59A5
; ---------------------------------------------------------------------------

loc_5944:                               ; CODE XREF: LOCALREALLOC+5C↑j
                mov     ax, [bp+arg_0]
                or      si, si
                jz      short loc_59A5
                and     byte ptr [si+2], 0C0h
                and     ah, 3Fh
                or      [si+2], ah
                jmp     short loc_59A5
; ---------------------------------------------------------------------------

loc_5957:                               ; CODE XREF: LOCALREALLOC+55↑j
                test    cl, 40h
                jz      short loc_59A5
                mov     bx, [bp+arg_2]
                push    si
                mov     ax, 2
                or      ax, [bp+arg_0]
                call    LALLOC
                pop     si
                jz      short loc_591B
                xor     byte ptr [si+2], 40h
                jmp     loc_5A14
; ---------------------------------------------------------------------------

loc_5973:                               ; CODE XREF: LOCALREALLOC+6F↑j
                cmp     dx, bx
                ja      short loc_59AB

loc_5977:                               ; CODE XREF: LOCALREALLOC:loc_59C4↓j
                push    si
                mov     si, dx
                lea     dx, [si+8]
                cmp     dx, bx
                pop     bx
                jnb     short loc_59A5
                mov     cx, si
                xchg    cx, [bx+2]
                mov     [si], bx
                xchg    si, cx
                and     word ptr [si], 3
                jz      short loc_5997
                inc     word ptr [di+4]
                jmp     short loc_599E
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_5997:                               ; CODE XREF: LOCALREALLOC+E7↑j
                mov     si, [si+2]
                and     word ptr [si], 3

loc_599E:                               ; CODE XREF: LOCALREALLOC+EC↑j
                or      [si], cx
                xchg    si, cx
                mov     [si+2], cx

loc_59A5:                               ; CODE XREF: LOCALREALLOC+9A↑j
                                        ; LOCALREALLOC+A1↑j ...
                mov     ax, [bp+arg_4]

loc_59A8:                               ; CODE XREF: LOCALREALLOC+92↑j
                jmp     short loc_5A1E
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_59AB:                               ; CODE XREF: LOCALREALLOC+CD↑j
                test    byte ptr [bx], 1
                jnz     short loc_59C6
                cmp     dx, [bx+2]
                ja      short loc_59C6
                mov     cx, bx
                call    LJOIN
                test    [bp+arg_0], 40h
                jz      short loc_59C4
                call    LZERO

loc_59C4:                               ; CODE XREF: LOCALREALLOC+117↑j
                jmp     short loc_5977
; ---------------------------------------------------------------------------

loc_59C6:                               ; CODE XREF: LOCALREALLOC+106↑j
                                        ; LOCALREALLOC+10B↑j
                mov     dx, [bp+arg_0]
                mov     bx, 2
                jcxz    short loc_59D5
                test    dx, bx
                jnz     short loc_59D5

loc_59D2:                               ; CODE XREF: LOCALREALLOC+137↓j
                                        ; LOCALREALLOC+143↓j
                jmp     loc_591B
; ---------------------------------------------------------------------------

loc_59D5:                               ; CODE XREF: LOCALREALLOC+124↑j
                                        ; LOCALREALLOC+128↑j
                or      dx, bx
                test    [bp+arg_4], bx
                jnz     short loc_59E3
                test    [bp+arg_0], bx
                jz      short loc_59D2
                xor     dx, bx

loc_59E3:                               ; CODE XREF: LOCALREALLOC+132↑j
                mov     ax, dx
                mov     bx, [bp+arg_2]
                call    LALLOC
                jz      short loc_59D2
                push    ax
                mov     cx, ax
                mov     bx, [bp+arg_4]
                mov     al, 1
                call    LNOTIFY
                mov     si, [bp+arg_4]
                call    LDREF
                mov     si, ax
                pop     ax
                mov     cx, [bx+2]
                sub     cx, si
                call    LREPSETUP
                push    di
                mov     di, ax
                rep movsw
                pop     di
                call    LFREE
                jz      short loc_5A1E

loc_5A14:                               ; CODE XREF: LOCALREALLOC+C8↑j
                mov     [si], ax
                xchg    ax, si
                or      byte ptr [si-6], 2
                mov     [si-2], ax

loc_5A1E:                               ; CODE XREF: LOCALREALLOC+75↑j
                                        ; LOCALREALLOC:loc_59A8↑j ...
                test    [bp+arg_0], 10h
                jz      short loc_5A28
                dec     word ptr [di+2]

loc_5A28:                               ; CODE XREF: LOCALREALLOC+17B↑j
                call    LLEAVE
                mov     cx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
LOCALREALLOC    endp

;
; External Entry #7 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALFREE
LOCALFREE       proc far                ; CODE XREF: LOOKUPATOM+102↑p

arg_0           = word ptr  6

                inc     bp              ; KERNEL_7
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKLOCALHEAP
                or      ax, ax
                jz      short loc_5A79
                or      ax, 100h
                push    ax
                mov     ax, offset SZERRLOCALFREE ; "LocalFree: Invalid local heap"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short loc_5A79
; ---------------------------------------------------------------------------
SZERRLOCALFREE  db 'LocalFree: Invalid local heap',0
                                        ; DATA XREF: LOCALFREE+12↑o
                db 24h
; ---------------------------------------------------------------------------

loc_5A79:                               ; CODE XREF: LOCALFREE+C↑j
                                        ; LOCALFREE+1E↑j
                call    LENTER
                mov     si, [bp+arg_0]
                call    LDREF
                jz      short loc_5AC7
                or      ch, ch
                jz      short loc_5AC4
                xor     bx, bx
                mov     ax, 1F0h
                push    ax
                mov     ax, offset SZERRLOCALFREELOCKED ; "LocalFree: freeing locked object"
                push    cs
                push    ax
                push    bx
                push    [bp+arg_0]
                call    KERNELERROR
                jmp     short loc_5ABE
; ---------------------------------------------------------------------------
SZERRLOCALFREELOCKED db 'LocalFree: freeing locked object',0
                                        ; DATA XREF: LOCALFREE+54↑o
                db 24h
; ---------------------------------------------------------------------------

loc_5ABE:                               ; CODE XREF: LOCALFREE+60↑j
                mov     si, [bp+arg_0]
                call    LDREF

loc_5AC4:                               ; CODE XREF: LOCALFREE+4C↑j
                call    LFREE

loc_5AC7:                               ; CODE XREF: LOCALFREE+48↑j
                call    HFREE
                call    LLEAVE
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
LOCALFREE       endp

;
; External Entry #10 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOCALSIZE
LOCALSIZE       proc far
                push    si              ; KERNEL_10
                mov     si, sp
                mov     si, ss:[si+6]
                call    LDREF
                jz      short loc_5AEB
                sub     ax, [bx+2]
                neg     ax

loc_5AEB:                               ; CODE XREF: LOCALSIZE+A↑j
                mov     cx, ax
                pop     si
                retf    2
LOCALSIZE       endp

;
; External Entry #12 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOCALFLAGS
LOCALFLAGS      proc far
                push    si              ; KERNEL_12
                mov     si, sp
                mov     si, ss:[si+6]
                call    LDREF
                mov     cx, si
                jcxz    short loc_5B02
                mov     cx, [si+2]

loc_5B02:                               ; CODE XREF: LOCALFLAGS+C↑j
                xchg    cl, ch
                mov     ax, cx
                pop     si
                retf    2
LOCALFLAGS      endp

;
; External Entry #8 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALLOCK
LOCALLOCK       proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_8
                push    bp
                mov     bp, sp
                push    ds
                push    si
                mov     si, [bp+arg_0]
                call    LDREF
                jz      short loc_5B62
                or      si, si
                jz      short loc_5B62
                inc     byte ptr [si+3]
                jnz     short loc_5B60
                xor     ax, ax
                mov     ax, 1C0h
                push    ax
                mov     ax, offset SZERRLOCALLOCK ; "LocalLock: Object usage count overflow"
                push    cs
                push    ax
                push    ax
                push    [bp+arg_0]
                call    KERNELERROR
                jmp     short loc_5B5D
; ---------------------------------------------------------------------------
SZERRLOCALLOCK  db 'LocalLock: Object usage count overflow',0
                                        ; DATA XREF: LOCALLOCK+1D↑o
                db 24h
; ---------------------------------------------------------------------------

loc_5B5D:                               ; CODE XREF: LOCALLOCK+29↑j
                dec     byte ptr [si+3]

loc_5B60:                               ; CODE XREF: LOCALLOCK+15↑j
                mov     ax, [si]

loc_5B62:                               ; CODE XREF: LOCALLOCK+C↑j
                                        ; LOCALLOCK+10↑j
                mov     cx, ax
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
LOCALLOCK       endp

;
; External Entry #9 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALUNLOCK
LOCALUNLOCK     proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_9
                push    bp
                mov     bp, sp
                push    ds
                push    si
                mov     si, [bp+arg_0]
                call    LDREF
                jz      short loc_5BD5
                xor     ax, ax
                or      si, si
                jz      short loc_5BD5
                dec     ch
                cmp     ch, 0FEh
                jz      short loc_5BD5
                mov     ax, si
                dec     byte ptr [si+3]
                jz      short loc_5BD3
                jb      short loc_5BD5
                xor     ax, ax
                mov     ax, 1F0h
                push    ax
                mov     ax, offset SZERRLOCALUNLOCK ; "LocalUnlock: Object usage count underfl"...
                push    cs
                push    ax
                push    ax
                push    [bp+arg_0]
                call    KERNELERROR
                jmp     short loc_5BD3
; ---------------------------------------------------------------------------
SZERRLOCALUNLOCK db 'LocalUnlock: Object usage count underflow',0
                                        ; DATA XREF: LOCALUNLOCK+2A↑o
                db 24h
; ---------------------------------------------------------------------------

loc_5BD3:                               ; CODE XREF: LOCALUNLOCK+20↑j
                                        ; LOCALUNLOCK+36↑j
                xor     ax, ax

loc_5BD5:                               ; CODE XREF: LOCALUNLOCK+C↑j
                                        ; LOCALUNLOCK+12↑j ...
                mov     cx, ax
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
LOCALUNLOCK     endp

;
; External Entry #11 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOCALHANDLE
LOCALHANDLE     proc far
                mov     bx, sp          ; KERNEL_11
                mov     bx, ss:[bx+4]
                test    bl, 2
                jz      short loc_5BF9
                mov     ax, bx
                mov     bx, [bx-2]
                cmp     [bx], ax
                jz      short loc_5BF9
                xor     bx, bx

loc_5BF9:                               ; CODE XREF: LOCALHANDLE+9↑j
                                        ; LOCALHANDLE+12↑j
                mov     ax, bx
                retf    2
LOCALHANDLE     endp

;
; External Entry #13 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALCOMPACT
LOCALCOMPACT    proc far

arg_0           = word ptr  6

                inc     bp              ; KERNEL_13
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKLOCALHEAP
                or      ax, ax
                jz      short loc_5C40
                or      ax, 100h
                push    ax
                mov     ax, offset SZERRLOCALCOMPACT ; "LocalCompact: Invalid local heap"
                push    cs
                push    ax
                xor     ax, ax
                push    ax
                push    ax
                call    KERNELERROR
                jmp     short loc_5C40
; ---------------------------------------------------------------------------
SZERRLOCALCOMPACT db 'LocalCompact: Invalid local heap',0
                                        ; DATA XREF: LOCALCOMPACT+12↑o
                db 24h
; ---------------------------------------------------------------------------

loc_5C40:                               ; CODE XREF: LOCALCOMPACT+C↑j
                                        ; LOCALCOMPACT+1E↑j
                call    LENTER
                mov     bx, [bp+arg_0]
                clc
                call    LALIGN
                call    LCOMPACT
                or      ax, ax
                jz      short loc_5C54
                sub     ax, 6

loc_5C54:                               ; CODE XREF: LOCALCOMPACT+51↑j
                call    LLEAVE
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
LOCALCOMPACT    endp

;
; External Entry #14 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOCALNOTIFY
LOCALNOTIFY     proc far
                mov     bx, sp          ; KERNEL_14
                mov     ax, ss:[bx+4]
                mov     dx, ss:[bx+6]
                mov     bx, ds:6
                xchg    ax, [bx+16h]
                xchg    dx, [bx+18h]
                retf    4
LOCALNOTIFY     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

LOCALNOTIFYDEFAULT proc far             ; DATA XREF: LOCALINIT+55↓o

arg_0           = word ptr  6
arg_4           = word ptr  0Ah

                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                mov     ax, [bp+arg_4]
                or      ax, ax
                jnz     short loc_5CAF
                push    ds
                nop
                push    cs
                call    near ptr GLOBALHANDLE
                or      ax, ax
                jz      short loc_5CAF
                push    cx
                mov     si, ax
                push    si
                nop
                push    cs
                call    near ptr GLOBALSIZE
                pop     bx
                add     ax, [bp+arg_0]
                adc     dx, 0
                add     ax, [di+1Ch]
                adc     dx, 0
                jz      short loc_5CB1
                xor     ax, ax
                xor     cx, cx

loc_5CAF:                               ; CODE XREF: LOCALNOTIFYDEFAULT+C↑j
                                        ; LOCALNOTIFYDEFAULT+16↑j
                jmp     short loc_5D1B
; ---------------------------------------------------------------------------

loc_5CB1:                               ; CODE XREF: LOCALNOTIFYDEFAULT+2E↑j
                xor     cx, cx
                test    si, 1
                jnz     short loc_5CC1
                cmp     bh, 1
                jnz     short loc_5CC1
                or      cl, 2

loc_5CC1:                               ; CODE XREF: LOCALNOTIFYDEFAULT+3C↑j
                                        ; LOCALNOTIFYDEFAULT+41↑j
                push    bx
                push    si
                push    dx
                push    ax
                push    cx
                nop
                push    cs
                call    near ptr GLOBALREALLOC
                pop     bx
                jcxz    short loc_5D1B
                push    bx
                push    ax
                nop
                push    cs
                call    near ptr GLOBALSIZE
                mov     bx, ax
                sub     bx, 4
                and     bl, 0FCh
                mov     di, ds:6
                mov     si, [di+8]
                mov     [bx+2], bx
                mov     [bx], si
                or      byte ptr [bx], 1
                mov     [si+2], bx
                mov     [di+8], bx
                inc     word ptr [di+4]
                mov     bx, si
                call    LFREE
                mov     ax, 1
                pop     bx
                cmp     bh, 1
                jnz     short loc_5D1B
                push    ds
                nop
                push    cs
                call    near ptr UNLOCKSEGMENT
                xor     ax, ax
                push    ax
                push    ax
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                push    ds
                nop
                push    cs
                call    near ptr LOCKSEGMENT
                mov     ax, 1

loc_5D1B:                               ; CODE XREF: LOCALNOTIFYDEFAULT:loc_5CAF↑j
                                        ; LOCALNOTIFYDEFAULT+51↑j ...
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
LOCALNOTIFYDEFAULT endp

;
; External Entry #4 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public LOCALINIT
LOCALINIT       proc far                ; CODE XREF: INITTASK+2F↑p

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah

                inc     bp              ; KERNEL_4
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                mov     cx, [bp+arg_4]
                jcxz    short loc_5D36
                mov     ds, cx

loc_5D36:                               ; CODE XREF: LOCALINIT+A↑j
                mov     bx, [bp+arg_2]
                or      bx, bx
                jnz     short loc_5D54
                mov     cx, ds
                dec     cx
                mov     es, cx
                assume es:nothing
                mov     bx, es:3
                mov     cl, 4
                shl     bx, cl
                dec     bx
                xchg    bx, [bp+arg_0]
                sub     bx, [bp+arg_0]
                neg     bx

loc_5D54:                               ; CODE XREF: LOCALINIT+13↑j
                clc
                call    LALIGN
                mov     bx, dx
                lea     di, [bx+4]
                xor     ax, ax
                mov     cx, [bp+arg_0]
                cmp     bx, cx
                jnb     short loc_5DC5
                sub     cx, di
                call    LREPSETUP
                push    di
                rep stosw
                pop     di
                lea     bx, [di+1Eh]
                mov     byte ptr [di+12h], 20h ; ' '
                mov     byte ptr [di+4], 3
                mov     [di+6], dx
                mov     word ptr [di+16h], offset LOCALNOTIFYDEFAULT
                mov     word ptr [di+18h], cs
                mov     word ptr [di+14h], offset loc_56E0
                mov     word ptr [di+1Ch], 200h
                clc
                call    LALIGN
                mov     si, dx
                mov     bx, [bp+arg_0]
                sub     bx, 4
                and     bl, 0FCh
                mov     [di+8], bx
                mov     ds:6, di
                mov     di, [di+6]
                mov     [si], di
                mov     [si+2], bx
                mov     [bx+2], bx
                lea     ax, [si+1]
                mov     [bx], ax
                mov     [di+2], si
                lea     ax, [di+1]
                mov     [di], ax
                push    ds
                nop
                push    cs
                call    near ptr LOCKSEGMENT
                mov     al, 1

loc_5DC5:                               ; CODE XREF: LOCALINIT+3C↑j
                mov     cx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
LOCALINIT       endp


; =============== S U B R O U T I N E =======================================


HALLOC          proc near               ; CODE XREF: LOCALALLOC+59↑p
                                        ; LOCALALLOC+6F↑p ...
                mov     bx, [di+10h]
                or      bx, bx
                jz      short loc_5DEA

loc_5DDB:                               ; CODE XREF: HALLOC+26↓j
                xor     cx, cx
                mov     [bx+2], cx
                xchg    ax, [bx]
                mov     [di+10h], ax
                mov     ax, bx
                mov     cx, ax
                retn
; ---------------------------------------------------------------------------

loc_5DEA:                               ; CODE XREF: HALLOC+5↑j
                push    ax
                push    dx
                mov     cx, [di+12h]
                jcxz    short loc_5DFC
                call    word ptr [di+14h]
                jcxz    short loc_5DFC
                mov     bx, ax
                pop     dx
                pop     ax
                jmp     short loc_5DDB
; ---------------------------------------------------------------------------

loc_5DFC:                               ; CODE XREF: HALLOC+1B↑j
                                        ; HALLOC+20↑j
                xor     ax, ax
                pop     dx
                pop     dx
                retn
HALLOC          endp


; =============== S U B R O U T I N E =======================================


HTHREAD         proc near               ; CODE XREF: LCOMPACT+171↑p
                                        ; GHEXPAND+61↓p ...
                push    di
                push    ds
                pop     es
                assume es:nothing
                cld

loc_5E05:                               ; CODE XREF: HTHREAD+C↓j
                lea     ax, [di+4]
                stosw
                mov     ax, 0FFFFh
                stosw
                loop    loc_5E05
                mov     [di-4], cx
                pop     ax
                retn
HTHREAD         endp


; =============== S U B R O U T I N E =======================================


HFREE           proc near               ; CODE XREF: LOCALFREE:loc_5AC7↑p
                                        ; GFREE:loc_6197↓p ...
                or      si, si
                jz      short loc_5E28
                mov     ax, 0FFFFh
                xchg    ax, [si+2]
                inc     ax
                jz      short loc_5E2B
                mov     ax, si
                xchg    ax, [di+10h]
                mov     [si], ax

loc_5E28:                               ; CODE XREF: HFREE+2↑j
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------

loc_5E2B:                               ; CODE XREF: HFREE+B↑j
                dec     ax
                retn
HFREE           endp


; =============== S U B R O U T I N E =======================================


HDREF           proc near               ; CODE XREF: LDREF:loc_57AE↑p
                                        ; GALIGN+28↓p
                xor     ax, ax
                mov     cx, [si+2]
                inc     cx
                jz      short loc_5E3D
                dec     cx
                and     cl, 40h
                jnz     short loc_5E3D
                mov     ax, [si]

loc_5E3D:                               ; CODE XREF: HDREF+6↑j
                                        ; HDREF+C↑j
                or      ax, ax
                retn
HDREF           endp


; =============== S U B R O U T I N E =======================================


HENUM           proc near               ; CODE XREF: LCOMPACT:loc_55D4↑p
                                        ; GFREEALL:loc_61C8↓p
                or      si, si
                jnz     short loc_5E6F
                mov     ax, [di+0Eh]

loc_5E47:                               ; CODE XREF: HENUM+35↓j
                mov     si, ax
                or      si, si
                jz      short loc_5E6C
                lodsw
                mov     cx, ax

loc_5E50:                               ; CODE XREF: HENUM+32↓j
                mov     ax, [si+2]
                inc     ax
                jz      short loc_5E6F
                dec     ax
                cmp     byte ptr [di+0Bh], 0
                jz      short loc_5E6C
                test    al, 40h
                jnz     short loc_5E6F
                and     al, 0Fh
                cmp     [di+0Bh], al
                jnz     short loc_5E6F
                or      ah, ah
                jnz     short loc_5E6F

loc_5E6C:                               ; CODE XREF: HENUM+B↑j
                                        ; HENUM+1B↑j
                or      si, si
                retn
; ---------------------------------------------------------------------------

loc_5E6F:                               ; CODE XREF: HENUM+2↑j
                                        ; HENUM+14↑j ...
                lea     si, [si+4]
                loop    loc_5E50
                lodsw
                jmp     short loc_5E47
HENUM           endp


; =============== S U B R O U T I N E =======================================


HEND            proc near               ; CODE XREF: GREALLOC+D9↓p
                                        ; GREALLOC+1BE↓p ...
                jb      short loc_5E84
                lea     dx, [bx+1]
                and     dl, 0FEh
                cmp     dx, bx
                jb      short loc_5E84
                retn
; ---------------------------------------------------------------------------

loc_5E84:                               ; CODE XREF: HEND↑j HEND+A↑j
                mov     dx, 0FFFEh
                retn
HEND            endp


; =============== S U B R O U T I N E =======================================


GALIGN          proc near               ; CODE XREF: GREALLOC+7↓p
                                        ; GFREE+1↓p ...
                xor     cx, cx
                mov     ax, dx
                test    al, 1
                jz      short loc_5EAE
                xor     si, si

loc_5E92:                               ; CODE XREF: GALIGN+2B↓j
                or      ax, ax
                jz      short locret_5EAD
                mov     bx, ax
                dec     bx
                mov     es, bx
                cmp     byte ptr es:[di], 4Dh ; 'M'
                jnz     short loc_5EB7
                cmp     es:[di+0Ah], si
                jnz     short loc_5EB7
                cmp     es:[di+1], di
                jz      short loc_5EB7

locret_5EAD:                            ; CODE XREF: GALIGN+C↑j
                retn
; ---------------------------------------------------------------------------

loc_5EAE:                               ; CODE XREF: GALIGN+6↑j
                mov     si, dx
                call    HDREF
                jnz     short loc_5E92
                mov     bx, [si]

loc_5EB7:                               ; CODE XREF: GALIGN+17↑j
                                        ; GALIGN+1D↑j ...
                xor     ax, ax
                retn
GALIGN          endp


; =============== S U B R O U T I N E =======================================


GHANDLE         proc near               ; CODE XREF: GHANDLE+88↓j
                                        ; GHEXPAND+3↓p ...
                mov     bx, ax
                test    bl, 1
                jnz     short loc_5EEF
                or      bx, bx
                jz      short loc_5F1E
                test    bl, 2
                jz      short loc_5F1E
                mov     bx, [di+0Eh]
                cmp     ax, bx
                jbe     short loc_5F1E
                mov     cx, [bx]
                shl     cx, 1
                shl     cx, 1
                add     bx, cx
                cmp     ax, bx
                jnb     short loc_5F1E
                mov     bx, ax
                mov     cx, [bx+2]
                inc     cx
                jz      short loc_5F1E
                dec     cx
                test    cl, 40h
                jnz     short loc_5F25
                mov     ax, [bx]
                mov     bx, ax

loc_5EEF:                               ; CODE XREF: GHANDLE+5↑j
                dec     bx
                cmp     [di+6], bx
                jnb     short loc_5F1E
                cmp     [di+8], bx
                jbe     short loc_5F1E
                mov     es, bx
                cmp     byte ptr es:[di], 4Dh ; 'M'
                jnz     short loc_5F1E
                cmp     es:[di+1], di
                jz      short loc_5F1E
                mov     bx, es:[di+0Ah]
                or      bx, bx
                jz      short loc_5F20
                cmp     [bx], ax
                jnz     short loc_5F1E

loc_5F14:                               ; CODE XREF: GHANDLE+70↓j
                                        ; GHANDLE+86↓j
                mov     cx, [bx+2]
                mov     dx, ax
                or      dx, dx
                mov     ax, bx
                retn
; ---------------------------------------------------------------------------

loc_5F1E:                               ; CODE XREF: GHANDLE+9↑j
                                        ; GHANDLE+E↑j ...
                xor     ax, ax

loc_5F20:                               ; CODE XREF: GHANDLE+54↑j
                xor     cx, cx
                mov     dx, ax
                retn
; ---------------------------------------------------------------------------

loc_5F25:                               ; CODE XREF: GHANDLE+2F↑j
                xor     ax, ax
                test    cl, 80h
                jz      short loc_5F14
                cmp     word ptr cs:PSWAPHOOK+2, ax
                jz      short loc_5F1E
                not     ax
                push    bx
                push    bx
                push    ax
                call    cs:PSWAPHOOK
                pop     bx
                or      ax, ax
                jz      short loc_5F14
                jmp     GHANDLE
GHANDLE         endp


; =============== S U B R O U T I N E =======================================


GALLOC          proc near               ; CODE XREF: INT21ALLOC+3↓p
                                        ; GLOBALALLOC+50↓p
                or      bx, bx
                jnz     short loc_5F6A
                xchg    ax, cx
                test    cl, 2
                jz      short loc_5F64
                push    cx
                call    HALLOC
                pop     dx
                jcxz    short loc_5F64
                or      dh, 40h
                mov     [bx+2], dh
                jmp     short loc_5F88
; ---------------------------------------------------------------------------

loc_5F5E:                               ; CODE XREF: GALLOC+32↓j
                dec     dx
                mov     es, dx
                call    GMARKFREE

loc_5F64:                               ; CODE XREF: GALLOC+8↑j
                                        ; GALLOC+F↑j
                xor     dx, dx
                xor     ax, ax
                jmp     short loc_5F88
; ---------------------------------------------------------------------------

loc_5F6A:                               ; CODE XREF: GALLOC+2↑j
                call    GSEARCH
                jz      short loc_5F88
                test    dl, 2
                jz      short loc_5F88
                call    HALLOC
                jcxz    short loc_5F5E
                mov     si, [bx]
                dec     si
                mov     es, si
                mov     es:[di+0Ah], bx
                mov     [bx+2], dh
                call    GLRUADD

loc_5F88:                               ; CODE XREF: GALLOC+17↑j
                                        ; GALLOC+23↑j ...
                mov     cx, ax
                retn
GALLOC          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GREALLOC        proc near               ; CODE XREF: INT21REALLOC+3↓p
                                        ; GHEXPAND+2B↓p ...

var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                push    bp
                mov     bp, sp
                push    ax
                push    dx
                push    cx
                push    bx
                call    GALIGN
                mov     bx, [bp+var_8]
                jz      short loc_6014
                test    [bp+var_2], 80h
                jnz     short loc_5FDF
                or      bx, bx
                jnz     short loc_6012
                jcxz    short loc_5FAE

loc_5FA7:                               ; CODE XREF: GREALLOC+28↓j
                                        ; GREALLOC:loc_5FC1↓j ...
                xor     ax, ax
                xor     dx, dx
                jmp     loc_612F
; ---------------------------------------------------------------------------

loc_5FAE:                               ; CODE XREF: GREALLOC+1A↑j
                test    [bp+var_2], 2
                jz      short loc_5FA7
                mov     al, 2
                xor     cx, cx
                mov     bx, [bp+var_4]
                push    es
                call    GNOTIFY
                pop     es

loc_5FC1:                               ; CODE XREF: GREALLOC+8C↓j
                jz      short loc_5FA7
                call    GLRUDEL
                push    word ptr es:[di+1]
                push    ax
                call    GMARKFREE
                pop     cx
                jz      short loc_5FD9
                mov     [si], cx
                or      byte ptr [si+2], 40h
                jmp     short loc_6010
; ---------------------------------------------------------------------------

loc_5FD9:                               ; CODE XREF: GREALLOC+44↑j
                pop     ax
                xor     ax, ax
                jmp     loc_612F
; ---------------------------------------------------------------------------

loc_5FDF:                               ; CODE XREF: GREALLOC+14↑j
                mov     ax, [bp+var_2]
                mov     dx, [bp+var_6]
                or      si, si
                jz      short loc_6004
                call    GLRUDEL
                and     byte ptr [si+2], 0FEh
                and     ah, 31h
                or      [si+2], ah
                test    cl, 40h
                jz      short loc_6004
                test    ah, 30h
                jz      short loc_6010
                mov     [si], dx
                jmp     short loc_6010
; ---------------------------------------------------------------------------

loc_6004:                               ; CODE XREF: GREALLOC+5C↑j
                                        ; GREALLOC+6E↑j
                call    GLRUADD
                test    ah, 30h
                jz      short loc_6010
                mov     es:[di+1], dx

loc_6010:                               ; CODE XREF: GREALLOC+4C↑j
                                        ; GREALLOC+73↑j ...
                jmp     short loc_607F
; ---------------------------------------------------------------------------

loc_6012:                               ; CODE XREF: GREALLOC+18↑j
                jmp     short loc_6060
; ---------------------------------------------------------------------------

loc_6014:                               ; CODE XREF: GREALLOC+D↑j
                test    cl, 40h
                jz      short loc_5FC1
                or      bx, bx
                jz      short loc_607F
                mov     ax, 2
                or      ax, [bp+var_2]
                mov     cl, [si+2]
                and     cl, 0Ch
                or      al, cl
                or      ah, cl
                test    al, 8
                jz      short loc_6033
                or      al, 1

loc_6033:                               ; CODE XREF: GREALLOC+A4↑j
                mov     [di+0Bh], al
                mov     cx, [si]
                push    si
                call    GSEARCH
                pop     si
                jz      short loc_605D
                xor     byte ptr [si+2], 40h
                mov     [si], ax
                mov     ch, [si+2]
                xchg    ax, si
                dec     si
                mov     es, si
                mov     es:[di+0Ah], ax
                and     ch, 0Ch
                mov     es:[di+5], ch
                call    GLRUADD
                jmp     loc_612F
; ---------------------------------------------------------------------------

loc_605D:                               ; CODE XREF: GREALLOC+B2↑j
                jmp     loc_60EF
; ---------------------------------------------------------------------------

loc_6060:                               ; CODE XREF: GREALLOC:loc_6012↑j
                mov     si, bx
                add     bx, ax
                call    HEND
                mov     bx, es:[di+8]
                cmp     dx, bx
                ja      short loc_6085

loc_606F:                               ; CODE XREF: GREALLOC+127↓j
                                        ; GREALLOC+1EE↓j
                mov     si, dx
                inc     dx
                inc     dx
                cmp     dx, bx
                jnb     short loc_607F
                call    GSPLICE
                mov     es, si
                call    GMARKFREE

loc_607F:                               ; CODE XREF: GREALLOC:loc_6010↑j
                                        ; GREALLOC+90↑j ...
                mov     ax, [bp+var_4]

loc_6082:                               ; CODE XREF: GREALLOC+166↓j
                jmp     loc_612F
; ---------------------------------------------------------------------------

loc_6085:                               ; CODE XREF: GREALLOC+E2↑j
                push    es
                mov     es, bx
                cmp     es:[di+1], di
                jnz     short loc_60B4
                sub     dx, bx
                push    si
                call    GCHECKFREE
                pop     si
                jb      short loc_60B4
                add     dx, bx
                pop     cx
                mov     cx, es
                call    GJOIN
                test    [bp+var_2], 40h
                jz      short loc_60AE
                mov     bx, cx
                mov     cx, dx
                dec     cx
                call    GZERO

loc_60AE:                               ; CODE XREF: GREALLOC+119↑j
                mov     bx, es:[di+8]
                jmp     short loc_606F
; ---------------------------------------------------------------------------

loc_60B4:                               ; CODE XREF: GREALLOC+101↑j
                                        ; GREALLOC+10A↑j
                pop     es
                mov     dx, [bp+var_2]
                test    dl, 8
                jnz     short loc_60C6
                mov     bx, 2
                jcxz    short loc_60F3
                test    dx, bx
                jnz     short loc_60F3

loc_60C6:                               ; CODE XREF: GREALLOC+130↑j
                jmp     loc_5FA7
; ---------------------------------------------------------------------------

loc_60C9:                               ; CODE XREF: GREALLOC+17F↓j
                                        ; GREALLOC+1F8↓j
                mov     bx, [bp+var_4]
                test    bl, 1
                jnz     short loc_60D3
                mov     bx, [bx]

loc_60D3:                               ; CODE XREF: GREALLOC+144↑j
                dec     bx
                mov     es, bx
                mov     ax, es:[di+3]
                mov     es, word ptr es:[di+8]
                cmp     es:[di+1], di
                jnz     short loc_60E9
                add     ax, es:[di+3]
                inc     ax

loc_60E9:                               ; CODE XREF: GREALLOC+157↑j
                cmp     ax, dx
                jbe     short loc_60EF
                mov     dx, ax

loc_60EF:                               ; CODE XREF: GREALLOC:loc_605D↑j
                                        ; GREALLOC+160↑j
                xor     ax, ax
                jmp     short loc_6082
; ---------------------------------------------------------------------------

loc_60F3:                               ; CODE XREF: GREALLOC+135↑j
                                        ; GREALLOC+139↑j
                or      dx, bx
                test    [bp+var_4], 1
                jz      short loc_610C
                xor     dx, bx
                test    [bp+var_2], bx
                jnz     short loc_610C
                xor     dx, dx
                call    GCOMPACT
                mov     dx, ax
                jmp     short loc_60C9
; ---------------------------------------------------------------------------

loc_610C:                               ; CODE XREF: GREALLOC+16F↑j
                                        ; GREALLOC+176↑j
                mov     ax, dx
                mov     bx, si
                mov     cx, si
                call    GSEARCH
                jz      short loc_6135
                mov     si, [bp+var_4]
                mov     cx, ax
                test    si, 1
                jnz     short loc_6126
                mov     cx, si
                mov     si, [si]

loc_6126:                               ; CODE XREF: GREALLOC+195↑j
                dec     ax
                mov     es, ax
                dec     si
                call    GMOVEBUSY
                mov     ax, cx

loc_612F:                               ; CODE XREF: GREALLOC+20↑j
                                        ; GREALLOC+51↑j ...
                mov     cx, ax
                mov     sp, bp
                pop     bp
                retn
; ---------------------------------------------------------------------------

loc_6135:                               ; CODE XREF: GREALLOC+18A↑j
                mov     bx, [bp+var_4]
                test    bl, 1
                jnz     short loc_613F
                mov     bx, [bx]

loc_613F:                               ; CODE XREF: GREALLOC+1B0↑j
                mov     ax, bx
                dec     bx
                mov     es, bx
                mov     bx, [bp+var_8]
                add     bx, ax
                call    HEND
                mov     bx, es:[di+8]
                mov     es, bx
                cmp     es:[di+1], di
                jnz     short loc_617C
                sub     dx, bx
                call    GCHECKFREE
                jb      short loc_617C
                add     dx, bx
                mov     cx, es
                call    GJOIN
                test    [bp+var_2], 40h
                jz      short loc_6175
                mov     bx, cx
                mov     cx, dx
                dec     cx
                call    GZERO

loc_6175:                               ; CODE XREF: GREALLOC+1E0↑j
                mov     bx, es:[di+8]
                jmp     loc_606F
; ---------------------------------------------------------------------------

loc_617C:                               ; CODE XREF: GREALLOC+1CB↑j
                                        ; GREALLOC+1D2↑j
                xor     dx, dx
                call    GCOMPACT
                mov     dx, ax
                jmp     loc_60C9
GREALLOC        endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


GFREE           proc near               ; CODE XREF: INT21FREE+2↓p
                                        ; GLOBALFREE+8F↓p
                push    cx
                call    GALIGN
                pop     dx
                jz      short loc_6197
                or      dx, dx
                jnz     short loc_619D

loc_6191:                               ; CODE XREF: GFREE+1B↓j
                call    GLRUDEL
                call    GMARKFREE

loc_6197:                               ; CODE XREF: GFREE+5↑j
                call    HFREE

loc_619A:                               ; CODE XREF: GFREE+20↓j
                mov     cx, ax
                retn
; ---------------------------------------------------------------------------

loc_619D:                               ; CODE XREF: GFREE+9↑j
                cmp     es:[di+1], dx
                jz      short loc_6191
                mov     ax, 0FFFFh
                jmp     short loc_619A
GFREE           endp


; =============== S U B R O U T I N E =======================================


GFREEALL        proc near               ; CODE XREF: GLOBALFREEALL+73↓p
                mov     es, word ptr [di+6]
                mov     cx, [di+4]

loc_61AE:                               ; CODE XREF: GFREEALL+19↓j
                cmp     es:[di+1], dx
                jnz     short loc_61BD
                call    GLRUDEL
                call    GMARKFREE
                call    HFREE

loc_61BD:                               ; CODE XREF: GFREEALL+A↑j
                mov     es, word ptr es:[di+8]
                loop    loc_61AE
                xor     si, si
                mov     [di+0Bh], cl

loc_61C8:                               ; CODE XREF: GFREEALL+29↓j
                                        ; GFREEALL+2D↓j ...
                call    HENUM
                jz      short locret_61DC
                test    byte ptr [si+2], 40h
                jz      short loc_61C8
                cmp     [si], dx
                jnz     short loc_61C8
                call    HFREE
                jmp     short loc_61C8
; ---------------------------------------------------------------------------

locret_61DC:                            ; CODE XREF: GFREEALL+23↑j
                retn
GFREEALL        endp


; =============== S U B R O U T I N E =======================================


GLOCK           proc near               ; CODE XREF: LOCKSEGMENT+5↓p
                                        ; GLOBALLOCK:loc_6EDC↓p
                inc     ch
                jz      short locret_61E4
                mov     [bx+3], ch

locret_61E4:                            ; CODE XREF: GLOCK+2↑j
                retn
GLOCK           endp


; =============== S U B R O U T I N E =======================================


GUNLOCK         proc near               ; CODE XREF: UNLOCKSEGMENT+5↓p
                                        ; GLOBALUNLOCK:loc_6F33↓p
                dec     ch
                cmp     ch, 0FEh
                jnb     short loc_61F9
                dec     byte ptr [bx+3]
                jnz     short locret_61FB
                test    cl, 1
                jz      short loc_61F9
                call    GLRUTOP

loc_61F9:                               ; CODE XREF: GUNLOCK+5↑j
                                        ; GUNLOCK+F↑j
                xor     cx, cx

locret_61FB:                            ; CODE XREF: GUNLOCK+A↑j
                retn
GUNLOCK         endp


; =============== S U B R O U T I N E =======================================


GLRUTOP         proc near               ; CODE XREF: GETCODEHANDLE+53↑p
                                        ; GUNLOCK+11↑p ...
                push    es
                push    cx
                push    dx
                push    si
                cmp     [di+1Ah], bx
                jz      short loc_6257
                test    byte ptr [bx+2], 1
                jz      short loc_6257
                test    byte ptr [bx+2], 40h
                jnz     short loc_6257
                mov     dx, bx
                mov     bx, [bx]
                dec     bx
                mov     es, bx
                push    es
                mov     bx, es:[di+0Eh]
                mov     si, es:[di+0Ch]
                mov     cx, [bx]
                dec     cx
                mov     es, cx
                mov     es:[di+0Ch], si
                mov     cx, [si]
                dec     cx
                mov     es, cx
                mov     es:[di+0Eh], bx
                mov     bx, dx
                xchg    bx, [di+1Ah]
                mov     cx, [bx]
                dec     cx
                mov     es, cx
                mov     si, dx
                xchg    si, es:[di+0Ch]
                mov     cx, [si]
                dec     cx
                mov     es, cx
                mov     es:[di+0Eh], dx
                pop     es
                mov     es:[di+0Ch], si
                mov     es:[di+0Eh], bx
                mov     bx, dx

loc_6257:                               ; CODE XREF: GLRUTOP+7↑j
                                        ; GLRUTOP+D↑j ...
                pop     si
                pop     dx
                pop     cx
                pop     es
                retn
GLRUTOP         endp


; =============== S U B R O U T I N E =======================================


GLRUADD         proc near               ; CODE XREF: GALLOC+40↑p
                                        ; GREALLOC:loc_6004↑p ...
                mov     bx, es:[di+0Ah]
                test    byte ptr [bx+2], 1
                jz      short locret_6299
                mov     dx, bx
                xchg    bx, [di+1Ah]
                inc     word ptr [di+1Ch]
                or      bx, bx
                jz      short loc_6291
                mov     cx, [bx]
                dec     cx
                push    es
                mov     es, cx
                mov     si, dx
                xchg    si, es:[di+0Ch]
                mov     cx, [si]
                dec     cx
                mov     es, cx
                mov     es:[di+0Eh], dx
                pop     es
                mov     es:[di+0Ch], si
                mov     es:[di+0Eh], bx
                retn
; ---------------------------------------------------------------------------

loc_6291:                               ; CODE XREF: GLRUADD+14↑j
                mov     es:[di+0Ch], dx
                mov     es:[di+0Eh], dx

locret_6299:                            ; CODE XREF: GLRUADD+8↑j
                retn
GLRUADD         endp


; =============== S U B R O U T I N E =======================================


GLRUDEL         proc near               ; CODE XREF: GREALLOC+38↑p
                                        ; GREALLOC+5E↑p ...
                push    si
                push    cx
                mov     cx, es:[di+0Ah]
                jcxz    short loc_62E2
                mov     bx, cx
                test    byte ptr [bx+2], 1
                jz      short loc_62E2
                test    byte ptr [bx+2], 40h
                jnz     short loc_62E2
                mov     bx, es:[di+0Eh]
                mov     si, es:[di+0Ch]
                push    es
                mov     cx, [bx]
                dec     cx
                mov     es, cx
                mov     es:[di+0Ch], si
                mov     cx, [si]
                dec     cx
                mov     es, cx
                mov     es:[di+0Eh], bx
                pop     es
                dec     word ptr [di+1Ch]
                mov     cx, es:[di+0Ah]
                cmp     [di+1Ah], cx
                jnz     short loc_62E2
                mov     [di+1Ah], bx
                cmp     bx, cx
                jnz     short loc_62E2
                sub     [di+1Ah], bx

loc_62E2:                               ; CODE XREF: GLRUDEL+6↑j
                                        ; GLRUDEL+E↑j ...
                pop     cx
                pop     si
                retn
GLRUDEL         endp


; =============== S U B R O U T I N E =======================================


GLRUPREV        proc near               ; CODE XREF: GDISCARD+40↓p
                or      si, si
                jnz     short loc_62EF
                mov     si, [di+1Ah]
                mov     cx, [di+1Ch]

loc_62EF:                               ; CODE XREF: GLRUPREV+2↑j
                jcxz    short loc_6304
                dec     cx
                mov     si, [si]
                dec     si
                mov     es, si
                mov     si, es:[di+0Ch]
                test    byte ptr [si+2], 40h
                jnz     short loc_6304
                or      si, si
                retn
; ---------------------------------------------------------------------------

loc_6304:                               ; CODE XREF: GLRUPREV:loc_62EF↑j
                                        ; GLRUPREV+1A↑j
                xor     si, si
                retn
GLRUPREV        endp


; =============== S U B R O U T I N E =======================================


GSPLICE         proc near               ; CODE XREF: GREALLOC+EC↑p
                                        ; GSEARCH+AE↓p ...
                inc     word ptr [di+4]
                push    si
                push    es
                mov     cx, si
                xchg    cx, es:[di+8]
                mov     es, cx
                mov     es:[di+6], si
                mov     es, si
                mov     es:[di+8], cx
                sub     si, cx
                neg     si
                dec     si
                mov     es:[di+3], si
                pop     cx
                mov     es:[di+6], cx
                mov     es:[di+1], di
                mov     es:[di+0Ah], di
                mov     byte ptr es:[di], 4Dh ; 'M'
                mov     es, cx
                sub     cx, es:[di+8]
                neg     cx
                dec     cx
                mov     es:[di+3], cx
                pop     si
                retn
GSPLICE         endp


; =============== S U B R O U T I N E =======================================


GJOIN           proc near               ; CODE XREF: GREALLOC+111↑p
                                        ; GREALLOC+1D8↑p ...
                dec     word ptr [di+4]
                mov     si, es:[di+6]
                mov     es, word ptr es:[di+8]
                mov     es:[di+6], si
                push    es
                mov     es, si
                pop     word ptr es:[di+8]
                sub     si, es:[di+8]
                neg     si
                dec     si
                mov     es:[di+3], si
                retn
GJOIN           endp


; =============== S U B R O U T I N E =======================================


GZERO           proc near               ; CODE XREF: GREALLOC+120↑p
                                        ; GREALLOC+1E7↑p ...
                push    ax
                push    di
                push    es
                mov     es, bx
                sub     bx, cx
                neg     bx
                inc     bx

loc_6373:                               ; CODE XREF: GZERO+2B↓j
                mov     cx, 1000h
                cmp     bx, cx
                jnb     short loc_637E
                mov     cx, bx
                jcxz    short loc_6396

loc_637E:                               ; CODE XREF: GZERO+F↑j
                sub     bx, cx
                shl     cx, 1
                shl     cx, 1
                shl     cx, 1
                xor     ax, ax
                xor     di, di
                cld
                rep stosw
                mov     ax, es
                add     ah, 10h
                mov     es, ax
                assume es:nothing
                jmp     short loc_6373
; ---------------------------------------------------------------------------

loc_6396:                               ; CODE XREF: GZERO+13↑j
                pop     es
                assume es:nothing
                pop     di
                pop     ax
                retn
GZERO           endp


; =============== S U B R O U T I N E =======================================


GSEARCH         proc near               ; CODE XREF: GALLOC:loc_5F6A↑p
                                        ; GREALLOC+AE↑p ...
                push    cx
                push    ax
                add     bx, 1
                call    HEND
                mov     cx, [di+4]
                mov     es, word ptr [di+6]
                mov     bx, 8
                test    al, 1
                jz      short loc_63B4
                mov     es, word ptr [di+8]
                mov     bl, 6

loc_63B4:                               ; CODE XREF: GSEARCH+13↑j
                mov     es, word ptr es:[bx]

loc_63B7:                               ; CODE XREF: GSEARCH+5B↓j
                                        ; GSEARCH+81↓j
                cmp     es:[di+1], di
                jz      short loc_6409
                mov     si, es:[di+0Ah]
                cmp     bl, 8
                jnz     short loc_63F7
                or      si, si
                jz      short loc_6418
                cmp     [si+3], bh
                jnz     short loc_6418
                pop     ax
                push    ax
                test    al, 2
                jnz     short loc_6418
                mov     ax, es:[di+3]
                inc     ax
                cmp     ax, dx
                jb      short loc_6418
                push    dx
                mov     dx, ax
                call    GFINDFREE
                pop     dx
                or      ax, ax
                jz      short loc_6418
                push    word ptr es:[di+6]
                mov     si, es
                mov     es, ax
                call    GMOVEBUSY
                pop     es
                jmp     short loc_63B7
; ---------------------------------------------------------------------------

loc_63F7:                               ; CODE XREF: GSEARCH+2A↑j
                cmp     [di+1Eh], di
                jz      short loc_6418
                or      si, si
                jz      short loc_641D
                test    byte ptr es:[di+5], 8
                jz      short loc_641D
                jmp     short loc_6418
; ---------------------------------------------------------------------------

loc_6409:                               ; CODE XREF: GSEARCH+21↑j
                call    GCHECKFREE
                jnb     short loc_6432
                cmp     [di+1Eh], di
                jz      short loc_6418
                cmp     bl, 6
                jz      short loc_641D

loc_6418:                               ; CODE XREF: GSEARCH+2E↑j
                                        ; GSEARCH+33↑j ...
                mov     es, word ptr es:[bx]
                loop    loc_63B7

loc_641D:                               ; CODE XREF: GSEARCH+64↑j
                                        ; GSEARCH+6B↑j ...
                push    bx
                call    GCOMPACT
                pop     bx
                cmp     ax, dx
                jnb     short loc_6432
                mov     dx, ax
                or      dx, dx
                jz      short loc_642D
                dec     dx

loc_642D:                               ; CODE XREF: GSEARCH+90↑j
                pop     ax
                pop     cx
                xor     ax, ax
                retn
; ---------------------------------------------------------------------------

loc_6432:                               ; CODE XREF: GSEARCH+72↑j
                                        ; GSEARCH+8A↑j
                mov     ax, es:[di+3]
                inc     ax
                mov     cx, ax
                sub     cx, dx
                xor     si, si
                jcxz    short loc_645C
                cmp     bl, 6
                jz      short loc_644D
                mov     si, es
                add     si, dx
                call    GSPLICE
                jmp     short loc_645C
; ---------------------------------------------------------------------------

loc_644D:                               ; CODE XREF: GSEARCH+A8↑j
                mov     si, es:[di+8]
                sub     si, dx
                call    GSPLICE
                mov     es, si
                mov     si, es:[di+6]

loc_645C:                               ; CODE XREF: GSEARCH+A3↑j
                                        ; GSEARCH+B1↑j
                pop     dx
                pop     word ptr es:[di+1]
                xor     ax, ax
                mov     es:[di+0Ch], ax
                mov     es:[di+0Eh], ax
                mov     al, 0Ch
                and     al, dl
                mov     es:[di+5], al
                mov     ax, es
                inc     ax
                test    dl, 40h
                jz      short loc_6485
                mov     cx, es:[di+8]
                dec     cx
                mov     bx, ax
                call    GZERO

loc_6485:                               ; CODE XREF: GSEARCH+DF↑j
                mov     es, si
                call    GMARKFREE
                or      ax, ax
                retn
GSEARCH         endp


; =============== S U B R O U T I N E =======================================


GMARKFREE       proc near               ; CODE XREF: GALLOC+1C↑p
                                        ; GREALLOC+40↑p ...
                mov     si, es
                or      si, si
                jz      short loc_64CA
                mov     es:[di+1], di
                push    dx
                xor     dx, dx
                xchg    dx, es:[di+0Ah]
                push    word ptr es:[di+6]
                mov     es, word ptr es:[di+8]
                cmp     es:[di+1], di
                jnz     short loc_64AF
                call    GJOIN

loc_64AF:                               ; CODE XREF: GMARKFREE+1D↑j
                pop     es
                cmp     es:[di+1], di
                jnz     short loc_64BD
                mov     es, word ptr es:[di+8]
                call    GJOIN

loc_64BD:                               ; CODE XREF: GMARKFREE+27↑j
                mov     si, dx
                pop     dx
                cmp     es:[di+1], di
                jz      short loc_64CA
                mov     es, word ptr es:[di+8]

loc_64CA:                               ; CODE XREF: GMARKFREE+4↑j
                                        ; GMARKFREE+37↑j
                or      si, si
                retn
GMARKFREE       endp


; =============== S U B R O U T I N E =======================================


GFINDFREE       proc near               ; CODE XREF: GSEARCH+47↑p
                                        ; GRTEST+B↓p
                push    es
                push    cx

loc_64CF:                               ; CODE XREF: GFINDFREE+17↓j
                cmp     es:[di+1], di
                jnz     short loc_64E1
                call    GCHECKFREE
                mov     ax, es
                jnb     short loc_64E8
                cmp     bl, 6
                jz      short loc_64E6

loc_64E1:                               ; CODE XREF: GFINDFREE+6↑j
                mov     es, word ptr es:[bx]
                loop    loc_64CF

loc_64E6:                               ; CODE XREF: GFINDFREE+12↑j
                xor     ax, ax          ; fail - ax->0

loc_64E8:                               ; CODE XREF: GFINDFREE+D↑j
                pop     cx
                pop     es
                retn
GFINDFREE       endp


; =============== S U B R O U T I N E =======================================


GCHECKFREE      proc near               ; CODE XREF: GREALLOC+106↑p
                                        ; GREALLOC+1CF↑p ...
                mov     ax, es:[di+3]
                inc     ax
                cmp     [di+1Eh], di
                jz      short loc_652D
                test    byte ptr [di+0Bh], 8
                jnz     short loc_652D
                push    es
                mov     es, word ptr es:[di+8]
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short loc_650D
                test    byte ptr es:[di+5], 8
                jz      short loc_652C

loc_650D:                               ; CODE XREF: GCHECKFREE+19↑j
                pop     es
                mov     si, [di+8]
                sub     si, [di+1Eh]
                cmp     si, es:[di+8]
                jnb     short loc_652D
                sub     si, es:[di+8]
                neg     si
                cmp     ax, si
                jbe     short loc_6528
                sub     ax, si
                jmp     short loc_652D
; ---------------------------------------------------------------------------

loc_6528:                               ; CODE XREF: GCHECKFREE+37↑j
                xor     ax, ax
                jmp     short loc_652D
; ---------------------------------------------------------------------------

loc_652C:                               ; CODE XREF: GCHECKFREE+20↑j
                pop     es

loc_652D:                               ; CODE XREF: GCHECKFREE+8↑j
                                        ; GCHECKFREE+E↑j ...
                cmp     ax, dx
                retn
GCHECKFREE      endp

; ---------------------------------------------------------------------------
                db 80h dup(0)
word_65B0       dw 0                    ; DATA XREF: GMOVE:loc_6606↓w
                                        ; GMOVE:loc_6655↓r ...
word_65B2       dw 0                    ; DATA XREF: GMOVE+46↓w
                                        ; GMOVE+AE↓r

; =============== S U B R O U T I N E =======================================


GMOVE           proc near               ; CODE XREF: GSLIDECOMMON:loc_6773↓p
                                        ; GMOVEBUSY+56↓p
                push    es
                push    si
                push    di
                push    ax
                push    bx
                push    cx
                push    dx
                mov     dx, si
                and     dx, 1
                push    es
                mov     cx, es
                or      cl, 1
                mov     ax, si
                xor     ax, dx
                mov     es, ax
                xor     dl, 1
                add     dx, es:[di+3]
                push    dx
                mov     ax, 1
                mov     bx, es:[di+0Ah]
                or      bx, bx
                jnz     short loc_65E3
                mov     bx, es
                inc     bx

loc_65E3:                               ; CODE XREF: GMOVE+2A↑j
                push    es
                call    GNOTIFY
                pop     cx
                inc     cx
                pop     dx
                pop     di
                push    ds
                mov     ax, ss
                cmp     ax, cx
                mov     cx, 0
                jnz     short loc_6606
                mov     cx, di
                or      cl, 1
                mov     cs:word_65B2, sp
                cli
                push    cs
                pop     ss
                assume ss:cseg01
                mov     sp, 65B0h
                sti

loc_6606:                               ; CODE XREF: GMOVE+3F↑j
                mov     cs:word_65B0, cx
                mov     ax, dx
                add     ax, si
                mov     bx, dx
                add     bx, di
                cmp     si, di
                jb      short loc_661B
                mov     ax, si
                mov     bx, di

loc_661B:                               ; CODE XREF: GMOVE+61↑j
                                        ; GMOVE+9F↓j
                mov     cx, 1000h
                cmp     dx, cx
                jnb     short loc_6626
                mov     cx, dx
                jcxz    short loc_6655

loc_6626:                               ; CODE XREF: GMOVE+6C↑j
                sub     dx, cx
                mov     si, cx
                shl     cx, 1
                shl     cx, 1
                shl     cx, 1
                cmp     ax, bx
                jb      short loc_6641
                cld
                mov     ds, ax
                mov     es, bx
                add     ax, si
                add     bx, si
                xor     si, si
                jmp     short loc_664F
; ---------------------------------------------------------------------------

loc_6641:                               ; CODE XREF: GMOVE+7E↑j
                std
                sub     ax, si
                sub     bx, si
                mov     si, cx
                dec     si
                shl     si, 1
                mov     ds, ax
                mov     es, bx

loc_664F:                               ; CODE XREF: GMOVE+8B↑j
                mov     di, si
                rep movsw
                jmp     short loc_661B
; ---------------------------------------------------------------------------

loc_6655:                               ; CODE XREF: GMOVE+70↑j
                cmp     cs:word_65B0, cx
                jz      short loc_6668
                cli
                mov     ss, cs:word_65B0
                assume ss:nothing
                mov     sp, cs:word_65B2
                sti

loc_6668:                               ; CODE XREF: GMOVE+A6↑j
                pop     ds
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                pop     di
                pop     si
                pop     es
                cld
                retn
GMOVE           endp


; =============== S U B R O U T I N E =======================================


GCOMPACT        proc near               ; CODE XREF: GREALLOC+17A↑p
                                        ; GREALLOC+1F3↑p ...
                push    si

loc_6673:                               ; CODE XREF: GCOMPACT+33↓j
                push    dx
                cmp     [di+1Eh], di
                jz      short loc_6682
                mov     es, word ptr [di+6]
                mov     bx, 8
                call    GCMPHEAP

loc_6682:                               ; CODE XREF: GCOMPACT+5↑j
                mov     es, word ptr [di+8]
                mov     bx, 6
                call    GCMPHEAP
                pop     dx
                mov     es, ax
                or      ax, ax
                jz      short loc_6697
                call    GCHECKFREE
                jnb     short loc_66A7

loc_6697:                               ; CODE XREF: GCOMPACT+1E↑j
                test    byte ptr [di+0Bh], 30h
                jnz     short loc_66A7
                cmp     [di+2], di
                jnz     short loc_66A7
                call    GDISCARD
                jnz     short loc_6673

loc_66A7:                               ; CODE XREF: GCOMPACT+23↑j
                                        ; GCOMPACT+29↑j ...
                pop     si
                retn
GCOMPACT        endp


; =============== S U B R O U T I N E =======================================


GCMPHEAP        proc near               ; CODE XREF: GCOMPACT+D↑p
                                        ; GCOMPACT+16↑p
                mov     cx, [di+4]
                xor     ax, ax
                push    ax

loc_66AF:                               ; CODE XREF: GCMPHEAP+F↓j
                cmp     es:[di+1], di
                jz      short loc_66BC

loc_66B5:                               ; CODE XREF: GCMPHEAP+2B↓j
                                        ; GCMPHEAP+5A↓j
                mov     es, word ptr es:[bx]
                loop    loc_66AF
                pop     ax
                retn
; ---------------------------------------------------------------------------

loc_66BC:                               ; CODE XREF: GCMPHEAP+A↑j
                                        ; GCMPHEAP+21↓j ...
                test    byte ptr [di+0Bh], 10h
                jnz     short loc_66D1
                cmp     [di+2], di
                jnz     short loc_66D1
                call    GSLIDE
                jnz     short loc_66BC
                call    GBESTFIT
                jnz     short loc_66BC

loc_66D1:                               ; CODE XREF: GCMPHEAP+17↑j
                                        ; GCMPHEAP+1C↑j
                cmp     bl, 6
                jnz     short loc_66B5
                pop     si
                mov     ax, es
                cmp     si, ax
                jz      short loc_6702
                cmp     es:[di+1], di
                jnz     short loc_6702
                or      si, si
                jz      short loc_6700
                cmp     [di+1Eh], di
                jz      short loc_66F2
                test    byte ptr [di+0Bh], 8
                jnz     short loc_6702

loc_66F2:                               ; CODE XREF: GCMPHEAP+41↑j
                push    es
                mov     es, si
                mov     ax, es:[di+3]
                pop     es
                cmp     es:[di+3], ax
                jb      short loc_6702

loc_6700:                               ; CODE XREF: GCMPHEAP+3C↑j
                mov     si, es

loc_6702:                               ; CODE XREF: GCMPHEAP+32↑j
                                        ; GCMPHEAP+38↑j ...
                push    si
                jmp     short loc_66B5
GCMPHEAP        endp


; =============== S U B R O U T I N E =======================================


GMOVEABLE       proc near               ; CODE XREF: GSLIDE+A↓p
                                        ; GBESTFIT+F↓p
                mov     si, es:[di+0Ah]
                or      si, si
                jz      short loc_6726
                cmp     [si+3], bh
                jnz     short loc_6726
                test    byte ptr es:[di+5], 8
                jz      short loc_671D
                cmp     bl, 8
                retn
; ---------------------------------------------------------------------------

loc_671D:                               ; CODE XREF: GMOVEABLE+12↑j
                cmp     [di+1Eh], di
                jz      short loc_6728
                cmp     bl, 6
                retn
; ---------------------------------------------------------------------------

loc_6726:                               ; CODE XREF: GMOVEABLE+6↑j
                                        ; GMOVEABLE+B↑j
                xor     si, si

loc_6728:                               ; CODE XREF: GMOVEABLE+1B↑j
                or      si, si
                retn
GMOVEABLE       endp


; =============== S U B R O U T I N E =======================================


GSLIDE          proc near               ; CODE XREF: GCMPHEAP+1E↑p
                push    es
                mov     es, word ptr es:[bx]
                mov     ax, es
                mov     dx, es:[di+3]
                call    GMOVEABLE
                pop     es
                jnz     short GSLIDECOMMON
                retn
GSLIDE          endp


; =============== S U B R O U T I N E =======================================


GSLIDECOMMON    proc near               ; CODE XREF: GSLIDE+E↑j
                                        ; GMOVEBUSY+1D↓p
                mov     si, ax
                inc     dx
                cmp     bl, 8
                jz      short loc_675B
                mov     ax, es:[di+8]
                push    ax
                sub     ax, dx
                push    ax
                cmp     es:[bx], si
                jz      short loc_6754
                push    es
                jmp     short loc_6755
; ---------------------------------------------------------------------------

loc_6754:                               ; CODE XREF: GSLIDECOMMON+13↑j
                push    si

loc_6755:                               ; CODE XREF: GSLIDECOMMON+16↑j
                mov     es, ax
                xor     ax, ax
                jmp     short loc_6773
; ---------------------------------------------------------------------------

loc_675B:                               ; CODE XREF: GSLIDECOMMON+6↑j
                cmp     es:[bx], si
                jz      short loc_6766
                push    word ptr es:[di+8]
                jmp     short loc_6769
; ---------------------------------------------------------------------------

loc_6766:                               ; CODE XREF: GSLIDECOMMON+22↑j
                add     ax, dx
                push    ax

loc_6769:                               ; CODE XREF: GSLIDECOMMON+28↑j
                mov     ax, es
                add     ax, dx
                push    ax
                push    es
                mov     ax, es:[di+6]

loc_6773:                               ; CODE XREF: GSLIDECOMMON+1D↑j
                call    GMOVE
                mov     si, es
                pop     es
                or      ax, ax
                jz      short loc_6781
                mov     es:[di+6], ax

loc_6781:                               ; CODE XREF: GSLIDECOMMON+3F↑j
                pop     ax
                mov     es:[di+8], ax
                mov     dx, es
                mov     es, ax
                mov     es:[di+6], dx
                pop     ax
                mov     es:[di+8], ax
                mov     dx, es
                mov     es, ax
                mov     es:[di+6], dx
                mov     es, si
                mov     si, es:[di+0Ah]
                or      si, si
                jz      short loc_67AA
                mov     ax, es
                inc     ax
                mov     [si], ax

loc_67AA:                               ; CODE XREF: GSLIDECOMMON+67↑j
                mov     es, word ptr es:[bx]
                mov     ax, es:[di+8]
                mov     si, es
                sub     ax, si
                dec     ax
                mov     es:[di+3], ax
                mov     byte ptr es:[di], 4Dh ; 'M'
                mov     byte ptr es:[di+5], 0
                mov     es:[di+0Ah], di
                mov     es:[di+0Ch], di
                mov     es:[di+0Eh], di
                call    GMARKFREE
                or      ax, ax
                retn
GSLIDECOMMON    endp


; =============== S U B R O U T I N E =======================================


GBESTFIT        proc near               ; CODE XREF: GCMPHEAP+23↑p
                push    es
                push    cx
                xor     si, si
                mov     dx, es:[di+3]

loc_67DD:                               ; CODE XREF: GBESTFIT+36↓j
                cmp     es:[di+1], di
                jz      short loc_6808
                push    si
                call    GMOVEABLE
                pop     si
                jz      short loc_6808
                cmp     es:[di+3], dx
                ja      short loc_6808
                or      si, si
                jz      short loc_6802
                push    es
                mov     es, si
                mov     ax, es:[di+3]
                pop     es
                cmp     es:[di+3], ax
                jbe     short loc_6808

loc_6802:                               ; CODE XREF: GBESTFIT+1D↑j
                mov     si, es
                mov     ax, es:[di+3]

loc_6808:                               ; CODE XREF: GBESTFIT+C↑j
                                        ; GBESTFIT+13↑j ...
                mov     es, word ptr es:[bx]
                loop    loc_67DD
                pop     cx
                pop     es
                or      si, si
                jz      short locret_6816
                call    GMOVEBUSY

locret_6816:                            ; CODE XREF: GBESTFIT+3C↑j
                retn
GBESTFIT        endp


; =============== S U B R O U T I N E =======================================


GMOVEBUSY       proc near               ; CODE XREF: GREALLOC+19F↑p
                                        ; GSEARCH+57↑p ...
                push    cx
                push    dx
                mov     ax, es
                mov     cx, es:[di+3]
                cmp     es:[di+1], di
                mov     es, si
                mov     dx, es:[di+3]
                jnz     short loc_6847
                cmp     cx, dx
                jz      short loc_6847
                mov     es, ax
                mov     ax, si
                push    si
                call    GSLIDECOMMON
                inc     word ptr [di+4]
                mov     ax, es
                pop     es
                call    GMARKFREE
                mov     es, ax
                or      ax, ax
                jmp     short loc_6886
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_6847:                               ; CODE XREF: GMOVEBUSY+12↑j
                                        ; GMOVEBUSY+16↑j
                inc     si
                mov     cl, es:[di+5]
                push    word ptr es:[di+1]
                push    word ptr es:[di+0Ch]
                push    word ptr es:[di+0Eh]
                mov     es, ax
                pop     word ptr es:[di+0Eh]
                pop     word ptr es:[di+0Ch]
                pop     word ptr es:[di+1]
                mov     es:[di+5], cl
                inc     ax
                mov     es, ax
                call    GMOVE
                dec     si
                mov     es, si
                call    GMARKFREE
                dec     ax
                mov     es, ax
                inc     ax
                or      si, si
                jz      short loc_6886
                mov     [si], ax
                mov     es:[di+0Ah], si
                xor     si, si

loc_6886:                               ; CODE XREF: GMOVEBUSY+2D↑j
                                        ; GMOVEBUSY+65↑j
                pop     dx
                pop     cx
                retn
GMOVEBUSY       endp


; =============== S U B R O U T I N E =======================================


GDISCARD        proc near               ; CODE XREF: GCOMPACT+30↑p
                push    es
                push    ax
                push    dx
                mov     byte ptr [di+0Ah], 0
                sub     dx, ax
                mov     [di+0Ch], dx
                mov     es, word ptr [di+8]
                mov     cx, es
                cmp     [di+1Eh], di
                jz      short loc_68C2
                test    byte ptr [di+0Bh], 8
                jnz     short loc_68C2

loc_68A5:                               ; CODE XREF: GDISCARD+2B↓j
                mov     es, word ptr es:[di+6]
                cmp     es:[di+1], di
                jz      short loc_68B6
                test    byte ptr es:[di+5], 8
                jnz     short loc_68A5

loc_68B6:                               ; CODE XREF: GDISCARD+24↑j
                sub     cx, [di+1Eh]
                cmp     cx, es:[di+8]
                jbe     short loc_68C2
                mov     cx, [di+8]

loc_68C2:                               ; CODE XREF: GDISCARD+14↑j
                                        ; GDISCARD+1A↑j ...
                mov     [di+16h], cx
                xor     si, si
                push    si

loc_68C8:                               ; CODE XREF: GDISCARD+4D↓j
                                        ; GDISCARD+54↓j ...
                pop     cx
                call    GLRUPREV
                jnz     short loc_68D1
                jmp     short loc_6912
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_68D1:                               ; CODE XREF: GDISCARD+43↑j
                push    cx
                cmp     byte ptr [si+3], 0
                jnz     short loc_68C8
                mov     bx, [di+16h]
                cmp     [si], bx
                jnb     short loc_68C8
                mov     bx, si
                mov     al, 2
                call    GNOTIFY
                jnz     short loc_68EA
                jmp     short loc_68C8
; ---------------------------------------------------------------------------

loc_68EA:                               ; CODE XREF: GDISCARD+5D↑j
                mov     ax, [si]
                dec     ax
                mov     es, ax
                push    word ptr es:[di+0Eh]
                call    GLRUDEL
                push    word ptr es:[di+1]
                mov     dx, es:[di+3]
                call    GMARKFREE
                pop     word ptr [si]
                or      byte ptr [si+2], 40h
                mov     byte ptr [di+0Ah], 1
                pop     si
                sub     [di+0Ch], dx
                ja      short loc_68C8
                pop     cx

loc_6912:                               ; CODE XREF: GDISCARD+45↑j
                cmp     byte ptr [di+0Ah], 0
                pop     dx
                pop     ax
                pop     es
                retn
GDISCARD        endp


; =============== S U B R O U T I N E =======================================


LRUSWEEP_MODE1  proc far
                pop     cx
                push    cs
                push    cx
                mov     cx, 1
                jmp     short loc_6924
LRUSWEEP_MODE1  endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


LRUSWEEP        proc far                ; DATA XREF: BOOTDONE+4D↓o
                xor     cx, cx

loc_6924:                               ; CODE XREF: LRUSWEEP_MODE1+6↑j
                push    ds
                push    si
                push    di
                push    dx
                mov     ds, cs:PGLOBALHEAP
                cmp     ds:18h, cx
                jnz     short loc_6988
                push    cs:HEXESWEEP

loc_6938:                               ; CODE XREF: LRUSWEEP+33↓j
                                        ; LRUSWEEP:loc_6957↓j ...
                pop     cx
                jcxz    short loc_6988
                mov     es, cx
                push    word ptr es:6
                mov     si, es:1Ch
                mov     di, es:3Eh
                mov     cx, si
                cmp     word ptr es:0, 454Eh
                jnz     short loc_6938

loc_6957:                               ; CODE XREF: LRUSWEEP+64↓j
                jcxz    short loc_6938
                xor     ax, ax
                cld
                repne scasb
                jnz     short loc_6938
                dec     di
                inc     ax
                stosb
                mov     bx, si
                sub     bx, cx
                dec     bx
                cmp     bx, si
                jnb     short loc_6938
                mov     ax, bx
                shl     bx, 1
                shl     bx, 1
                add     bx, ax
                shl     bx, 1
                add     bx, es:22h
                mov     bx, es:[bx+8]
                push    di
                xor     di, di
                call    GLRUTOP
                pop     di
                jmp     short loc_6957
; ---------------------------------------------------------------------------

loc_6988:                               ; CODE XREF: LRUSWEEP+F↑j
                                        ; LRUSWEEP+17↑j
                pop     dx
                pop     di
                pop     si
                pop     ds
                retf
LRUSWEEP        endp


; =============== S U B R O U T I N E =======================================


GENTERCURRENTPDB proc near              ; CODE XREF: INT21ALLOC↓p
                                        ; INT21REALLOC↓p ...
                lds     di, cs:PCURRENTPDB
                mov     ds, word ptr [di]
                mov     cx, ds
                xor     ax, ax
                cmp     ds:4Ah, ax
                jz      short GENTER
                lds     di, ds:48h
                inc     word ptr [di+18h]
                retn
GENTERCURRENTPDB endp


; =============== S U B R O U T I N E =======================================


INT21ALLOC      proc near               ; CODE XREF: DOSAllocMemoryHook+3↑p
                call    GENTERCURRENTPDB
                call    GALLOC
                jmp     short GLEAVE
INT21ALLOC      endp

; ---------------------------------------------------------------------------
                db 90h

; =============== S U B R O U T I N E =======================================


INT21REALLOC    proc near               ; CODE XREF: DOSResizeMemoryHook+35↑p
                call    GENTERCURRENTPDB
                call    GREALLOC
                jmp     short GLEAVE
INT21REALLOC    endp

; ---------------------------------------------------------------------------
                align 2

; =============== S U B R O U T I N E =======================================


j_GENTERCURRENTPDB proc near            ; CODE XREF: DOSFreeMemoryHook+5↑p
                call    GENTERCURRENTPDB
j_GENTERCURRENTPDB endp


; =============== S U B R O U T I N E =======================================


INT21FREE       proc near
                xor     cx, cx
                call    GFREE
                jmp     short GLEAVE
INT21FREE       endp

; ---------------------------------------------------------------------------
                db 90h

; =============== S U B R O U T I N E =======================================


GENTER          proc near               ; CODE XREF: GETCODEHANDLE+50↑p
                                        ; INT24HANDLER+8E↑p ...
                mov     ds, cs:PGLOBALHEAP
                xor     di, di
                inc     word ptr [di+18h] ; increment memory block reference count
                retn
GENTER          endp


; =============== S U B R O U T I N E =======================================


GLEAVE          proc near               ; CODE XREF: GETCODEHANDLE+56↑p
                                        ; INT24HANDLER+94↑p ...
                dec     word ptr [di+18h] ; decrement memory block reference count
                retn
GLEAVE          endp


; =============== S U B R O U T I N E =======================================


GBTOP           proc near               ; CODE XREF: GLOBALALLOC+4D↓p
                                        ; GLOBALREALLOC+50↓p ...
                push    dx
                mov     dx, ss:[bx+2]
                mov     bx, ss:[bx]
                mov     cx, 4
                add     bx, 0Fh
                adc     dx, 0
                jnb     short loc_69E7
                dec     dx
                dec     bx

loc_69E7:                               ; CODE XREF: GBTOP+11↑j
                                        ; GBTOP+19↓j
                shr     dx, 1
                rcr     bx, 1
                loop    loc_69E7
                pop     dx
                inc     ax
                jz      short locret_6A44
                dec     ax
                push    cs
                pop     cx
                cmp     [bp+4], cx
                jz      short loc_69FB
                and     al, 0F2h

loc_69FB:                               ; CODE XREF: GBTOP+25↑j
                mov     [di+0Bh], al
                test    dl, 1
                jnz     short loc_6A18
                or      dx, dx
                jnz     short loc_6A0B
                test    al, 2
                jz      short loc_6A18

loc_6A0B:                               ; CODE XREF: GBTOP+33↑j
                or      al, 1
                cmp     [di+1Eh], di
                jz      short loc_6A18
                test    al, 8
                jnz     short loc_6A18
                xor     al, 1

loc_6A18:                               ; CODE XREF: GBTOP+2F↑j
                                        ; GBTOP+37↑j ...
                test    ah, 0Fh
                jz      short loc_6A23
                and     ah, 0F0h
                or      ah, 1

loc_6A23:                               ; CODE XREF: GBTOP+49↑j
                and     ah, 31h
                mov     cl, 0Ch
                and     cl, al
                or      ah, cl
                test    ah, 30h
                jz      short loc_6A3C
                mov     cx, [bp+4]
                dec     cx
                mov     es, cx
                mov     cx, es:[di+1]
                retn
; ---------------------------------------------------------------------------

loc_6A3C:                               ; CODE XREF: GBTOP+5D↑j
                les     si, cs:PCURRENTPDB
                mov     cx, es:[si]

locret_6A44:                            ; CODE XREF: GBTOP+1D↑j
                retn
GBTOP           endp


; =============== S U B R O U T I N E =======================================


GRESERVE        proc near               ; CODE XREF: CALCMAXNRSEG:loc_2555↑p
                push    ds
                push    di
                call    GENTER
                inc     ax
                add     ax, 1
                and     al, 0FEh
                mov     dx, ax
                xchg    ax, [di+1Eh]
                push    ax
                cmp     dx, ax
                jbe     short loc_6A79
                or      ax, ax
                jnz     short loc_6A61
                inc     ax
                jmp     short loc_6A79
; ---------------------------------------------------------------------------

loc_6A61:                               ; CODE XREF: GRESERVE+17↑j
                mov     byte ptr [di+0Bh], 0
                call    GRTEST
                jnz     short loc_6A79
                mov     dx, [di+1Eh]
                call    GCOMPACT
                call    GRTEST
                jnz     short loc_6A79
                pop     word ptr [di+1Eh]
                push    dx

loc_6A79:                               ; CODE XREF: GRESERVE+13↑j
                                        ; GRESERVE+1A↑j ...
                pop     dx
                call    GLEAVE
                pop     di
                pop     ds
                retn
GRESERVE        endp


; =============== S U B R O U T I N E =======================================


GRTEST          proc near               ; CODE XREF: GRESERVE+20↑p
                                        ; GRESERVE+2B↑p
                mov     bx, 6
                mov     cx, [di+4]
                xor     dx, dx
                mov     es, word ptr [di+8]
                call    GFINDFREE
                or      ax, ax
                retn
GRTEST          endp


; =============== S U B R O U T I N E =======================================


GAVAIL          proc near               ; CODE XREF: GLOBALCOMPACT+54↓p
                mov     byte ptr [di+0Bh], 0
                call    GCOMPACT
                or      dx, dx
                jz      short loc_6A9F
                jmp     loc_6B29
; ---------------------------------------------------------------------------

loc_6A9F:                               ; CODE XREF: GAVAIL+9↑j
                push    dx
                mov     es, word ptr [di+6]

loc_6AA3:                               ; CODE XREF: GAVAIL+28↓j
                                        ; GAVAIL+2E↓j ...
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short loc_6B26
                mov     es, word ptr es:[di+8]
                cmp     es:[di+1], di
                jz      short loc_6ACE
                mov     si, es:[di+0Ah]
                or      si, si
                jz      short loc_6AA3
                cmp     byte ptr [si+3], 0
                jnz     short loc_6AA3
                test    byte ptr [si+2], 1
                jz      short loc_6AA3
                test    byte ptr es:[di+5], 8
                jnz     short loc_6AA3

loc_6ACE:                               ; CODE XREF: GAVAIL+20↑j
                push    es
                mov     ax, es:[di+3]
                mov     cx, [di+4]

loc_6AD6:                               ; CODE XREF: GAVAIL:loc_6B18↓j
                mov     es, word ptr es:[di+8]
                cmp     es:[di+1], di
                jz      short loc_6B13
                cmp     byte ptr es:[di], 5Ah ; 'Z'
                jz      short loc_6B01
                mov     si, es:[di+0Ah]
                or      si, si
                jz      short loc_6B1A
                cmp     byte ptr [si+3], 0
                jnz     short loc_6B1A
                test    byte ptr [si+2], 1
                jz      short loc_6B18
                test    byte ptr es:[di+5], 8
                jz      short loc_6B13

loc_6B01:                               ; CODE XREF: GAVAIL+53↑j
                mov     si, es
                sub     si, [di+8]
                neg     si
                sub     si, [di+1Eh]
                inc     ax
                add     ax, si
                jz      short loc_6B1A
                dec     ax
                jmp     short loc_6B1A
; ---------------------------------------------------------------------------

loc_6B13:                               ; CODE XREF: GAVAIL+4D↑j
                                        ; GAVAIL+6E↑j
                add     ax, es:[di+3]
                inc     ax

loc_6B18:                               ; CODE XREF: GAVAIL+67↑j
                loop    loc_6AD6

loc_6B1A:                               ; CODE XREF: GAVAIL+5B↑j
                                        ; GAVAIL+61↑j ...
                pop     es
                cmp     ax, dx
                jbe     short loc_6AA3
                mov     dx, ax
                pop     ax
                push    es
                jmp     loc_6AA3
; ---------------------------------------------------------------------------

loc_6B26:                               ; CODE XREF: GAVAIL+16↑j
                pop     es
                mov     ax, dx

loc_6B29:                               ; CODE XREF: GAVAIL+B↑j
                or      ax, ax
                jz      short loc_6B31
                dec     ax
                jz      short loc_6B31
                dec     ax

loc_6B31:                               ; CODE XREF: GAVAIL+9A↑j
                                        ; GAVAIL+9D↑j
                and     al, 0FEh
                xor     dx, dx
                retn
GAVAIL          endp


; =============== S U B R O U T I N E =======================================


GNOTIFY         proc near               ; CODE XREF: GREALLOC+32↑p
                                        ; GMOVE+30↑p ...
                xor     ah, ah
                push    si
                push    di
                mov     di, cx
                mov     cx, ax
                mov     si, bx
                test    bl, 1
                jnz     short loc_6B47
                mov     si, [bx]

loc_6B47:                               ; CODE XREF: GNOTIFY+D↑j
                loop    loc_6B67
                push    si
                push    di
                call    DEBUGMOVEDSEGMENT
                push    si
                push    di
                call    PATCHSTACK
                push    si
                push    di
                call    PATCHTHUNKS
                mov     cx, ds
                cmp     cx, si
                jnz     short loc_6BA9
                push    di
                pop     ds
                mov     cs:PGLOBALHEAP, ds
                jmp     short loc_6BA9
; ---------------------------------------------------------------------------

loc_6B67:                               ; CODE XREF: GNOTIFY:loc_6B47↑j
                loop    loc_6BA9
                mov     di, bx
                push    word ptr [di]
                call    SEARCHSTACK
                or      ax, dx
                jz      short loc_6B78
                xor     ax, ax
                jmp     short loc_6BA9
; ---------------------------------------------------------------------------

loc_6B78:                               ; CODE XREF: GNOTIFY+3C↑j
                cmp     word ptr cs:PSWAPHOOK+2, 0
                jz      short loc_6B94
                mov     ax, [di+2]
                push    di
                push    ax
                call    cs:PSWAPHOOK
                or      ax, ax
                jz      short loc_6B94
                or      byte ptr [di+2], 80h
                jmp     short loc_6B9A
; ---------------------------------------------------------------------------

loc_6B94:                               ; CODE XREF: GNOTIFY+48↑j
                                        ; GNOTIFY+56↑j
                test    byte ptr [di+2], 1
                jz      short loc_6BA9

loc_6B9A:                               ; CODE XREF: GNOTIFY+5C↑j
                xor     di, di
                push    si
                push    di
                call    DEBUGMOVEDSEGMENT
                push    si
                push    di
                call    PATCHTHUNKS
                mov     ax, 1

loc_6BA9:                               ; CODE XREF: GNOTIFY+26↑j
                                        ; GNOTIFY+2F↑j ...
                pop     di
                pop     si
                or      ax, ax
                retn
GNOTIFY         endp


; =============== S U B R O U T I N E =======================================


GHEXPAND        proc near
                mov     ax, ds
                push    cx
                call    GHANDLE
                pop     cx
                jz      short loc_6C19
                mov     dx, ax
                xor     ax, ax
                mov     bx, [di+0Eh]
                mov     bx, [bx]
                inc     bx
                add     bx, cx
                shl     bx, 1
                shl     bx, 1
                add     bx, [di+0Eh]
                jb      short loc_6C19
                add     bx, 0Fh
                jb      short loc_6C19
                mov     cl, 4
                shr     bx, cl
                and     byte ptr [di+0Bh], 0F7h
                call    GREALLOC
                jcxz    short loc_6C19
                mov     dx, ax
                call    GALIGN
                jz      short loc_6C19
                mov     bx, es:[di+3]
                mov     cl, 4
                shl     bx, cl
                sub     bx, 3
                and     bl, 0FCh
                sub     bx, [di+0Eh]
                mov     cl, 2
                shr     bx, cl
                mov     ax, bx
                mov     bx, [di+0Eh]
                mov     cx, ax
                xchg    ax, [bx]
                sub     cx, ax
                inc     bx
                inc     bx
                shl     ax, 1
                shl     ax, 1
                add     bx, ax
                xchg    bx, di
                call    HTHREAD
                mov     [di], cx
                mov     di, bx
                mov     cx, ax
                retn
; ---------------------------------------------------------------------------

loc_6C19:                               ; CODE XREF: GHEXPAND+7↑j
                                        ; GHEXPAND+1C↑j ...
                xor     cx, cx
                retn
GHEXPAND        endp


; =============== S U B R O U T I N E =======================================


GMEMCHECK       proc near               ; CODE XREF: GLOBALALLOC+56↓p
                                        ; GLOBALREALLOC+59↓p
                or      ax, ax
                jz      short GMEMFAIL
                retn
GMEMCHECK       endp


; =============== S U B R O U T I N E =======================================


GMEMFAIL        proc near               ; CODE XREF: GMEMCHECK+2↑j
                retn
GMEMFAIL        endp

;
; External Entry #27 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public SETSWAPHOOK
SETSWAPHOOK     proc far
                mov     bx, sp          ; KERNEL_27
                mov     ax, ss:[bx+4]
                mov     dx, ss:[bx+6]
                xchg    ax, word ptr cs:PSWAPHOOK
                xchg    dx, word ptr cs:PSWAPHOOK+2
                retf    4
SETSWAPHOOK     endp

;
; External Entry #15 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GLOBALALLOC
GLOBALALLOC     proc far                ; CODE XREF: MYALLOC+44↑p
                                        ; LOADSEGMENT+103↑p ...

arg_0           = byte ptr  6
arg_4           = word ptr  0Ah

                inc     bp              ; KERNEL_15
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKGLOBALHEAP
                or      ax, ax
                jz      short loc_6C7B
                or      ax, 200h
                xor     bx, bx
                push    ax
                mov     ax, offset SZERRGLOBALALLOC ; "GlobalAlloc: Invalid global heap"
                push    cs
                push    ax
                push    dx
                push    bx
                call    KERNELERROR
                jmp     short loc_6C7B
; ---------------------------------------------------------------------------
SZERRGLOBALALLOC db 'GlobalAlloc: Invalid global heap',0
                                        ; DATA XREF: GLOBALALLOC+14↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6C7B:                               ; CODE XREF: GLOBALALLOC+C↑j
                                        ; GLOBALALLOC+1E↑j
                call    GENTER
                xor     dx, dx
                mov     ax, [bp+arg_4]
                lea     bx, [bp+arg_0]
                call    GBTOP
                call    GALLOC
                call    GLEAVE
                call    GMEMCHECK
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    6
GLOBALALLOC     endp

;
; External Entry #16 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GLOBALREALLOC
GLOBALREALLOC   proc far                ; CODE XREF: SEGLOAD+2C↑p
                                        ; ALLOCRESOURCE+68↑p ...

arg_0           = word ptr  6
arg_2           = byte ptr  8
arg_6           = word ptr  0Ch

                inc     bp              ; KERNEL_16
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKGLOBALHEAP
                or      ax, ax
                jz      short loc_6CE3
                or      ax, 200h
                xor     bx, bx
                push    ax
                mov     ax, offset SZERRGLOBALREALLOC ; "GlobalReAlloc: Invalid global heap"
                push    cs
                push    ax
                push    dx
                push    bx
                call    KERNELERROR
                jmp     short loc_6CE3
; ---------------------------------------------------------------------------
SZERRGLOBALREALLOC db 'GlobalReAlloc: Invalid global heap',0
                                        ; DATA XREF: GLOBALREALLOC+14↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6CE3:                               ; CODE XREF: GLOBALREALLOC+C↑j
                                        ; GLOBALREALLOC+1E↑j
                call    GENTER
                mov     dx, [bp+arg_6]
                mov     ax, [bp+arg_0]
                lea     bx, [bp+arg_2]
                call    GBTOP
                call    GREALLOC
                call    GLEAVE
                call    GMEMCHECK
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
GLOBALREALLOC   endp

;
; External Entry #17 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GLOBALFREE
GLOBALFREE      proc far                ; CODE XREF: MYFREE+3E↑p
                                        ; FREENRTABLE+2D↑p ...

arg_0           = word ptr  6

                inc     bp              ; KERNEL_17
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKGLOBALHEAP
                or      ax, ax
                jz      short loc_6D49
                or      ax, 200h
                xor     bx, bx
                push    ax
                mov     ax, offset SZERRGLOBALFREE ; "GlobalFree: Invalid global heap"
                push    cs
                push    ax
                push    dx
                push    bx
                call    KERNELERROR
                jmp     short loc_6D49
; ---------------------------------------------------------------------------
SZERRGLOBALFREE db 'GlobalFree: Invalid global heap',0
                                        ; DATA XREF: GLOBALFREE+14↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6D49:                               ; CODE XREF: GLOBALFREE+C↑j
                                        ; GLOBALFREE+1E↑j
                call    GENTER
                mov     dx, [bp+arg_0]
                call    GALIGN
                or      si, si
                jz      short loc_6D92
                cmp     ch, 0
                jz      short loc_6D92
                xor     bx, bx
                mov     ax, 2F0h
                push    ax
                mov     ax, offset SZERRGLOBALFREELOCKED ; "GlobalFree: freeing locked object"
                push    cs
                push    ax
                push    bx
                push    [bp+arg_0]
                call    KERNELERROR
                jmp     short loc_6D92
; ---------------------------------------------------------------------------
SZERRGLOBALFREELOCKED db 'GlobalFree: freeing locked object',0
                                        ; DATA XREF: GLOBALFREE+59↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6D92:                               ; CODE XREF: GLOBALFREE+4C↑j
                                        ; GLOBALFREE+51↑j ...
                mov     dx, [bp+arg_0]
                xor     cx, cx
                call    GFREE
                call    GLEAVE
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
GLOBALFREE      endp

;
; External Entry #26 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GLOBALFREEALL
GLOBALFREEALL   proc far                ; CODE XREF: DELMODULE+3C↑p
                                        ; DOSTerminateHook+41↑p

arg_0           = word ptr  6

                inc     bp              ; KERNEL_26
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKGLOBALHEAP
                or      ax, ax
                jz      short loc_6DEE
                or      ax, 200h
                xor     bx, bx
                push    ax
                mov     ax, offset SZERRGLOBALFREEALL ; "GlobalFreeAll: Invalid global heap"
                push    cs
                push    ax
                push    dx
                push    bx
                call    KERNELERROR
                jmp     short loc_6DEE
; ---------------------------------------------------------------------------
SZERRGLOBALFREEALL db 'GlobalFreeAll: Invalid global heap',0
                                        ; DATA XREF: GLOBALFREEALL+14↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6DEE:                               ; CODE XREF: GLOBALFREEALL+C↑j
                                        ; GLOBALFREEALL+1E↑j
                call    GENTER
                mov     dx, [bp+arg_0]
                or      dx, dx
                jnz     short loc_6E00
                les     si, cs:PCURRENTPDB
                mov     dx, es:[si]

loc_6E00:                               ; CODE XREF: GLOBALFREEALL+4C↑j
                mov     es, word ptr [di+6]
                mov     cx, [di+4]

loc_6E06:                               ; CODE XREF: GLOBALFREEALL+71↓j
                cmp     es:[di+1], dx
                jnz     short loc_6E17
                mov     ax, es
                inc     ax
                push    cx
                push    dx
                push    ax
                call    DEBUGFREESEGMENT
                pop     dx
                pop     cx

loc_6E17:                               ; CODE XREF: GLOBALFREEALL+60↑j
                mov     es, word ptr es:[di+8]
                loop    loc_6E06
                call    GFREEALL
                call    GLEAVE
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
GLOBALFREEALL   endp


; =============== S U B R O U T I N E =======================================


XHANDLE         proc near               ; CODE XREF: GLOBALHANDLE↓p
                                        ; LOCKSEGMENT↓p ...
                pop     dx
                mov     bx, sp
                mov     ax, ss:[bx+4]
                inc     ax
                jz      short loc_6E4B
                dec     ax

loc_6E3B:                               ; CODE XREF: XHANDLE+1D↓j
                push    ds
                push    di
                mov     ds, cs:PGLOBALHEAP
                xor     di, di
                inc     word ptr [di+18h]
                push    dx
                jmp     GHANDLE
; ---------------------------------------------------------------------------

loc_6E4B:                               ; CODE XREF: XHANDLE+8↑j
                mov     ax, ds
                jmp     short loc_6E3B
XHANDLE         endp ; sp-analysis failed

;
; External Entry #21 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GLOBALHANDLE
GLOBALHANDLE    proc far                ; CODE XREF: MYLOCK+8↑p
                                        ; ALLOCRESOURCE+6E↑p ...
                call    XHANDLE         ; KERNEL_21
                jmp     short loc_6E89
GLOBALHANDLE    endp

;
; External Entry #23 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public LOCKSEGMENT
LOCKSEGMENT     proc far                ; CODE XREF: ALLOCSEG+7A↑p
                                        ; INITTASK+5F↑p ...
                call    XHANDLE         ; KERNEL_23
                jz      short loc_6E89
                call    GLOCK
                jmp     short loc_6E89
LOCKSEGMENT     endp

;
; External Entry #24 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public UNLOCKSEGMENT
UNLOCKSEGMENT   proc far                ; CODE XREF: INITTASK+44↑p
                                        ; LOCALNOTIFYDEFAULT+8B↑p
                call    XHANDLE         ; KERNEL_24
                jz      short loc_6E89
                call    GUNLOCK
                jmp     short loc_6E89
UNLOCKSEGMENT   endp

;
; External Entry #20 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GLOBALSIZE
GLOBALSIZE      proc far                ; CODE XREF: LOCALNOTIFYDEFAULT+1E↑p
                                        ; LOCALNOTIFYDEFAULT+57↑p
                call    XHANDLE         ; KERNEL_20
                or      dx, dx
                jz      short loc_6E89
                mov     ax, es:[di+3]
                push    ax
                xor     dx, dx
                mov     cx, 4

loc_6E79:                               ; CODE XREF: GLOBALSIZE+15↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_6E79
                pop     cx
                jmp     short loc_6E89
GLOBALSIZE      endp

;
; External Entry #22 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GLOBALFLAGS
GLOBALFLAGS     proc far
                call    XHANDLE         ; KERNEL_22
                xchg    cl, ch
                mov     ax, cx

loc_6E89:                               ; CODE XREF: GLOBALHANDLE+3↑j
                                        ; LOCKSEGMENT+3↑j ...
                dec     word ptr [di+18h]
                pop     di
                pop     ds
                retf    2
GLOBALFLAGS     endp ; sp-analysis failed

;
; External Entry #18 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GLOBALLOCK
GLOBALLOCK      proc far                ; CODE XREF: LOADRESOURCE+70↑p
                                        ; LOCKRESOURCE+10↑p ...
                call    XHANDLE         ; KERNEL_18
                jz      short loc_6EDF
                cmp     ch, 0FFh
                jnz     short loc_6EDC
                push    bx
                push    cx
                push    dx
                xor     cx, cx
                mov     ax, 2C0h
                push    ax
                mov     ax, offset SZERRGLOBALLOCK ; "GlobalLock: Object usage count overflow"
                push    cs
                push    ax
                push    cx
                push    bx
                call    KERNELERROR
                jmp     short loc_6ED9
; ---------------------------------------------------------------------------
SZERRGLOBALLOCK db 'GlobalLock: Object usage count overflow',0
                                        ; DATA XREF: GLOBALLOCK+13↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6ED9:                               ; CODE XREF: GLOBALLOCK+1D↑j
                pop     dx
                pop     cx
                pop     bx

loc_6EDC:                               ; CODE XREF: GLOBALLOCK+8↑j
                call    GLOCK

loc_6EDF:                               ; CODE XREF: GLOBALLOCK+3↑j
                xor     ax, ax
                mov     cx, dx

loc_6EE3:                               ; CODE XREF: GLOBALUNLOCK+3↓j
                jmp     short loc_6E89
GLOBALLOCK      endp

;
; External Entry #19 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GLOBALUNLOCK
GLOBALUNLOCK    proc far                ; CODE XREF: MYFREE+32↑p
                                        ; LOADRESOURCE+80↑p ...
                call    XHANDLE         ; KERNEL_19
                jz      short loc_6EE3
                cmp     ch, 0
                jnz     short loc_6F33
                push    bx
                push    cx
                push    dx
                xor     cx, cx
                mov     ax, 2F0h
                push    ax
                mov     ax, offset SZERRGLOBALUNLOCK ; "GlobalUnlock: Object usage count underf"...
                push    cs
                push    ax
                push    cx
                push    bx
                call    KERNELERROR
                jmp     short loc_6F30
; ---------------------------------------------------------------------------
SZERRGLOBALUNLOCK db 'GlobalUnlock: Object usage count underflow',0
                                        ; DATA XREF: GLOBALUNLOCK+13↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6F30:                               ; CODE XREF: GLOBALUNLOCK+1D↑j
                pop     dx
                pop     cx
                pop     bx

loc_6F33:                               ; CODE XREF: GLOBALUNLOCK+8↑j
                call    GUNLOCK
                mov     ax, cx
                jmp     loc_6E89
GLOBALUNLOCK    endp

;
; External Entry #25 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public GLOBALCOMPACT
GLOBALCOMPACT   proc far                ; CODE XREF: ADDMODULE+40↑p
                                        ; FREEMODULE+A8↑p ...

arg_0           = byte ptr  6

                inc     bp              ; KERNEL_25
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                call    CHECKGLOBALHEAP
                or      ax, ax
                jz      short loc_6F7F
                or      ax, 200h
                xor     bx, bx
                push    ax
                mov     ax, offset SZERRGLOBALCOMPACT ; "GlobalCompact: Invalid global heap"
                push    cs
                push    ax
                push    dx
                push    bx
                call    KERNELERROR
                jmp     short loc_6F7F
; ---------------------------------------------------------------------------
SZERRGLOBALCOMPACT db 'GlobalCompact: Invalid global heap',0
                                        ; DATA XREF: GLOBALCOMPACT+14↑o
                db 24h
; ---------------------------------------------------------------------------

loc_6F7F:                               ; CODE XREF: GLOBALCOMPACT+C↑j
                                        ; GLOBALCOMPACT+1E↑j
                call    GENTER
                mov     ax, 0FFFFh
                lea     bx, [bp+arg_0]
                call    GBTOP
                clc
                call    HEND
                call    GAVAIL
                mov     cx, 4
                push    ax

loc_6F96:                               ; CODE XREF: GLOBALCOMPACT+5F↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_6F96
                pop     cx
                call    GLEAVE
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    4
GLOBALCOMPACT   endp


; =============== S U B R O U T I N E =======================================


GLOBALINFOPTR   proc near               ; CODE XREF: CHECKGLOBALHEAP+B↓p
                mov     dx, cs:PGLOBALHEAP
                xor     ax, ax
                retn
GLOBALINFOPTR   endp

;
; External Entry #28 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public GLOBALMASTERHANDLE
GLOBALMASTERHANDLE proc far
                mov     ax, cs:HGLOBALHEAP ; KERNEL_28
                mov     dx, cs:PGLOBALHEAP
                retf
GLOBALMASTERHANDLE endp

; ---------------------------------------------------------------------------
dword_6FBF      dd 0FBh                 ; DATA XREF: DEBUGINIT+2B↓r
                                        ; DEBUGDEFINESEGMENT+27↓r ...
aSegdebug       db 'SEGDEBUG',0         ; DATA XREF: DEBUGINIT+11↓o

; =============== S U B R O U T I N E =======================================


DEBUGINIT       proc near               ; CODE XREF: BOOTSTRAP+D0↓p
                push    si
                push    di
                push    es
                xor     ax, ax
                mov     es, ax
                assume es:cseg01
                mov     bx, es:HHANDLE
                mov     es, bx
                assume es:nothing
                mov     di, 100h
                mov     si, offset aSegdebug ; "SEGDEBUG"
                mov     cx, 9
                cld
                repe cmps byte ptr cs:[si], byte ptr es:[di]
                jnz     short loc_6FFF
                mov     word ptr cs:dword_6FBF+2, bx
                mov     ax, cs:PGLOBALHEAP
                push    ax
                mov     ax, 3
                push    ax
                call    cs:dword_6FBF
                add     sp, 4

loc_6FFF:                               ; CODE XREF: DEBUGINIT+1B↑j
                pop     es
                pop     di
                pop     si
                retn
DEBUGINIT       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DEBUGDEFINESEGMENT proc near            ; CODE XREF: SEGLOAD+293↑p

arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = dword ptr  0Ch

                push    bp
                mov     bp, sp
                push    es
                cmp     word ptr cs:dword_6FBF+2, 0
                jz      short loc_7032
                test    [bp+arg_2], 0FFFCh
                jnz     short loc_7032
                push    [bp+arg_0]
                push    [bp+arg_2]
                push    [bp+arg_4]
                push    [bp+arg_6]
                les     ax, [bp+arg_8]
                push    es
                push    ax
                xor     ax, ax
                push    ax
                call    cs:dword_6FBF
                add     sp, 0Eh

loc_7032:                               ; CODE XREF: DEBUGDEFINESEGMENT+A↑j
                                        ; DEBUGDEFINESEGMENT+11↑j
                pop     es
                mov     sp, bp
                pop     bp
                retn    0Ch
DEBUGDEFINESEGMENT endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DEBUGMOVEDSEGMENT proc near             ; CODE XREF: GNOTIFY+15↑p
                                        ; GNOTIFY+68↑p

arg_0           = word ptr  4
arg_2           = word ptr  6

                push    bp
                mov     bp, sp
                cmp     word ptr cs:dword_6FBF+2, 0
                jz      short loc_7056
                push    [bp+arg_0]
                push    [bp+arg_2]
                mov     ax, 1
                push    ax
                call    cs:dword_6FBF
                add     sp, 6

loc_7056:                               ; CODE XREF: DEBUGMOVEDSEGMENT+9↑j
                mov     sp, bp
                pop     bp
                retn    4
DEBUGMOVEDSEGMENT endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

DEBUGFREESEGMENT proc near              ; CODE XREF: MYFREE:loc_C0C↑p
                                        ; GLOBALFREEALL+68↑p

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    es
                cmp     word ptr cs:dword_6FBF+2, 0
                jz      short loc_7077
                push    [bp+arg_0]
                mov     ax, 2
                push    ax
                call    cs:dword_6FBF
                add     sp, 4

loc_7077:                               ; CODE XREF: DEBUGFREESEGMENT+A↑j
                pop     es
                mov     sp, bp
                pop     bp
                retn    2
DEBUGFREESEGMENT endp


; =============== S U B R O U T I N E =======================================


KERNELDBGMSG    proc near
                or      ax, 60Ah        ; ???
                push    ds
                push    di
                push    si
                push    dx
                push    cx
                push    bx
                push    ax
                push    bp
                mov     bp, sp
                push    cs
                pop     es
                assume es:cseg01
                mov     dx, [bp+12h]
                mov     di, dx
                mov     cx, 0FFFFh
                xor     al, al
                cld
                repne scasb
                neg     cx
                dec     cx
                dec     cx
                mov     [bp+12h], di
                push    cs
                pop     ds
                assume ds:cseg01
                mov     bx, 3
                mov     ah, 40h ; '@'
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                mov     ah, 40h ; '@'
                mov     dx, 707Eh
                mov     cx, 2
                int     21h             ; DOS - 2+ - WRITE TO FILE WITH HANDLE
                                        ; BX = file handle, CX = number of bytes to write, DS:DX -> buffer
                mov     sp, bp
                pop     bp
                pop     ax
                pop     bx
                pop     cx
                pop     dx
                pop     si
                pop     di
                pop     ds
                assume ds:nothing
                pop     es
                assume es:nothing
                retn
KERNELDBGMSG    endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

CHECKLOCALHEAP  proc near               ; CODE XREF: LOCALALLOC+7↑p
                                        ; LOCALREALLOC+7↑p ...

var_1A          = byte ptr -1Ah
var_18          = word ptr -18h
var_16          = word ptr -16h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                push    bp
                mov     bp, sp
                sub     sp, 1Ah
                mov     [bp+var_2], 0
                mov     ax, ds:6
                mov     [bp+var_12], ax
                or      ax, ax
                jnz     short loc_70DA

loc_70D5:                               ; CODE XREF: CHECKLOCALHEAP+20↓j
                sub     ax, ax
                jmp     loc_72A9
; ---------------------------------------------------------------------------

loc_70DA:                               ; CODE XREF: CHECKLOCALHEAP+13↑j
                mov     bx, [bp+var_12]
                cmp     word ptr [bx], 0
                jz      short loc_70D5
                mov     ax, [bx+4]
                mov     [bp+var_8], ax
                mov     ax, [bx+6]
                mov     [bp+var_4], ax
                mov     bx, ax
                test    byte ptr [bx], 1
                jnz     short loc_70F9
                or      byte ptr [bp+var_2], 1

loc_70F9:                               ; CODE XREF: CHECKLOCALHEAP+33↑j
                                        ; CHECKLOCALHEAP+53↓j
                mov     ax, [bp+var_8]
                dec     [bp+var_8]
                or      ax, ax
                jz      short loc_711E
                mov     bx, [bp+var_4]
                mov     ax, bx
                cmp     [bx+2], ax
                jbe     short loc_7115
                mov     ax, [bx+2]
                mov     [bp+var_4], ax
                jmp     short loc_70F9
; ---------------------------------------------------------------------------

loc_7115:                               ; CODE XREF: CHECKLOCALHEAP+4B↑j
                mov     bx, [bp+var_4]
                mov     ax, [bx+2]
                mov     [bp+var_4], ax

loc_711E:                               ; CODE XREF: CHECKLOCALHEAP+41↑j
                cmp     [bp+var_8], 0
                jnz     short loc_712F
                mov     bx, [bp+var_12]
                mov     ax, [bp+var_4]
                cmp     [bx+8], ax
                jz      short loc_7133

loc_712F:                               ; CODE XREF: CHECKLOCALHEAP+62↑j
                or      byte ptr [bp+var_2], 1

loc_7133:                               ; CODE XREF: CHECKLOCALHEAP+6D↑j
                mov     bx, [bp+var_12]
                mov     ax, [bx+4]
                mov     [bp+var_8], ax
                mov     ax, [bx+8]
                mov     [bp+var_4], ax
                mov     bx, ax
                test    byte ptr [bx], 1
                jnz     short loc_714D
                or      byte ptr [bp+var_2], 2

loc_714D:                               ; CODE XREF: CHECKLOCALHEAP+87↑j
                                        ; CHECKLOCALHEAP+A8↓j
                mov     ax, [bp+var_8]
                dec     [bp+var_8]
                or      ax, ax
                jz      short loc_7170
                mov     bx, [bp+var_4]
                mov     ax, [bx]
                and     al, 0FCh
                mov     [bp+var_C], ax
                cmp     bx, ax
                jbe     short loc_716A
                mov     [bp+var_4], ax
                jmp     short loc_714D
; ---------------------------------------------------------------------------

loc_716A:                               ; CODE XREF: CHECKLOCALHEAP+A3↑j
                mov     ax, [bp+var_C]
                mov     [bp+var_4], ax

loc_7170:                               ; CODE XREF: CHECKLOCALHEAP+95↑j
                cmp     [bp+var_8], 0
                jnz     short loc_7181
                mov     bx, [bp+var_12]
                mov     ax, [bp+var_4]
                cmp     [bx+6], ax
                jz      short loc_7185

loc_7181:                               ; CODE XREF: CHECKLOCALHEAP+B4↑j
                or      byte ptr [bp+var_2], 2

loc_7185:                               ; CODE XREF: CHECKLOCALHEAP+BF↑j
                mov     bx, [bp+var_12]
                mov     ax, [bx+4]
                mov     [bp+var_8], ax
                mov     ax, [bx+6]
                mov     [bp+var_4], ax
                mov     [bp+var_E], 0
                jmp     short loc_71E2
; ---------------------------------------------------------------------------

loc_719B:                               ; CODE XREF: CHECKLOCALHEAP+12A↓j
                mov     bx, [bp+var_4]
                mov     al, [bx]
                mov     [bp+var_1A], al
                test    [bp+var_1A], 1
                jz      short loc_71D9
                test    [bp+var_1A], 2
                jz      short loc_71D9
                mov     ax, [bx+4]
                mov     [bp+var_A], ax
                mov     bx, ax
                cmp     word ptr [bx+2], 0FFFFh
                jnz     short loc_71C3
                or      byte ptr [bp+var_2], 4
                jmp     short loc_71D9
; ---------------------------------------------------------------------------

loc_71C3:                               ; CODE XREF: CHECKLOCALHEAP+FB↑j
                mov     ax, [bp+var_4]
                add     ax, 6
                mov     bx, [bp+var_A]
                cmp     ax, [bx]
                jz      short loc_71D6
                or      byte ptr [bp+var_2], 8
                jmp     short loc_71D9
; ---------------------------------------------------------------------------

loc_71D6:                               ; CODE XREF: CHECKLOCALHEAP+10E↑j
                inc     [bp+var_E]

loc_71D9:                               ; CODE XREF: CHECKLOCALHEAP+E7↑j
                                        ; CHECKLOCALHEAP+ED↑j ...
                mov     bx, [bp+var_4]
                mov     ax, [bx+2]
                mov     [bp+var_4], ax

loc_71E2:                               ; CODE XREF: CHECKLOCALHEAP+D9↑j
                mov     ax, [bp+var_8]
                dec     [bp+var_8]
                or      ax, ax
                jnz     short loc_719B
                mov     bx, [bp+var_12]
                mov     ax, [bx+0Eh]
                mov     [bp+var_10], ax
                mov     [bp+var_16], 0
                mov     [bp+var_18], 0
                mov     [bp+var_6], 0
                mov     [bp+var_14], 0
                jmp     short loc_7255
; ---------------------------------------------------------------------------

loc_720B:                               ; CODE XREF: CHECKLOCALHEAP+199↓j
                mov     ax, [bp+var_10]
                inc     ax
                inc     ax
                mov     [bp+var_A], ax
                mov     bx, [bp+var_10]
                mov     ax, [bx]
                mov     [bp+var_8], ax
                add     [bp+var_16], ax
                jmp     short loc_7243
; ---------------------------------------------------------------------------

loc_7220:                               ; CODE XREF: CHECKLOCALHEAP+18B↓j
                mov     bx, [bp+var_A]
                cmp     word ptr [bx+2], 0FFFFh
                jnz     short loc_722E
                inc     [bp+var_14]
                jmp     short loc_723F
; ---------------------------------------------------------------------------

loc_722E:                               ; CODE XREF: CHECKLOCALHEAP+167↑j
                mov     bx, [bp+var_A]
                test    byte ptr [bx+2], 40h
                jz      short loc_723C
                inc     [bp+var_18]
                jmp     short loc_723F
; ---------------------------------------------------------------------------

loc_723C:                               ; CODE XREF: CHECKLOCALHEAP+175↑j
                inc     [bp+var_6]

loc_723F:                               ; CODE XREF: CHECKLOCALHEAP+16C↑j
                                        ; CHECKLOCALHEAP+17A↑j
                add     [bp+var_A], 4

loc_7243:                               ; CODE XREF: CHECKLOCALHEAP+15E↑j
                mov     ax, [bp+var_8]
                dec     [bp+var_8]
                or      ax, ax
                jnz     short loc_7220
                mov     bx, [bp+var_A]
                mov     ax, [bx]
                mov     [bp+var_10], ax

loc_7255:                               ; CODE XREF: CHECKLOCALHEAP+149↑j
                cmp     [bp+var_10], 0
                jnz     short loc_720B
                mov     ax, [bp+var_6]
                cmp     [bp+var_E], ax
                jz      short loc_7267
                or      byte ptr [bp+var_2], 10h

loc_7267:                               ; CODE XREF: CHECKLOCALHEAP+1A1↑j
                mov     ax, [bp+var_14]
                add     ax, [bp+var_6]
                add     ax, [bp+var_18]
                cmp     ax, [bp+var_16]
                jz      short loc_7279
                or      byte ptr [bp+var_2], 20h

loc_7279:                               ; CODE XREF: CHECKLOCALHEAP+1B3↑j
                mov     bx, [bp+var_12]
                mov     ax, [bx+10h]
                mov     [bp+var_A], ax
                mov     [bp+var_8], 0
                jmp     short loc_7294
; ---------------------------------------------------------------------------

loc_7289:                               ; CODE XREF: CHECKLOCALHEAP+1D8↓j
                inc     [bp+var_8]
                mov     bx, [bp+var_A]
                mov     ax, [bx]
                mov     [bp+var_A], ax

loc_7294:                               ; CODE XREF: CHECKLOCALHEAP+1C7↑j
                cmp     [bp+var_A], 0
                jnz     short loc_7289
                mov     ax, [bp+var_8]
                cmp     [bp+var_14], ax
                jz      short loc_72A6
                or      byte ptr [bp+var_2], 40h

loc_72A6:                               ; CODE XREF: CHECKLOCALHEAP+1E0↑j
                mov     ax, [bp+var_2]

loc_72A9:                               ; CODE XREF: CHECKLOCALHEAP+17↑j
                mov     sp, bp
                pop     bp
                retn
CHECKLOCALHEAP  endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

CHECKGLOBALHEAP proc near               ; CODE XREF: GLOBALALLOC+7↑p
                                        ; GLOBALREALLOC+7↑p ...

var_2A          = word ptr -2Ah
var_28          = word ptr -28h
var_26          = word ptr -26h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = word ptr -1Ch
var_1A          = word ptr -1Ah
var_18          = dword ptr -18h
var_14          = word ptr -14h
var_12          = word ptr -12h
var_10          = word ptr -10h
var_E           = word ptr -0Eh
var_C           = word ptr -0Ch
var_A           = word ptr -0Ah
var_8           = word ptr -8
var_6           = dword ptr -6
var_2           = word ptr -2

                push    bp
                mov     bp, sp
                sub     sp, 2Ah
                mov     [bp+var_2], 0
                call    GLOBALINFOPTR
                mov     word ptr [bp+var_24], ax
                mov     word ptr [bp+var_24+2], dx
                or      ax, dx
                jnz     short loc_72CB

loc_72C5:                               ; CODE XREF: CHECKGLOBALHEAP+25↓j
                sub     ax, ax
                cwd
                jmp     loc_75EE
; ---------------------------------------------------------------------------

loc_72CB:                               ; CODE XREF: CHECKGLOBALHEAP+16↑j
                les     bx, [bp+var_24]
                cmp     word ptr es:[bx], 0
                jz      short loc_72C5
                mov     ax, bx
                mov     dx, es
                sub     ax, ax
                mov     [bp+var_12], ax
                mov     [bp+var_10], dx
                mov     ax, es:[bx+4]
                mov     [bp+var_14], ax
                mov     [bp+var_1A], 0FFFFh
                mov     [bp+var_E], 0
                mov     ax, es:[bx+6]

loc_72F5:                               ; CODE XREF: CHECKGLOBALHEAP+134↓j
                mov     [bp+var_8], ax
                mov     ax, [bp+var_14]
                dec     [bp+var_14]
                or      ax, ax
                jz      short loc_7320
                les     bx, [bp+var_24]
                mov     ax, [bp+var_8]
                cmp     es:[bx+6], ax
                ja      short loc_7314
                cmp     es:[bx+8], ax
                jnb     short loc_7386

loc_7314:                               ; CODE XREF: CHECKGLOBALHEAP+5F↑j
                cmp     [bp+var_E], 0
                jnz     short loc_7320

loc_731A:                               ; CODE XREF: CHECKGLOBALHEAP:loc_7412↓j
                mov     ax, [bp+var_1A]
                mov     [bp+var_E], ax

loc_7320:                               ; CODE XREF: CHECKGLOBALHEAP+53↑j
                                        ; CHECKGLOBALHEAP+6B↑j ...
                cmp     [bp+var_E], 0
                jnz     short loc_7338
                cmp     [bp+var_14], 0
                jnz     short loc_7338
                les     bx, [bp+var_24]
                mov     ax, [bp+var_8]
                cmp     es:[bx+8], ax
                jz      short loc_733C

loc_7338:                               ; CODE XREF: CHECKGLOBALHEAP+77↑j
                                        ; CHECKGLOBALHEAP+7D↑j
                or      byte ptr [bp+var_2], 1

loc_733C:                               ; CODE XREF: CHECKGLOBALHEAP+89↑j
                les     bx, [bp+var_24]
                mov     ax, es:[bx+4]
                mov     [bp+var_14], ax
                mov     [bp+var_1A], 0FFFFh
                mov     ax, es:[bx+8]
                mov     [bp+var_8], ax

loc_7352:                               ; CODE XREF: CHECKGLOBALHEAP+18A↓j
                mov     ax, [bp+var_14]
                dec     [bp+var_14]
                or      ax, ax
                jnz     short loc_735F
                jmp     loc_743A
; ---------------------------------------------------------------------------

loc_735F:                               ; CODE XREF: CHECKGLOBALHEAP+AD↑j
                les     bx, [bp+var_24]
                mov     ax, [bp+var_8]
                cmp     es:[bx+6], ax
                ja      short loc_7374
                cmp     es:[bx+8], ax
                jb      short loc_7374
                jmp     loc_7415
; ---------------------------------------------------------------------------

loc_7374:                               ; CODE XREF: CHECKGLOBALHEAP+BC↑j
                                        ; CHECKGLOBALHEAP+C2↑j
                cmp     [bp+var_E], 0
                jz      short loc_737D
                jmp     loc_743A
; ---------------------------------------------------------------------------

loc_737D:                               ; CODE XREF: CHECKGLOBALHEAP+CB↑j
                mov     ax, [bp+var_1A]
                mov     [bp+var_E], ax
                jmp     loc_743A
; ---------------------------------------------------------------------------

loc_7386:                               ; CODE XREF: CHECKGLOBALHEAP+65↑j
                mov     dx, [bp+var_8]
                sub     ax, ax
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                les     bx, [bp+var_6]
                mov     ax, dx
                cmp     es:[bx+8], ax
                jbe     short loc_73E4
                cmp     [bp+var_E], 0
                jnz     short loc_73D4
                cmp     byte ptr es:[bx], 4Dh ; 'M'
                jz      short loc_73AD
                mov     ax, [bp+var_1A]
                jmp     short loc_73D1
; ---------------------------------------------------------------------------

loc_73AD:                               ; CODE XREF: CHECKGLOBALHEAP+F9↑j
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+3], 0
                jnz     short loc_73BD
                cmp     [bp+var_1A], 0FFFFh
                jz      short loc_73D4

loc_73BD:                               ; CODE XREF: CHECKGLOBALHEAP+108↑j
                les     bx, [bp+var_6]
                mov     ax, es:[bx+3]
                add     ax, [bp+var_8]
                inc     ax
                cmp     ax, es:[bx+8]
                jz      short loc_73D4
                mov     ax, [bp+var_8]

loc_73D1:                               ; CODE XREF: CHECKGLOBALHEAP+FE↑j
                mov     [bp+var_E], ax

loc_73D4:                               ; CODE XREF: CHECKGLOBALHEAP+F3↑j
                                        ; CHECKGLOBALHEAP+10E↑j ...
                mov     ax, [bp+var_8]
                mov     [bp+var_1A], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8]
                jmp     loc_72F5
; ---------------------------------------------------------------------------

loc_73E4:                               ; CODE XREF: CHECKGLOBALHEAP+ED↑j
                mov     ax, [bp+var_8]
                mov     [bp+var_1A], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8]
                mov     [bp+var_8], ax
                mov     dx, ax
                sub     ax, ax
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                cmp     [bp+var_E], ax
                jz      short loc_7406
                jmp     loc_7320
; ---------------------------------------------------------------------------

loc_7406:                               ; CODE XREF: CHECKGLOBALHEAP+154↑j
                les     bx, [bp+var_6]
                cmp     byte ptr es:[bx], 5Ah ; 'Z'
                jnz     short loc_7412
                jmp     loc_7320
; ---------------------------------------------------------------------------

loc_7412:                               ; CODE XREF: CHECKGLOBALHEAP+160↑j
                jmp     loc_731A
; ---------------------------------------------------------------------------

loc_7415:                               ; CODE XREF: CHECKGLOBALHEAP+C4↑j
                mov     dx, [bp+var_8]
                sub     ax, ax
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                mov     ax, dx
                mov     [bp+var_1A], ax
                les     bx, [bp+var_6]
                mov     ax, es:[bx+6]
                mov     [bp+var_8], ax
                mov     ax, [bp+var_1A]
                cmp     [bp+var_8], ax
                jnb     short loc_743A
                jmp     loc_7352
; ---------------------------------------------------------------------------

loc_743A:                               ; CODE XREF: CHECKGLOBALHEAP+AF↑j
                                        ; CHECKGLOBALHEAP+CD↑j ...
                cmp     [bp+var_14], 0
                jnz     short loc_744C
                les     bx, [bp+var_24]
                mov     ax, [bp+var_8]
                cmp     es:[bx+6], ax
                jz      short loc_7450

loc_744C:                               ; CODE XREF: CHECKGLOBALHEAP+191↑j
                or      byte ptr [bp+var_2], 2

loc_7450:                               ; CODE XREF: CHECKGLOBALHEAP+19D↑j
                cmp     [bp+var_2], 0
                jz      short loc_7459
                jmp     loc_75E6
; ---------------------------------------------------------------------------

loc_7459:                               ; CODE XREF: CHECKGLOBALHEAP+1A7↑j
                cmp     [bp+var_E], 0
                jz      short loc_7462
                jmp     loc_75E6
; ---------------------------------------------------------------------------

loc_7462:                               ; CODE XREF: CHECKGLOBALHEAP+1B0↑j
                les     bx, [bp+var_24]
                mov     ax, es:[bx+4]
                mov     [bp+var_14], ax
                mov     ax, es:[bx+6]
                mov     [bp+var_8], ax
                mov     [bp+var_1C], 0
                jmp     short loc_74EB
; ---------------------------------------------------------------------------

loc_747A:                               ; CODE XREF: CHECKGLOBALHEAP+246↓j
                mov     dx, [bp+var_8]
                sub     ax, ax
                mov     word ptr [bp+var_6], ax
                mov     word ptr [bp+var_6+2], dx
                les     bx, [bp+var_6]
                cmp     es:[bx+1], ax
                jz      short loc_74E1
                cmp     es:[bx+0Ah], ax
                jz      short loc_74E1
                mov     ax, es:[bx+0Ah]
                sub     dx, dx
                or      ax, [bp+var_12]
                mov     dx, [bp+var_10]
                mov     word ptr [bp+var_18], ax
                mov     word ptr [bp+var_18+2], dx
                les     bx, [bp+var_18]
                cmp     word ptr es:[bx+2], 0FFFFh
                jnz     short loc_74C2
                or      byte ptr [bp+var_2], 4

loc_74B4:                               ; CODE XREF: CHECKGLOBALHEAP+22F↓j
                cmp     [bp+var_E], 0
                jnz     short loc_74E1
                mov     ax, [bp+var_8]
                mov     [bp+var_E], ax
                jmp     short loc_74E1
; ---------------------------------------------------------------------------

loc_74C2:                               ; CODE XREF: CHECKGLOBALHEAP+201↑j
                les     bx, [bp+var_6]
                cmp     word ptr es:[bx+0Ah], 0FFFFh
                jz      short loc_74D8
                les     bx, [bp+var_18]
                mov     ax, [bp+var_8]
                inc     ax
                cmp     es:[bx], ax
                jz      short loc_74DE

loc_74D8:                               ; CODE XREF: CHECKGLOBALHEAP+21D↑j
                or      byte ptr [bp+var_2], 8
                jmp     short loc_74B4
; ---------------------------------------------------------------------------

loc_74DE:                               ; CODE XREF: CHECKGLOBALHEAP+229↑j
                inc     [bp+var_1C]

loc_74E1:                               ; CODE XREF: CHECKGLOBALHEAP+1DF↑j
                                        ; CHECKGLOBALHEAP+1E5↑j ...
                les     bx, [bp+var_6]
                mov     ax, es:[bx+8]
                mov     [bp+var_8], ax

loc_74EB:                               ; CODE XREF: CHECKGLOBALHEAP+1CB↑j
                mov     ax, [bp+var_14]
                dec     [bp+var_14]
                or      ax, ax
                jnz     short loc_747A
                mov     [bp+var_28], 0
                mov     [bp+var_2A], 0
                mov     [bp+var_A], 0
                mov     [bp+var_26], 0
                les     bx, [bp+var_24]
                mov     ax, es:[bx+0Eh]
                mov     [bp+var_8], ax
                mov     ax, [bp+var_1C]
                mov     [bp+var_C], ax
                jmp     short loc_7581
; ---------------------------------------------------------------------------

loc_751B:                               ; CODE XREF: CHECKGLOBALHEAP+2DC↓j
                cmp     [bp+var_8], 0
                jz      short loc_758B
                mov     ax, [bp+var_8]
                sub     dx, dx
                or      ax, [bp+var_12]
                mov     dx, [bp+var_10]
                mov     word ptr [bp+var_20], ax
                mov     word ptr [bp+var_20+2], dx
                add     ax, 2
                mov     word ptr [bp+var_18], ax
                mov     word ptr [bp+var_18+2], dx
                les     bx, [bp+var_20]
                mov     ax, es:[bx]
                mov     [bp+var_14], ax
                add     [bp+var_28], ax
                jmp     short loc_756E
; ---------------------------------------------------------------------------

loc_7549:                               ; CODE XREF: CHECKGLOBALHEAP+2C9↓j
                les     bx, [bp+var_18]
                cmp     word ptr es:[bx+2], 0FFFFh
                jnz     short loc_7558
                inc     [bp+var_26]
                jmp     short loc_756A
; ---------------------------------------------------------------------------

loc_7558:                               ; CODE XREF: CHECKGLOBALHEAP+2A4↑j
                les     bx, [bp+var_18]
                test    byte ptr es:[bx+2], 40h
                jz      short loc_7567
                inc     [bp+var_2A]
                jmp     short loc_756A
; ---------------------------------------------------------------------------

loc_7567:                               ; CODE XREF: CHECKGLOBALHEAP+2B3↑j
                inc     [bp+var_A]

loc_756A:                               ; CODE XREF: CHECKGLOBALHEAP+2A9↑j
                                        ; CHECKGLOBALHEAP+2B8↑j
                add     word ptr [bp+var_18], 4

loc_756E:                               ; CODE XREF: CHECKGLOBALHEAP+29A↑j
                mov     ax, [bp+var_14]
                dec     [bp+var_14]
                or      ax, ax
                jnz     short loc_7549
                les     bx, [bp+var_18]
                mov     ax, es:[bx]
                mov     [bp+var_8], ax

loc_7581:                               ; CODE XREF: CHECKGLOBALHEAP+26C↑j
                mov     ax, [bp+var_C]
                dec     [bp+var_C]
                or      ax, ax
                jnz     short loc_751B

loc_758B:                               ; CODE XREF: CHECKGLOBALHEAP+272↑j
                mov     ax, [bp+var_A]
                cmp     [bp+var_1C], ax
                jz      short loc_7597
                or      byte ptr [bp+var_2], 10h

loc_7597:                               ; CODE XREF: CHECKGLOBALHEAP+2E4↑j
                mov     ax, [bp+var_26]
                add     ax, [bp+var_A]
                add     ax, [bp+var_2A]
                cmp     ax, [bp+var_28]
                jz      short loc_75A9
                or      byte ptr [bp+var_2], 20h

loc_75A9:                               ; CODE XREF: CHECKGLOBALHEAP+2F6↑j
                mov     ax, [bp+var_26]
                mov     [bp+var_14], ax
                les     bx, [bp+var_24]
                mov     ax, es:[bx+10h]
                jmp     short loc_75CF
; ---------------------------------------------------------------------------

loc_75B8:                               ; CODE XREF: CHECKGLOBALHEAP+32D↓j
                mov     ax, [bp+var_8]
                sub     dx, dx
                or      ax, [bp+var_12]
                mov     dx, [bp+var_10]
                mov     word ptr [bp+var_18], ax
                mov     word ptr [bp+var_18+2], dx
                les     bx, [bp+var_18]
                mov     ax, es:[bx]

loc_75CF:                               ; CODE XREF: CHECKGLOBALHEAP+309↑j
                mov     [bp+var_8], ax
                mov     ax, [bp+var_14]
                dec     [bp+var_14]
                or      ax, ax
                jnz     short loc_75B8
                cmp     [bp+var_8], 0
                jz      short loc_75E6
                or      byte ptr [bp+var_2], 40h

loc_75E6:                               ; CODE XREF: CHECKGLOBALHEAP+1A9↑j
                                        ; CHECKGLOBALHEAP+1B2↑j ...
                mov     dx, [bp+var_E]
                sub     ax, ax
                mov     ax, [bp+var_2]

loc_75EE:                               ; CODE XREF: CHECKGLOBALHEAP+1B↑j
                mov     sp, bp
                pop     bp
                retn
CHECKGLOBALHEAP endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

KERNELERROR     proc near               ; CODE XREF: ENTPROCADDRESS+52↑p
                                        ; FINDORDINAL+AC↑p ...

var_20          = word ptr -20h
var_1E          = byte ptr -1Eh
var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = byte ptr -6
var_4           = dword ptr -4
arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = word ptr  8
arg_6           = word ptr  0Ah
arg_8           = word ptr  0Ch

                push    bp
                mov     bp, sp
                sub     sp, 20h
                mov     ax, [bp+arg_4]
                or      ax, [bp+arg_6]
                jz      short loc_761B
                mov     ax, 3
                push    ax
                push    [bp+arg_6]
                push    [bp+arg_4]
                push    [bp+arg_6]
                push    [bp+arg_4]
                nop
                push    cs
                call    near ptr LSTRLEN
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE

loc_761B:                               ; CODE XREF: KERNELERROR+C↑j
                mov     ax, [bp+arg_0]
                or      ax, [bp+arg_2]
                jnz     short loc_7626
                jmp     loc_778D
; ---------------------------------------------------------------------------

loc_7626:                               ; CODE XREF: KERNELERROR+2F↑j
                mov     ax, [bp+arg_2]
                mov     [bp+var_E], ax
                or      ax, ax
                jnz     short loc_7633
                jmp     loc_7719
; ---------------------------------------------------------------------------

loc_7633:                               ; CODE XREF: KERNELERROR+3C↑j
                mov     dx, ax
                sub     ax, ax
                mov     word ptr [bp+var_C], ax
                mov     word ptr [bp+var_C+2], dx
                les     bx, [bp+var_C]
                cmp     word ptr es:[bx], 454Eh
                jz      short loc_764A
                jmp     loc_76DB
; ---------------------------------------------------------------------------

loc_764A:                               ; CODE XREF: KERNELERROR+53↑j
                mov     ax, es:[bx+26h]
                sub     dx, dx
                mov     bx, [bp+var_E]
                sub     cx, cx
                mov     dx, bx
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                les     bx, [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     al, es:[bx]
                sub     ah, ah
                mov     [bp+var_8], ax
                or      ax, ax
                jz      short loc_7695
                mov     ax, 3
                push    ax
                push    dx
                push    word ptr [bp+var_4]
                push    [bp+var_8]
                nop
                push    cs
                call    near ptr _LWRITE
                mov     ax, 3
                push    ax
                mov     ax, 9
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 2
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE

loc_7695:                               ; CODE XREF: KERNELERROR+7B↑j
                cmp     [bp+arg_0], 0
                jnz     short loc_76D7
                les     bx, [bp+var_C]
                mov     ax, es:[bx+0Ah]
                mov     [bp+var_20], ax
                or      ax, ax
                jz      short loc_76B0
                sub     dx, dx
                or      [bp+arg_0], ax
                jmp     short loc_76D7
; ---------------------------------------------------------------------------

loc_76B0:                               ; CODE XREF: KERNELERROR+B5↑j
                call    GETEXEHEAD
                sub     dx, dx
                mov     dx, ax
                sub     ax, ax
                mov     word ptr [bp+var_C], ax
                mov     word ptr [bp+var_C+2], dx
                les     bx, [bp+var_C]
                mov     ax, es:[bx+0Ah]
                mov     [bp+var_20], ax
                mov     dx, [bp+var_E]
                sub     ax, ax
                mov     ax, [bp+var_20]
                mov     [bp+arg_0], ax
                mov     [bp+arg_2], dx

loc_76D7:                               ; CODE XREF: KERNELERROR+A7↑j
                                        ; KERNELERROR+BC↑j
                add     [bp+arg_0], 8

loc_76DB:                               ; CODE XREF: KERNELERROR+55↑j
                mov     ax, [bp+arg_0]
                mov     dx, [bp+arg_2]
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                mov     [bp+var_8], 0
                jmp     short loc_76F1
; ---------------------------------------------------------------------------

loc_76EE:                               ; CODE XREF: KERNELERROR+10D↓j
                inc     [bp+var_8]

loc_76F1:                               ; CODE XREF: KERNELERROR+FA↑j
                les     bx, [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     al, es:[bx]
                mov     [bp+var_6], al
                cmp     al, 20h ; ' '
                jge     short loc_76EE
                cmp     [bp+var_8], 0
                jz      short loc_7719
                mov     ax, 3
                push    ax
                push    [bp+arg_2]
                push    [bp+arg_0]
                push    [bp+var_8]
                nop
                push    cs
                call    near ptr _LWRITE

loc_7719:                               ; CODE XREF: KERNELERROR+3E↑j
                                        ; KERNELERROR+113↑j
                lea     ax, [bp+var_1E]
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], ss
                les     bx, [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     byte ptr es:[bx], 20h ; ' '
                push    es
                push    word ptr [bp+var_4]
                push    [bp+arg_2]
                call    HTOA
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                les     bx, [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     byte ptr es:[bx], 3Ah ; ':'
                push    dx
                push    word ptr [bp+var_4]
                push    [bp+arg_0]
                call    HTOA
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                les     bx, [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     byte ptr es:[bx], 0Dh
                mov     bx, word ptr [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     byte ptr es:[bx], 0Ah
                mov     bx, word ptr [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     byte ptr es:[bx], 0
                mov     ax, 3
                push    ax
                lea     ax, [bp+var_1E]
                push    ss
                push    ax
                lea     ax, [bp+var_1E]
                push    ss
                push    ax
                nop
                push    cs
                call    near ptr LSTRLEN
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE

loc_778D:                               ; CODE XREF: KERNELERROR+31↑j
                push    [bp+arg_8]
                nop
                push    cs
                call    near ptr FATALEXIT
                mov     sp, bp
                pop     bp
                retn    0Ah
KERNELERROR     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FINDSEGSYMS     proc near               ; CODE XREF: STACKWALK+83↓p

var_28          = word ptr -28h
var_26          = byte ptr -26h
var_24          = byte ptr -24h
var_23          = byte ptr -23h
var_22          = word ptr -22h
var_20          = word ptr -20h
var_1E          = dword ptr -1Eh
var_1A          = word ptr -1Ah
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = byte ptr -10h
var_6           = word ptr -6
var_4           = word ptr -4
var_1           = byte ptr -1
arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 28h
                push    si
                les     bx, [bp+arg_6]
                cmp     word ptr es:[bx+88h], 0FFFFh
                jz      short loc_77C1
                push    word ptr es:[bx+88h]
                nop
                push    cs
                call    near ptr _LCLOSE
                les     bx, [bp+arg_6]
                mov     word ptr es:[bx+88h], 0FFFFh

loc_77C1:                               ; CODE XREF: FINDSEGSYMS+10↑j
                call    GETEXEHEAD

loc_77C4:                               ; CODE XREF: FINDSEGSYMS+1AC↓j
                mov     [bp+var_28], ax
                or      ax, ax
                jnz     short loc_77CE
                jmp     loc_7A94
; ---------------------------------------------------------------------------

loc_77CE:                               ; CODE XREF: FINDSEGSYMS+2E↑j
                mov     dx, ax
                sub     ax, ax
                mov     word ptr [bp+var_1E], ax
                mov     word ptr [bp+var_1E+2], dx
                les     bx, [bp+var_1E]
                mov     ax, es:[bx+22h]
                sub     dx, dx
                mov     bx, [bp+var_28]
                sub     cx, cx
                mov     dx, bx
                mov     word ptr [bp+var_18], ax
                mov     word ptr [bp+var_18+2], dx
                mov     [bp+var_1A], cx

loc_77F1:                               ; CODE XREF: FINDSEGSYMS+2F6↓j
                les     bx, [bp+var_1E]
                mov     ax, [bp+var_1A]
                cmp     es:[bx+1Ch], ax
                ja      short loc_7800
                jmp     loc_7940
; ---------------------------------------------------------------------------

loc_7800:                               ; CODE XREF: FINDSEGSYMS+60↑j
                les     bx, [bp+var_18]
                push    word ptr es:[bx+8]
                call    MYLOCK
                cmp     ax, [bp+arg_0]
                jz      short loc_7812
                jmp     loc_7A8A
; ---------------------------------------------------------------------------

loc_7812:                               ; CODE XREF: FINDSEGSYMS+72↑j
                les     bx, [bp+arg_6]
                mov     ax, bx
                mov     dx, es
                mov     es:[bx+80h], ax
                mov     es:[bx+82h], dx
                les     bx, [bp+var_1E]
                mov     ax, es:[bx+26h]
                sub     dx, dx
                mov     bx, [bp+var_28]
                sub     cx, cx
                mov     dx, bx
                mov     word ptr [bp+var_14], ax
                mov     word ptr [bp+var_14+2], dx
                les     bx, [bp+var_14]
                inc     word ptr [bp+var_14]
                mov     al, es:[bx]
                sub     ah, ah
                mov     [bp+var_20], ax
                jmp     short loc_7867
; ---------------------------------------------------------------------------

loc_7849:                               ; CODE XREF: FINDSEGSYMS+D4↓j
                les     bx, [bp+var_14]
                inc     word ptr [bp+var_14]
                mov     al, es:[bx]
                les     bx, [bp+arg_6]
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     es:[si], al

loc_7867:                               ; CODE XREF: FINDSEGSYMS+AC↑j
                mov     ax, [bp+var_20]
                dec     [bp+var_20]
                or      ax, ax
                jnz     short loc_7849
                les     bx, [bp+arg_6]
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     byte ptr es:[si], 2Eh ; '.'
                mov     es, word ptr [bp+arg_6+2]
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     byte ptr es:[si], 53h ; 'S'
                mov     es, word ptr [bp+arg_6+2]
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     byte ptr es:[si], 59h ; 'Y'
                mov     es, word ptr [bp+arg_6+2]
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     byte ptr es:[si], 4Dh ; 'M'
                mov     es, word ptr [bp+arg_6+2]
                les     bx, es:[bx+80h]
                mov     byte ptr es:[bx], 0
                les     bx, [bp+arg_6]
                mov     ax, bx
                mov     dx, es
                mov     es:[bx+80h], ax
                mov     es:[bx+82h], dx
                push    dx
                push    ax
                sub     ax, ax
                push    ax
                nop
                push    cs
                call    near ptr OPENPATHNAME
                les     bx, [bp+arg_6]
                mov     es:[bx+88h], ax
                inc     ax
                jz      short loc_7940
                push    word ptr es:[bx+88h]
                lea     ax, [bp+var_10]
                push    ss
                push    ax
                mov     ax, 10h
                push    ax
                nop
                push    cs
                call    _LREAD
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                push    word ptr es:[bx+82h]
                push    word ptr es:[bx+80h]
                mov     al, [bp+var_1]
                sub     ah, ah
                push    ax
                nop
                push    cs
                call    _LREAD
                mov     ax, [bp+var_1A]
                cmp     [bp+var_6], ax
                jge     short loc_794A

loc_7933:                               ; CODE XREF: FINDSEGSYMS+211↓j
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                nop
                push    cs
                call    near ptr _LCLOSE

loc_7940:                               ; CODE XREF: FINDSEGSYMS+62↑j
                                        ; FINDSEGSYMS+15E↑j
                les     bx, [bp+var_1E]
                mov     ax, es:[bx+6]
                jmp     loc_77C4
; ---------------------------------------------------------------------------

loc_794A:                               ; CODE XREF: FINDSEGSYMS+196↑j
                mov     al, [bp+var_1]
                cbw
                les     bx, [bp+arg_6]
                add     es:[bx+80h], ax
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     byte ptr es:[si], 21h ; '!'
                mov     es, word ptr [bp+arg_6+2]
                les     bx, es:[bx+80h]
                mov     byte ptr es:[bx], 0
                mov     ax, [bp+var_4]
                mov     [bp+var_22], ax
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                mov     ax, 0FFFCh
                cwd
                push    dx
                push    ax
                mov     ax, 2
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                lea     ax, [bp+var_26]
                push    ss
                push    ax
                mov     ax, 4
                push    ax
                nop
                push    cs
                call    _LREAD
                cmp     [bp+var_23], 3
                jnz     short loc_7933
                mov     ax, [bp+var_1A]
                inc     ax
                mov     [bp+var_20], ax
                jmp     short loc_7A09
; ---------------------------------------------------------------------------

loc_79B7:                               ; CODE XREF: FINDSEGSYMS+276↓j
                cmp     [bp+var_24], 0Ah
                jl      short loc_79D3
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                mov     ax, [bp+var_22]
                sub     dx, dx
                mov     cl, 4
                call    __lshl
                push    dx
                push    ax
                jmp     short loc_79E1
; ---------------------------------------------------------------------------

loc_79D3:                               ; CODE XREF: FINDSEGSYMS+220↑j
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                sub     ax, ax
                push    ax
                push    [bp+var_22]

loc_79E1:                               ; CODE XREF: FINDSEGSYMS+236↑j
                sub     ax, ax
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                push    word ptr [bp+arg_2+2]
                push    word ptr [bp+arg_2]
                mov     ax, 15h
                push    ax
                nop
                push    cs
                call    _LREAD
                les     bx, [bp+arg_2]
                mov     ax, es:[bx]
                mov     [bp+var_22], ax

loc_7A09:                               ; CODE XREF: FINDSEGSYMS+21A↑j
                mov     ax, [bp+var_20]
                dec     [bp+var_20]
                or      ax, ax
                jnz     short loc_79B7
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                push    word ptr es:[bx+82h]
                push    word ptr es:[bx+80h]
                les     bx, [bp+arg_2]
                mov     al, es:[bx+14h]
                sub     ah, ah
                push    ax
                nop
                push    cs
                call    _LREAD
                les     bx, [bp+arg_2]
                mov     al, es:[bx+14h]
                cbw
                les     bx, [bp+arg_6]
                add     es:[bx+80h], ax
                mov     si, es:[bx+80h]
                inc     word ptr es:[bx+80h]
                mov     es, word ptr es:[bx+82h]
                mov     byte ptr es:[si], 3Ah ; ':'
                mov     es, word ptr [bp+arg_6+2]
                les     bx, es:[bx+80h]
                mov     byte ptr es:[bx], 0
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                sub     ax, ax
                push    ax
                push    ax
                mov     ax, 1
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK
                les     bx, [bp+arg_6]
                mov     es:[bx+84h], ax
                mov     es:[bx+86h], dx
                mov     ax, 1
                jmp     short loc_7ACE
; ---------------------------------------------------------------------------

loc_7A8A:                               ; CODE XREF: FINDSEGSYMS+74↑j
                inc     [bp+var_1A]
                add     word ptr [bp+var_18], 0Ah
                jmp     loc_77F1
; ---------------------------------------------------------------------------

loc_7A94:                               ; CODE XREF: FINDSEGSYMS+30↑j
                les     bx, [bp+arg_6]
                mov     word ptr es:[bx+88h], 0FFFFh
                push    es
                push    bx
                push    [bp+arg_0]
                call    HTOA
                les     bx, [bp+arg_6]
                mov     es:[bx+80h], ax
                mov     es:[bx+82h], dx
                mov     si, ax
                inc     word ptr es:[bx+80h]
                mov     es, dx
                mov     byte ptr es:[si], 3Ah ; ':'
                mov     es, word ptr [bp+arg_6+2]
                les     bx, es:[bx+80h]
                mov     byte ptr es:[bx], 0
                sub     ax, ax

loc_7ACE:                               ; CODE XREF: FINDSEGSYMS+2ED↑j
                pop     si
                mov     sp, bp
                pop     bp
                retn    0Ah
FINDSEGSYMS     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FINDSYMBOL      proc near               ; CODE XREF: STACKWALK+9D↓p

var_E           = word ptr -0Eh
var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = byte ptr -6
var_4           = word ptr -4
var_2           = word ptr -2
arg_0           = word ptr  4
arg_2           = dword ptr  6
arg_6           = dword ptr  0Ah

                push    bp
                mov     bp, sp
                sub     sp, 0Eh
                les     bx, [bp+arg_6]
                cmp     word ptr es:[bx+88h], 0FFFFh
                jnz     short loc_7AE9
                jmp     loc_7C01
; ---------------------------------------------------------------------------

loc_7AE9:                               ; CODE XREF: FINDSYMBOL+F↑j
                push    word ptr es:[bx+88h]
                push    word ptr es:[bx+86h]
                push    word ptr es:[bx+84h]
                sub     ax, ax
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK
                mov     [bp+var_4], ax
                mov     [bp+var_2], dx
                les     bx, [bp+arg_2]
                mov     ax, es:[bx+2]
                mov     [bp+var_E], ax
                jmp     loc_7BF4
; ---------------------------------------------------------------------------

loc_7B13:                               ; CODE XREF: FINDSYMBOL+129↓j
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                lea     ax, [bp+var_8]
                push    ss
                push    ax
                mov     ax, 3
                push    ax
                nop
                push    cs
                call    _LREAD
                mov     ax, [bp+arg_0]
                cmp     [bp+var_8], ax
                ja      short loc_7B34
                jmp     loc_7BBB
; ---------------------------------------------------------------------------

loc_7B34:                               ; CODE XREF: FINDSYMBOL+5A↑j
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                push    [bp+var_2]
                push    [bp+var_4]
                sub     ax, ax
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                lea     ax, [bp+var_8]
                push    ss
                push    ax
                mov     ax, 3
                push    ax
                nop
                push    cs
                call    _LREAD
                les     bx, [bp+arg_6]
                mov     ax, es:[bx+80h]
                mov     dx, es:[bx+82h]
                mov     word ptr [bp+var_C], ax
                mov     word ptr [bp+var_C+2], dx
                push    word ptr es:[bx+88h]
                push    dx
                push    ax
                mov     al, [bp+var_6]
                sub     ah, ah
                push    ax
                nop
                push    cs
                call    _LREAD
                mov     al, [bp+var_6]
                cbw
                add     word ptr [bp+var_C], ax
                mov     ax, [bp+arg_0]
                cmp     [bp+var_8], ax
                jnb     short loc_7BAF
                les     bx, [bp+var_C]
                inc     word ptr [bp+var_C]
                mov     byte ptr es:[bx], 2Bh ; '+'
                push    es
                push    word ptr [bp+var_C]
                sub     ax, [bp+var_8]
                push    ax
                call    HTOA
                mov     word ptr [bp+var_C], ax
                mov     word ptr [bp+var_C+2], dx

loc_7BAF:                               ; CODE XREF: FINDSYMBOL+BD↑j
                les     bx, [bp+var_C]
                mov     byte ptr es:[bx], 0
                mov     ax, 1
                jmp     short loc_7C23
; ---------------------------------------------------------------------------

loc_7BBB:                               ; CODE XREF: FINDSYMBOL+5C↑j
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                sub     ax, ax
                push    ax
                push    ax
                mov     ax, 1
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK
                sub     ax, 3
                sbb     dx, 0
                mov     [bp+var_4], ax
                mov     [bp+var_2], dx
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+88h]
                mov     al, [bp+var_6]
                cbw
                cwd
                push    dx
                push    ax
                mov     ax, 1
                push    ax
                nop
                push    cs
                call    near ptr _LLSEEK

loc_7BF4:                               ; CODE XREF: FINDSYMBOL+3B↑j
                mov     ax, [bp+var_E]
                dec     [bp+var_E]
                or      ax, ax
                jz      short loc_7C01
                jmp     loc_7B13
; ---------------------------------------------------------------------------

loc_7C01:                               ; CODE XREF: FINDSYMBOL+11↑j
                                        ; FINDSYMBOL+127↑j
                les     bx, [bp+arg_6]
                push    word ptr es:[bx+82h]
                push    word ptr es:[bx+80h]
                push    [bp+arg_0]
                call    HTOA
                mov     word ptr [bp+var_C], ax
                mov     word ptr [bp+var_C+2], dx
                les     bx, [bp+var_C]
                mov     byte ptr es:[bx], 0
                sub     ax, ax

loc_7C23:                               ; CODE XREF: FINDSYMBOL+E4↑j
                mov     sp, bp
                pop     bp
                retn    0Ah
FINDSYMBOL      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

NEXTFRAME       proc near               ; CODE XREF: STACKWALK+25↓p

var_2           = word ptr -2
arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                sub     sp, 2
                les     bx, [bp+arg_0]
                mov     ax, es:[bx]
                mov     [bp+var_2], ax
                test    al, 1
                jz      short loc_7C40
                xor     byte ptr [bp+var_2], 1

loc_7C40:                               ; CODE XREF: NEXTFRAME+11↑j
                cmp     [bp+var_2], 0
                jz      short loc_7C95
                mov     ax, [bp+var_2]
                cmp     word ptr [bp+arg_0], ax
                jnb     short loc_7C7F
                mov     ax, word ptr [bp+arg_0]
                mov     dx, word ptr [bp+arg_0+2]
                sub     ax, ax
                or      al, 0Ah
                mov     word ptr [bp+arg_0], ax
                les     bx, [bp+arg_0]
                add     word ptr [bp+arg_0], 2
                mov     ax, [bp+var_2]
                cmp     es:[bx], ax
                ja      short loc_7C7F
                add     word ptr [bp+arg_0], 2
                mov     bx, word ptr [bp+arg_0]
                cmp     es:[bx], ax
                jb      short loc_7C7F
                mov     ax, bx
                sub     ax, ax
                mov     ax, [bp+var_2]
                jmp     short loc_7C98
; ---------------------------------------------------------------------------

loc_7C7F:                               ; CODE XREF: NEXTFRAME+23↑j
                                        ; NEXTFRAME+3F↑j ...
                mov     ax, 3
                push    ax
                mov     ax, 8
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 13h
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE

loc_7C95:                               ; CODE XREF: NEXTFRAME+1B↑j
                sub     ax, ax
                cwd

loc_7C98:                               ; CODE XREF: NEXTFRAME+54↑j
                mov     sp, bp
                pop     bp
                retn    4
NEXTFRAME       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

STACKWALK       proc near               ; CODE XREF: FATALEXIT+A1↓p

var_AA          = word ptr -0AAh
var_A8          = dword ptr -0A8h
var_A4          = word ptr -0A4h
var_A2          = byte ptr -0A2h
var_18          = word ptr -18h
var_16          = byte ptr -16h
arg_0           = byte ptr  4

                push    bp
                mov     bp, sp
                sub     sp, 0AAh
                lea     ax, [bp+arg_0]
                mov     word ptr [bp+var_A8], ax
                mov     word ptr [bp+var_A8+2], ss
                sub     word ptr [bp+var_A8], 4
                mov     [bp+var_A4], 0

loc_7CBB:                               ; CODE XREF: STACKWALK+CE↓j
                push    word ptr [bp+var_A8+2]
                push    word ptr [bp+var_A8]
                call    NEXTFRAME
                mov     word ptr [bp+var_A8], ax
                mov     word ptr [bp+var_A8+2], dx
                or      ax, dx
                jnz     short loc_7CD5
                jmp     loc_7D6F
; ---------------------------------------------------------------------------

loc_7CD5:                               ; CODE XREF: STACKWALK+32↑j
                les     bx, [bp+var_A8]
                mov     ax, es:[bx]
                mov     [bp+var_AA], ax
                mov     ax, es:[bx+2]
                mov     [bp+var_18], ax
                test    byte ptr [bp+var_AA], 1
                jz      short loc_7CF4
                sub     [bp+var_18], 5
                jmp     short loc_7CF8
; ---------------------------------------------------------------------------

loc_7CF4:                               ; CODE XREF: STACKWALK+4E↑j
                sub     [bp+var_18], 3

loc_7CF8:                               ; CODE XREF: STACKWALK+54↑j
                test    byte ptr [bp+var_AA], 1
                jz      short loc_7D26
                les     bx, [bp+var_A8]
                mov     ax, [bp+var_A4]
                cmp     es:[bx+4], ax
                jz      short loc_7D26
                lea     ax, [bp+var_A2]
                push    ss
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                mov     ax, es:[bx+4]
                mov     [bp+var_A4], ax
                push    ax
                call    FINDSEGSYMS
                jmp     short loc_7D2D
; ---------------------------------------------------------------------------

loc_7D26:                               ; CODE XREF: STACKWALK+5F↑j
                                        ; STACKWALK+6D↑j
                cmp     [bp+var_AA], 0
                jz      short loc_7D6F

loc_7D2D:                               ; CODE XREF: STACKWALK+86↑j
                lea     ax, [bp+var_A2]
                push    ss
                push    ax
                lea     ax, [bp+var_16]
                push    ss
                push    ax
                push    [bp+var_18]
                call    FINDSYMBOL
                mov     ax, 3
                push    ax
                lea     ax, [bp+var_A2]
                push    ss
                push    ax
                lea     ax, [bp+var_A2]
                push    ss
                push    ax
                nop
                push    cs
                call    near ptr LSTRLEN
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE
                mov     ax, 3
                push    ax
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 2
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE
                jmp     loc_7CBB
; ---------------------------------------------------------------------------

loc_7D6F:                               ; CODE XREF: STACKWALK+34↑j
                                        ; STACKWALK+8D↑j
                mov     sp, bp
                pop     bp
                retn    2
STACKWALK       endp

;
; External Entry #1 into the Module
; Attributes (0001): Fixed Exported
;

; =============== S U B R O U T I N E =======================================


                public FATALEXIT
FATALEXIT       proc far                ; CODE XREF: KERNELERROR+1A0↑p
                push    ds              ; KERNEL_1
                pop     ax
                nop
                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                mov     ds, ax
                sub     sp, 0Eh

loc_7D82:                               ; CODE XREF: FATALEXIT+F8↓j
                                        ; FATALEXIT+102↓j
                mov     ax, 3
                push    ax
                mov     ax, 4
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 14h
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE
                cmp     word ptr [bp+6], 0FFFFh
                jnz     short loc_7DB0
                mov     ax, 3
                push    ax
                mov     ax, 5
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 0Fh
                jmp     short loc_7DFA
; ---------------------------------------------------------------------------

loc_7DB0:                               ; CODE XREF: FATALEXIT+27↑j
                lea     ax, [bp-0Eh]
                mov     [bp-6], ax
                mov     word ptr [bp-4], ss
                les     bx, [bp-6]
                inc     word ptr [bp-6]
                mov     byte ptr es:[bx], 30h ; '0'
                mov     bx, [bp-6]
                inc     word ptr [bp-6]
                mov     byte ptr es:[bx], 78h ; 'x'
                push    es
                push    word ptr [bp-6]
                push    word ptr [bp+6]
                call    HTOA
                mov     [bp-6], ax
                mov     [bp-4], dx
                les     bx, [bp-6]
                inc     word ptr [bp-6]
                mov     byte ptr es:[bx], 0
                mov     ax, 3
                push    ax
                lea     ax, [bp-0Eh]
                push    ss
                push    ax
                lea     ax, [bp-0Eh]
                push    ss
                push    ax
                nop
                push    cs
                call    near ptr LSTRLEN

loc_7DFA:                               ; CODE XREF: FATALEXIT+39↑j
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE
                mov     ax, 3
                push    ax
                mov     ax, 6
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 10h
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE
                call    STACKWALK
                mov     ax, 3
                push    ax
                mov     ax, 7
                push    ax
                call    GETDEBUGSTRING
                push    dx
                push    ax
                mov     ax, 1Ch
                push    ax
                nop
                push    cs
                call    near ptr _LWRITE
                mov     byte ptr [bp-8], 0

loc_7E33:                               ; CODE XREF: FATALEXIT+D4↓j
                mov     ax, 3
                push    ax
                lea     ax, [bp-8]
                push    ss
                push    ax
                mov     ax, 1
                push    ax
                nop
                push    cs
                call    _LREAD
                cmp     byte ptr [bp-8], 0
                jz      short loc_7E33
                cmp     byte ptr [bp-8], 61h ; 'a'
                jl      short loc_7E5B
                cmp     byte ptr [bp-8], 7Ah ; 'z'
                jg      short loc_7E5B
                add     byte ptr [bp-8], 0E0h

loc_7E5B:                               ; CODE XREF: FATALEXIT+DA↑j
                                        ; FATALEXIT+E0↑j
                cmp     byte ptr [bp-8], 41h ; 'A'
                jz      short loc_7E7A
                cmp     byte ptr [bp-8], 49h ; 'I'
                jz      short loc_7E83
                cmp     byte ptr [bp-8], 42h ; 'B'
                jz      short loc_7E70
                jmp     loc_7D82
; ---------------------------------------------------------------------------

loc_7E70:                               ; CODE XREF: FATALEXIT+F6↑j
                mov     ax, 2
                push    ax
                call    ENTERBREAK
                jmp     loc_7D82
; ---------------------------------------------------------------------------

loc_7E7A:                               ; CODE XREF: FATALEXIT+EA↑j
                mov     ax, 1
                push    ax
                nop
                push    cs
                call    EXITKERNEL

loc_7E83:                               ; CODE XREF: FATALEXIT+F0↑j
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    2
FATALEXIT       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

HTOA            proc near               ; CODE XREF: KERNELERROR+141↑p
                                        ; KERNELERROR+15B↑p ...

var_4           = word ptr -4
var_2           = byte ptr -2
arg_0           = word ptr  4
arg_2           = dword ptr  6

                push    bp
                mov     bp, sp
                sub     sp, 4
                push    si
                mov     [bp+var_4], 4
                jmp     short loc_7EC3
; ---------------------------------------------------------------------------

loc_7E9C:                               ; CODE XREF: HTOA+3D↓j
                mov     al, byte ptr [bp+arg_0]
                and     al, 0Fh
                mov     [bp+var_2], al
                mov     cl, 4
                shr     [bp+arg_0], cl
                cmp     al, 9
                jle     short loc_7EB3
                add     [bp+var_2], 37h ; '7'
                jmp     short loc_7EB7
; ---------------------------------------------------------------------------

loc_7EB3:                               ; CODE XREF: HTOA+1D↑j
                add     [bp+var_2], 30h ; '0'

loc_7EB7:                               ; CODE XREF: HTOA+23↑j
                mov     bx, [bp+var_4]
                les     si, [bp+arg_2]
                mov     al, [bp+var_2]
                mov     es:[bx+si], al

loc_7EC3:                               ; CODE XREF: HTOA+C↑j
                mov     ax, [bp+var_4]
                dec     [bp+var_4]
                or      ax, ax
                jnz     short loc_7E9C
                mov     ax, word ptr [bp+arg_2]
                mov     dx, word ptr [bp+arg_2+2]
                add     ax, 4
                pop     si
                mov     sp, bp
                pop     bp
                retn    6
HTOA            endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GETDEBUGSTRING  proc near               ; CODE XREF: LOADRESOURCE+160↑p
                                        ; KERNELERROR+95↑p ...

arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                push    di
                push    cs
                pop     es
                assume es:cseg01
                mov     dx, es
                mov     di, 215h
                mov     bx, [bp+arg_0]

loc_7EEB:                               ; CODE XREF: GETDEBUGSTRING+1B↓j
                dec     bx
                jl      short loc_7EFE
                xor     ax, ax
                mov     cx, 0FFFFh
                repne scasb
                cmp     es:[di], al
                jnz     short loc_7EEB
                xor     ax, ax
                xor     dx, dx

loc_7EFE:                               ; CODE XREF: GETDEBUGSTRING+F↑j
                mov     ax, di
                pop     di
                mov     sp, bp
                pop     bp
                retn    2
GETDEBUGSTRING  endp


; =============== S U B R O U T I N E =======================================


GETEXEHEAD      proc near               ; CODE XREF: KERNELERROR:loc_76B0↑p
                                        ; FINDSEGSYMS:loc_77C1↑p
                mov     ax, cs:HEXEHEAD
                retn
GETEXEHEAD      endp


; =============== S U B R O U T I N E =======================================


ENTERBREAK      proc near               ; CODE XREF: FATALEXIT+FF↑p
                pop     ax
                pop     cx
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                pop     ax
                pop     bx
                add     sp, cx
                pushf
                push    bx
                push    ax
                xor     ax, ax
                mov     es, ax
                jmp     dword ptr es:HEXEHEAD
ENTERBREAK      endp


; =============== S U B R O U T I N E =======================================


__lshl          proc near               ; CODE XREF: FINDSEGSYMS+231↑p
                xor     ch, ch
                jcxz    short locret_7F30

loc_7F2A:                               ; CODE XREF: __lshl+8↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_7F2A

locret_7F30:                            ; CODE XREF: __lshl+2↑j
                retn
__lshl          endp

; ---------------------------------------------------------------------------
HINITMEM        dw 0                    ; DATA XREF: BOOTDONE+6D↓o
                                        ; BOOTSTRAP+CC↓w ...
SEGINITMEM      dw 0                    ; DATA XREF: BOOTSTRAP+25↓w
                                        ; BOOTSTRAP+B0↓r ...
CPSHRUNK        dw 0                    ; DATA XREF: BOOTSTRAP+17↓w
                                        ; FINDFREESEG+91↓w ...
LPBOOTAPP       dd 0                    ; DATA XREF: SLOWBOOT+17↓w
                                        ; SLOWBOOT:loc_8412↓w ...
BOOTEXECBLOCK   db 0Eh dup(0)           ; DATA XREF: SLOWBOOT:loc_8469↓o
                                        ; FASTBOOT+442↓o ...
WIN_SHOW        db    2                 ; DATA XREF: SLOWBOOT↓o
                                        ; FASTBOOT+3FD↓o
                db    0
                db    1
                db    0
SZKERNELNAME    db 'KERNEL',0           ; DATA XREF: BOOTDONE↓o
                                        ; BOOTDONE+1B↓o ...
SZENABLEHEAPCHECKING db 'EnableHeapChecking',0 ; DATA XREF: BOOTDONE+3↓o
SZFREEZEGLOBALMOTION db 'FreezeGlobalMotion',0
                                        ; DATA XREF: BOOTDONE+1E↓o
SZLRUSWEEPFREQUENCY db 'LRUSweepFrequency',0 ; DATA XREF: BOOTDONE+39↓o
word_7F8C       dw 0                    ; DATA XREF: BOOTSTRAP+39↓w
                                        ; BOOTSTRAP+1B2↓r

; =============== S U B R O U T I N E =======================================


BOOTDONE        proc far                ; CODE XREF: SLOWBOOT+A4↓j
                                        ; DATA XREF: BOOTSTRAP+260↓o
                mov     ax, offset SZKERNELNAME ; "KERNEL"
                mov     bx, offset SZENABLEHEAPCHECKING ; "EnableHeapChecking"
                xor     cx, cx
                push    cs
                push    ax
                push    cs
                push    bx
                push    cx
                nop
                push    cs
                call    near ptr GETPROFILEINT
                mov     es, cs:PGLOBALHEAP
                assume es:nothing
                mov     es:0, ax
                mov     ax, offset SZKERNELNAME ; "KERNEL"
                mov     bx, offset SZFREEZEGLOBALMOTION ; "FreezeGlobalMotion"
                xor     cx, cx
                push    cs
                push    ax
                push    cs
                push    bx
                push    cx
                nop
                push    cs
                call    near ptr GETPROFILEINT
                mov     es, cs:PGLOBALHEAP
                mov     es:2, ax
                mov     ax, offset SZKERNELNAME ; "KERNEL"
                mov     bx, offset SZLRUSWEEPFREQUENCY ; "LRUSweepFrequency"
                mov     cx, 0FAh
                push    cs
                push    ax
                push    cs
                push    bx
                push    cx
                nop
                push    cs
                call    near ptr GETPROFILEINT
                or      ax, ax
                jz      short loc_7FE6
                mov     bx, offset LRUSWEEP
                push    ax
                push    cs
                push    bx
                call    cs:PTIMERPROC

loc_7FE6:                               ; CODE XREF: BOOTDONE+4B↑j
                nop
                push    cs
                call    near ptr VALIDATECODESEGMENTS
                push    ss
                call    DELETETASK
                xor     dx, dx
                mov     ss:7Eh, dx
                mov     cs:CURTDB, dx
                mov     cx, offset HINITMEM
                push    cs
                push    dx
                push    cx
                push    dx
                push    cs
                mov     ax, offset BOOTSCHEDULE
                push    ax
                jmp     near ptr GLOBALREALLOC
BOOTDONE        endp

                assume ss:cseg01

; =============== S U B R O U T I N E =======================================


                public BOOTSTRAP
BOOTSTRAP       proc far
                mov     cs:TOPPDB, es
                mov     cs:HEADPDB, es
                mov     word ptr es:42h, 0
                mov     ax, cx
                mov     cl, 4
                shr     ax, cl
                mov     cs:CPSHRUNK, ax
                mov     bx, sp
                mov     cl, 4
                shr     bx, cl
                mov     ax, ss
                add     ax, bx
                mov     cs:SEGINITMEM, ax
                mov     ax, cs
                mov     bx, 93F0h
                mov     si, 9670h
                sub     si, bx
                mov     cl, 4
                shr     bx, cl
                add     ax, bx
                mov     cs:word_7F8C, bx
                cli
                mov     ss, ax
                assume ss:nothing
                mov     sp, si
                sti
                xor     bp, bp
                mov     ss:word_93FE, si
                mov     ss:word_93FC, sp
                sub     si, 200h
                mov     ss:word_93FA, si
                mov     ax, es:0FEh
                cmp     ax, 5758h
                jz      short loc_8076
                cmp     ax, 5747h
                jnz     short loc_8081
                inc     cs:FWINX

loc_8076:                               ; CODE XREF: BOOTSTRAP+60↑j
                inc     cs:FWINX
                jmp     short loc_80AF
; ---------------------------------------------------------------------------
                align 2

loc_807E:                               ; CODE XREF: BOOTSTRAP+CA↓j
                jmp     boot_failure_01
; ---------------------------------------------------------------------------

loc_8081:                               ; CODE XREF: BOOTSTRAP+65↑j
                push    ds
                xor     ax, ax
                cld
                mov     es, cs:TOPPDB
                mov     si, 80h
                lods    byte ptr es:[si]
                add     si, ax
                lea     di, [si+1]
                push    cs
                pop     ds
                assume ds:cseg01
                mov     cx, offset boot_failure_01
                mov     si, offset SZWINPACKFILE ; "WIN100.BIN"
                sub     cx, si
                mov     ax, cx
                add     al, 2
                stosb
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                add     al, 41h ; 'A'
                mov     ah, 3Ah ; ':'
                stosw
                rep movsb
                pop     ds
                assume ds:nothing

loc_80AF:                               ; CODE XREF: BOOTSTRAP+71↑j
                cld
                mov     es, cs:TOPPDB
                mov     ax, es
                add     ax, 10h
                mov     bx, cs:SEGINITMEM
                mov     cx, es:2
                mov     es, bx
                mov     dx, es:10h
                push    dx
                push    bx
                push    ax
                push    cx
                nop
                push    cs
                call    near ptr GLOBALINIT
                jcxz    short loc_807E
                mov     cs:HINITMEM, ax
                call    DEBUGINIT
                call    INITDOSVARP
                mov     bx, offset EXITKERNEL
                mov     word ptr cs:PEXITPROC, bx
                mov     word ptr cs:PEXITPROC+2, cs
                push    ds
                mov     ax, cs
                mov     ds, ax
                assume ds:cseg01
                mov     si, 1Eh
                fninit
                fnstcw  word ptr [si]
                jmp     short $+2
; ---------------------------------------------------------------------------

loc_80FB:                               ; CODE XREF: BOOTSTRAP+EF↑j
                mov     ax, [si]
                and     ax, 37Fh
                cmp     ax, 37Fh
                jz      short loc_8109
                mov     word ptr [si], 0

loc_8109:                               ; CODE XREF: BOOTSTRAP+F9↑j
                pop     ds
                assume ds:nothing
                mov     es, cs:TOPPDB
                mov     si, 80h
                xor     ax, ax
                lods    byte ptr es:[si]
                add     si, ax
                inc     si
                lods    byte ptr es:[si]
                add     si, ax
                mov     word ptr es:[si-4], 564Fh
                mov     byte ptr es:[si-2], 4Ch ; 'L'
                sub     si, ax
                sub     sp, 80h
                mov     di, sp
                mov     bx, 4000h
                push    es
                push    es
                push    si
                push    ss
                push    di
                push    bx
                nop
                push    cs
                call    near ptr OPENFILE
                inc     ax
                pop     es
                jnz     short loc_815A
                inc     byte ptr es:[si]
                mov     bx, 4000h
                push    es
                push    es
                push    si
                push    ss
                push    di
                push    bx
                nop
                push    cs
                call    near ptr OPENFILE
                pop     es
                inc     ax
                jnz     short loc_815A

loc_8157:                               ; CODE XREF: BOOTSTRAP+166↓j
                jmp     boot_failure_01
; ---------------------------------------------------------------------------

loc_815A:                               ; CODE XREF: BOOTSTRAP+136↑j
                                        ; BOOTSTRAP+14B↑j
                mov     di, sp
                mov     ax, 0FFFFh
                push    cs:SEGINITMEM
                push    ax
                push    ss
                push    di
                call    LOADEXEHEADER
                add     sp, 80h
                or      ax, ax
                jz      short loc_8157
                mov     es, ax
                mov     cs:HEXEHEAD, ax
                mov     si, es:22h
                add     word ptr es:[si+6], 800h
                inc     word ptr es:2
                push    es
                call    ALLOCALLSEGS
                mov     es, cs:HEXEHEAD
                mov     si, 1
                mov     ax, 0FFFFh
                push    cs:HEXEHEAD
                push    si
                push    cs
                push    ax
                call    LOADSEGMENT
                or      ax, ax
                jnz     short loc_81A9
                jmp     boot_failure_01
; ---------------------------------------------------------------------------

loc_81A9:                               ; CODE XREF: BOOTSTRAP+19A↑j
                mov     cx, 93F0h
                mov     si, 9670h
                sub     si, cx
                add     si, 800h
                mov     es, cs:HEXEHEAD
                mov     bx, ax
                add     bx, cs:word_7F8C
                test    bl, 1
                jnz     short loc_81C7
                dec     bx

loc_81C7:                               ; CODE XREF: BOOTSTRAP+1BA↑j
                cli
                mov     ss, bx
                assume ss:nothing
                mov     sp, si
                sti
                push    ax
                mov     es, bx
                xor     di, di
                mov     cx, 80h
                xor     ax, ax
                cld
                rep stosb
                pop     ax
                xor     bp, bp
                mov     ss:0Eh, si
                mov     ss:0Ch, sp
                sub     si, 0A00h
                mov     ss:0Ah, si
                sub     sp, 16h
                mov     word ptr ss:4, ss
                mov     ss:2, sp
                mov     cx, cs:TOPPDB
                mov     ss:32h, cx
                mov     word ptr ss:34h, 80h
                mov     ss:36h, cx
                mov     word ptr ss:6, 1
                mov     word ptr ss:7Eh, 4454h
                les     bx, ss:2
                mov     es:[bx+10h], bp
                mov     es:[bx+0Eh], bp
                push    ax
                mov     ax, 8234h
                push    ax
                retf
; ---------------------------------------------------------------------------
                push    ss
                call    SAVESTATE
                mov     cs:CURTDB, ss
                mov     cs:HEADTDB, ss
                xor     ax, ax
                mov     es, ax
                assume es:cseg01
                mov     bx, 0FCh
                mov     ax, 180Ah
                xchg    ax, es:[bx]
                mov     word ptr cs:PREVINT3FPROC, ax
                mov     ax, cs
                xchg    ax, es:[bx+2]
                mov     word ptr cs:PREVINT3FPROC+2, ax
                mov     es, cs:SEGINITMEM
                assume es:nothing
                cmp     word ptr es:0Ah, 0
                jnz     short no_fastboot
                mov     ax, offset BOOTDONE
                push    ax
                jmp     FASTBOOT
; ---------------------------------------------------------------------------

no_fastboot:                            ; CODE XREF: BOOTSTRAP+25E↑j
                push    cs:HINITMEM
                nop
                push    cs
                call    near ptr GLOBALFREE
                mov     cs:HINITMEM, ax
                push    cs:TOPPDB
                mov     ax, offset SLOWBOOT
                push    ax
                jmp     INITLOADER
; ---------------------------------------------------------------------------
SZWINPACKFILE   db 'WIN100.BIN',0       ; DATA XREF: BOOTSTRAP+8F↑o
; ---------------------------------------------------------------------------

boot_failure_01:                        ; CODE XREF: BOOTSTRAP:loc_807E↑j
                                        ; BOOTSTRAP:loc_8157↑j ...
                mov     al, 1
                push    ax
                nop
                push    cs
                call    EXITKERNEL
; ---------------------------------------------------------------------------
SZSYSTEMDRV     db 'SYSTEM.DRV',0       ; DATA XREF: SLOWBOOT:loc_842A↓o
SZKEYBOARDDRV   db 'KEYBOARD.DRV',0
SZMOUSEDRV      db 'MOUSE.DRV',0
SZDISPLAYDRV    db 'DISPLAY.DRV',0
SZSOUNDDRV      db 'SOUND.DRV',0
SZCOMMDRV       db 'COMM.DRV',0
SZFONTSFON      db 'FONTS.FON',0
SZGDIEXE        db 'GDI.EXE',0
SZUSEREXE       db 'USER.EXE',0         ; DATA XREF: SLOWBOOT+5E↓o
SZMSDOSDEXE     db 'MSDOSD.EXE',0       ; DATA XREF: BOOTSTRAP+31C↓o
                                        ; BOOTSTRAP:boot_failure_02↓o
SZMSDOSEXE      db 'MSDOS.EXE',0        ; DATA XREF: SLOWBOOT:loc_8412↓o
                                        ; SLOWBOOT+80↓o
; ---------------------------------------------------------------------------

loc_830F:                               ; CODE XREF: SLOWBOOT+51↓p
                                        ; SLOWBOOT+73↓p
                push    bp
                mov     bp, sp
                push    si
                push    di
                xor     ax, ax
                push    cs
                push    word ptr [bp+4]
                push    ax
                push    ax
                nop
                push    cs
                call    near ptr LOADMODULE
                cmp     ax, 2
                jnz     short loc_8360
                cmp     word ptr [bp+4], offset SZMSDOSDEXE ; "MSDOSD.EXE"
                jnb     short loc_8396
                mov     ax, 401h
                push    ax
                mov     ax, offset SZBOOTCANNOTFINDFILE ; "BOOT: Unable to find file - "
                push    cs
                push    ax
                push    cs
                push    word ptr [bp+4]
                call    KERNELERROR
                jmp     short loc_835D
; ---------------------------------------------------------------------------
SZBOOTCANNOTFINDFILE db 'BOOT: Unable to find file - ',0
                                        ; DATA XREF: BOOTSTRAP+327↑o
                db 24h
; ---------------------------------------------------------------------------

loc_835D:                               ; CODE XREF: BOOTSTRAP+333↑j
                jmp     short boot_failure_02
; ---------------------------------------------------------------------------
                align 2

loc_8360:                               ; CODE XREF: BOOTSTRAP+31A↑j
                cmp     ax, 0Bh
                jnz     short loc_8396
                mov     ax, 401h
                push    ax
                mov     ax, offset SZBOOTINVALIDEXE ; "BOOT: Invalid .EXE file - "
                push    cs
                push    ax
                push    cs
                push    word ptr [bp+4]
                call    KERNELERROR
                jmp     short loc_8393
; ---------------------------------------------------------------------------
SZBOOTINVALIDEXE db 'BOOT: Invalid .EXE file - ',0
                                        ; DATA XREF: BOOTSTRAP+35F↑o
                db 24h
; ---------------------------------------------------------------------------

loc_8393:                               ; CODE XREF: BOOTSTRAP+36B↑j
                jmp     short boot_failure_02
; ---------------------------------------------------------------------------
                align 2

loc_8396:                               ; CODE XREF: BOOTSTRAP+321↑j
                                        ; BOOTSTRAP+359↑j
                or      ax, ax
                jnz     short loc_83D5
                mov     ax, 401h
                push    ax
                mov     ax, offset SZBOOTCANNOTLOAD ; "BOOT: Unable to load - "
                push    cs
                push    ax
                push    cs
                push    word ptr [bp+4]
                call    KERNELERROR
                jmp     short boot_failure_02
; ---------------------------------------------------------------------------
SZBOOTCANNOTLOAD db 'BOOT: Unable to load - ',0
                                        ; DATA XREF: BOOTSTRAP+394↑o
                db 24h
; ---------------------------------------------------------------------------

boot_failure_02:                        ; CODE XREF: BOOTSTRAP:loc_835D↑j
                                        ; BOOTSTRAP:loc_8393↑j ...
                cmp     word ptr [bp+4], offset SZMSDOSDEXE ; "MSDOSD.EXE"
                jnb     short loc_83D5
                mov     ax, 1
                push    ax
                nop
                push    cs
                call    EXITKERNEL

loc_83D5:                               ; CODE XREF: BOOTSTRAP+38E↑j
                                        ; BOOTSTRAP+3C0↑j
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    2
BOOTSTRAP       endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


SLOWBOOT        proc far                ; DATA XREF: BOOTSTRAP+27A↑o
                mov     word ptr cs:BOOTEXECBLOCK+6, offset WIN_SHOW
                mov     word ptr cs:BOOTEXECBLOCK+8, cs
                mov     es, cs:TOPPDB
                or      ax, ax
                jz      short loc_8412
                mov     di, ax
                mov     word ptr cs:LPBOOTAPP, di
                mov     word ptr cs:LPBOOTAPP+2, es
                xor     ax, ax
                mov     cx, 0FFFFh
                cld
                repne scasb
                mov     word ptr cs:BOOTEXECBLOCK+2, di
                mov     word ptr cs:BOOTEXECBLOCK+4, es
                jmp     short loc_842A
; ---------------------------------------------------------------------------

loc_8412:                               ; CODE XREF: SLOWBOOT+13↑j
                mov     word ptr cs:LPBOOTAPP, offset SZMSDOSEXE ; "MSDOS.EXE"
                mov     word ptr cs:LPBOOTAPP+2, cs
                mov     word ptr cs:BOOTEXECBLOCK+2, 80h
                mov     word ptr cs:BOOTEXECBLOCK+4, es

loc_842A:                               ; CODE XREF: SLOWBOOT+33↑j
                mov     di, offset SZSYSTEMDRV ; "SYSTEM.DRV"

loc_842D:                               ; CODE XREF: SLOWBOOT+62↓j
                push    di
                call    loc_830F
                push    cs
                pop     es
                assume es:cseg01
                mov     cx, 0FFFFh
                xor     ax, ax
                cld
                repne scasb
                cmp     di, offset SZUSEREXE ; "USER.EXE"
                jb      short loc_842D
                cmp     word ptr cs:BOOTEXECBLOCK+2, 80h
                jz      short loc_844F
                call    near ptr INITFWDREF
                jmp     short loc_8469
; ---------------------------------------------------------------------------

loc_844F:                               ; CODE XREF: SLOWBOOT+6B↑j
                                        ; SLOWBOOT+84↓j
                push    di
                call    loc_830F
                push    cs
                pop     es
                mov     cx, 0FFFFh
                xor     ax, ax
                cld
                repne scasb
                cmp     di, offset SZMSDOSEXE ; "MSDOS.EXE"
                jb      short loc_844F
                call    near ptr INITFWDREF
                call    ENABLEINT21

loc_8469:                               ; CODE XREF: SLOWBOOT+70↑j
                mov     ax, offset BOOTEXECBLOCK
                push    word ptr cs:LPBOOTAPP+2
                push    word ptr cs:LPBOOTAPP
                push    cs
                push    ax
                nop
                push    cs
                call    near ptr LOADMODULE
                or      ax, ax
                jz      short slowboot_fail
                jmp     near ptr BOOTDONE
; ---------------------------------------------------------------------------

slowboot_fail:                          ; CODE XREF: SLOWBOOT+A2↑j
                mov     ax, 401h
                push    ax
                mov     ax, offset SZBOOTCANNOTLOADFILE ; "BOOT: unable to load - \x00$"
                push    cs
                push    ax
                push    word ptr cs:LPBOOTAPP+2
                push    word ptr cs:LPBOOTAPP
                call    KERNELERROR
                jmp     short LPRETURNONSLOWBOOTERROR
SLOWBOOT        endp ; sp-analysis failed

; ---------------------------------------------------------------------------
SZBOOTCANNOTLOADFILE db 'BOOT: unable to load - ',0,'$'
                                        ; DATA XREF: SLOWBOOT+AB↑o
; ---------------------------------------------------------------------------

LPRETURNONSLOWBOOTERROR:                ; CODE XREF: SLOWBOOT+BD↑j
                jmp     boot_failure_01
; ---------------------------------------------------------------------------
word_84B8       dw 0                    ; DATA XREF: FINDFREESEG:loc_853E↓r
                                        ; FINDFREESEG+8C↓w ...
                db 0Eh dup(0)

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FINDFREESEG     proc near               ; CODE XREF: FASTBOOT+AA↓p
                                        ; FASTBOOT+192↓p ...

arg_0           = dword ptr  4

                push    bp
                mov     bp, sp
                push    si
                push    di
                push    es
                call    GENTER

loc_84D1:                               ; CODE XREF: FINDFREESEG+CB↓j
                                        ; FINDFREESEG+D1↓j ...
                mov     ax, word ptr [bp+arg_0+2]
                mov     bx, word ptr [bp+arg_0]
                cmp     ax, 10h
                jbe     short loc_84F8
                les     si, [bp+arg_0]
                assume es:nothing
                mov     ax, es:[si+4]
                mov     bx, es:[si+6]
                cmp     si, es:8
                jnz     short loc_84F8
                add     bx, es:12h
                add     bx, es:10h

loc_84F8:                               ; CODE XREF: FINDFREESEG+12↑j
                                        ; FINDFREESEG+24↑j
                add     bx, 0Fh
                mov     cl, 4
                shr     bx, cl
                add     bx, 1
                call    HEND
                mov     cx, [di+4]
                mov     es, word ptr [di+6]
                mov     bx, 8
                test    al, 10h
                jz      short loc_8518
                mov     es, word ptr [di+8]
                mov     bx, 6

loc_8518:                               ; CODE XREF: FINDFREESEG+48↑j
                                        ; FINDFREESEG+71↓j
                cmp     es:[di+1], di
                jnz     short loc_852C
                mov     ax, es:[di+3]
                inc     ax
                cmp     ax, dx
                jb      short loc_852C
                xor     cx, cx
                jmp     loc_85B7
; ---------------------------------------------------------------------------

loc_852C:                               ; CODE XREF: FINDFREESEG+54↑j
                                        ; FINDFREESEG+5D↑j
                mov     ax, cs:SEGINITMEM
                dec     ax
                cmp     es:[bx], ax
                jz      short loc_853E
                mov     es, word ptr es:[bx]
                loop    loc_8518
                jmp     short loc_85B7
; ---------------------------------------------------------------------------
                align 2

loc_853E:                               ; CODE XREF: FINDFREESEG+6C↑j
                mov     ax, cs:word_84B8
                cmp     ax, 1
                jbe     short loc_859C
                cmp     bl, 6
                jz      short loc_8596
                cmp     es:[di+1], di
                jnz     short loc_8596
                and     al, 0FEh
                sub     cs:word_84B8, ax
                add     cs:CPSHRUNK, ax
                add     es:[di+3], ax
                push    ds
                push    di
                mov     ds, word ptr es:[di+8]
                sub     [di+3], ax
                add     es:[di+8], ax
                mov     es, word ptr es:[di+8]
                xor     si, si
                xor     di, di
                mov     cx, 8
                cld
                rep movsw
                pop     di
                mov     ds, word ptr es:[di+8]
                mov     word ptr [di+6], es
                pop     ds
                mov     bx, es:[di+0Ah]
                mov     ax, es
                inc     ax
                mov     [bx], ax
                mov     cs:SEGINITMEM, ax
                jmp     loc_84D1
; ---------------------------------------------------------------------------

loc_8596:                               ; CODE XREF: FINDFREESEG+82↑j
                                        ; FINDFREESEG+88↑j
                call    SHRINK
                jmp     loc_84D1
; ---------------------------------------------------------------------------

loc_859C:                               ; CODE XREF: FINDFREESEG+7D↑j
                mov     cx, es
                cmp     es:[di+1], di
                jz      short loc_85B7
                xor     dx, dx
                call    GCOMPACT
                mov     bx, cs:HINITMEM
                mov     ax, [bx]
                mov     cs:SEGINITMEM, ax
                jmp     loc_84D1
; ---------------------------------------------------------------------------

loc_85B7:                               ; CODE XREF: FINDFREESEG+61↑j
                                        ; FINDFREESEG+73↑j ...
                call    GLEAVE
                pop     es
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    4
FINDFREESEG     endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

LOADFIXEDSEG    proc near               ; CODE XREF: FASTBOOT+271↓p

arg_0           = word ptr  4
arg_2           = word ptr  6
arg_4           = dword ptr  8
arg_8           = word ptr  0Ch
arg_A           = word ptr  0Eh

                push    bp
                mov     bp, sp
                push    si
                push    di
                call    GENTER
                les     si, [bp+arg_4]
                mov     cx, es:[si+6]
                mov     ax, cs:SEGINITMEM
                dec     ax
                mov     es, ax
                xor     bx, bx
                push    word ptr es:[bx+3]
                push    word ptr es:[bx+8]
                push    word ptr es:[bx+0Ah]
                push    word ptr es:[bx+0Ch]
                push    word ptr es:[bx+0Eh]
                mov     ax, [bp+arg_0]
                mov     es, ax
                mov     dx, [bp+arg_A]
                mov     es:[bx+1], dx
                mov     es:[bx+5], bl
                mov     es:[bx+0Ah], bx
                mov     es:[bx+0Ch], bx
                mov     es:[bx+0Eh], bx
                add     cx, 0Fh
                mov     bx, cx
                mov     cl, 4
                shr     bx, cl
                add     bx, 1
                call    HEND
                dec     dx
                xor     bx, bx
                mov     es:[bx+3], dx
                mov     ax, es
                add     dx, ax
                inc     dx
                mov     es:[bx+8], dx
                inc     ax
                les     si, [bp+arg_4]
                or      byte ptr es:[si+4], 2
                mov     es:[si+8], ax
                mov     bx, [bp+arg_8]
                add     bx, cs:SEGINITMEM
                sub     bx, cs:CPSHRUNK
                mov     ax, 0FFFFh
                push    word ptr [bp+arg_4+2]
                push    word ptr [bp+arg_4]
                push    [bp+arg_2]
                push    bx
                push    ax
                call    SEGLOAD
                les     si, [bp+arg_4]
                mov     bx, es:[si+4]
                test    bx, 100h
                jz      short loc_867D
                mov     es, dx
                mov     si, cx
                mov     cx, ax
                cld
                lods    word ptr es:[si]
                xor     bx, bx
                mov     dx, 0FFFFh
                push    [bp+arg_A]
                push    bx
                push    es
                push    si
                push    ax
                push    cx
                push    bx
                push    dx
                call    SEGRELOC

loc_867D:                               ; CODE XREF: LOADFIXEDSEG+9D↑j
                mov     es, [bp+arg_0]
                xor     bx, bx
                mov     dx, es:[bx+8]
                mov     es, dx
                pop     word ptr es:[bx+0Eh]
                pop     word ptr es:[bx+0Ch]
                pop     word ptr es:[bx+0Ah]
                pop     ax
                pop     cx
                mov     es:[bx+8], ax
                mov     es, ax
                mov     es:[bx+6], dx
                mov     es, dx
                sub     ax, dx
                dec     ax
                mov     es:[bx+3], ax
                sub     cx, ax
                add     cs:CPSHRUNK, cx
                mov     dx, [bp+arg_0]
                mov     es:[bx+6], dx
                mov     word ptr es:[bx+1], 0FFFFh
                mov     es:[bx+5], bl
                mov     byte ptr es:[bx], 4Dh ; 'M'
                mov     bx, es:[bx+0Ah]
                mov     ax, es
                inc     ax
                mov     [bx], ax
                mov     cs:SEGINITMEM, ax
                call    GLEAVE
                mov     ax, [bp+arg_0]
                inc     ax
                call    CHECKSEGCHKSUM
                pop     di
                pop     si
                mov     sp, bp
                pop     bp
                retn    0Ch
LOADFIXEDSEG    endp


; =============== S U B R O U T I N E =======================================


SHRINK          proc near               ; CODE XREF: FINDFREESEG:loc_8596↑p
                                        ; FASTBOOT+30↓p
                push    es
                push    si
                push    di
                mov     ax, cs:SEGINITMEM
                dec     ax
                mov     es, ax
                mov     dx, es:3
                inc     ax
                mov     es, ax
                xor     bx, bx
                xchg    bx, cs:word_84B8
                add     cs:CPSHRUNK, bx
                mov     si, es
                add     si, bx
                mov     bx, si
                sub     bx, ax
                sub     dx, bx
                push    dx
                push    ds
                mov     ds, si
                call    BIGMOVE
                pop     ds
                pop     ax
                mov     cx, 4
                xor     dx, dx

loc_871A:                               ; CODE XREF: SHRINK+3A↓j
                shl     ax, 1
                rcl     dx, 1
                loop    loc_871A
                push    cs:HINITMEM
                push    dx
                push    ax
                push    cx
                nop
                push    cs
                call    near ptr GLOBALREALLOC
                push    cs:HINITMEM
                call    MYLOCK
                mov     cs:SEGINITMEM, ax
                pop     di
                pop     si
                pop     es
                retn
SHRINK          endp

; ---------------------------------------------------------------------------
                db 6 dup(0)

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FASTBOOT        proc near               ; CODE XREF: BOOTSTRAP+264↑j

var_9           = byte ptr -9
var_8           = word ptr -8
var_6           = word ptr -6
var_4           = word ptr -4
var_2           = word ptr -2

                push    bp
                mov     bp, sp
                sub     sp, 0Ah
                mov     es, cs:SEGINITMEM
                mov     ax, es:8
                sub     ax, cs:CPSHRUNK
                mov     cs:word_84B8, ax
                push    cs:HINITMEM
                call    MYLOCK
                xchg    ax, cs:SEGINITMEM
                sub     ax, cs:SEGINITMEM
                add     cs:word_84B8, ax
                push    ax
                call    SHRINK
                pop     ax
                sub     cs:CPSHRUNK, ax
                mov     di, 873Dh
                mov     cx, 2
                cmp     word ptr cs:LPBOOTAPP+2, 0
                jz      short loc_878B
                inc     cx

loc_878B:                               ; CODE XREF: FASTBOOT+45↑j
                                        ; FASTBOOT+60↓j
                mov     bx, 6
                mov     ax, 1
                xor     dx, dx
                push    bx
                push    dx
                push    ax
                nop
                push    cs
                call    near ptr GLOBALALLOC
                cld
                push    cs
                pop     es
                assume es:cseg01
                stosw
                cmp     di, 8743h
                jb      short loc_878B
                call    INITPROFILE

loc_87A8:                               ; CODE XREF: FASTBOOT+3B6↓j
                mov     ax, cs:SEGINITMEM
                add     ax, cs:word_84B8
                mov     es, ax
                assume es:nothing
                xor     di, di
                mov     ax, es:[di+8]
                mov     [bp+var_4], ax
                mov     di, es:4
                add     di, es:6
                mov     cx, es:1Ch
                add     di, cx
                shl     cx, 1
                add     di, cx
                add     di, cx
                add     di, cx
                add     cx, 2
                shl     cx, 1
                add     di, cx
                mov     cx, es:30h
                add     di, cx
                shl     cx, 1
                shl     cx, 1
                add     di, cx
                xor     cx, cx
                push    cx
                push    di
                call    FINDFREESEG
                jcxz    short loc_8807
                xor     ax, ax
                push    ax
                push    ax
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                push    cs:HINITMEM
                call    MYLOCK
                mov     cs:SEGINITMEM, ax

loc_8807:                               ; CODE XREF: FASTBOOT+AD↑j
                mov     ax, cs:SEGINITMEM
                add     ax, cs:word_84B8
                mov     cx, 0FFFFh
                xor     di, di
                push    ax
                push    cx
                push    di
                push    di
                call    LOADEXEHEADER
                mov     es, ax
                mov     [bp+var_2], ax
                push    es
                push    es
                call    ADDMODULE
                pop     es
                mov     word ptr es:2, 8000h
                xor     si, si
                mov     di, es:28h
                jmp     short loc_88AE
; ---------------------------------------------------------------------------

loc_8837:                               ; CODE XREF: FASTBOOT+170↓j
                mov     ax, 0FFFFh
                push    es
                push    ax
                push    word ptr es:[di]
                call    GETSTRINGPTR
                mov     es, dx
                mov     bx, ax
                or      ax, dx
                jz      short forward_ref_on_installed
                xor     ax, ax
                mov     al, es:[bx]
                inc     bx
                push    es
                push    bx
                push    ax
                call    FINDEXEINFO

forward_ref_on_installed:               ; CODE XREF: FASTBOOT+105↑j
                or      ax, ax
                jnz     short loc_88A2
                xor     bx, bx
                mov     ax, 401h
                push    ax
                mov     ax, offset SZERRFORWARDREFERENCE ; Forward reference not allowed in installed Windows
                push    cs
                push    ax
                push    bx
                push    bx
                call    KERNELERROR
                jmp     short loc_88A0
; ---------------------------------------------------------------------------
SZERRFORWARDREFERENCE db 'Forward reference not allowed in installed Windows',0
                                        ; DATA XREF: FASTBOOT+11D↑o
                db 24h
; ---------------------------------------------------------------------------

loc_88A0:                               ; CODE XREF: FASTBOOT+127↑j
                xor     ax, ax

loc_88A2:                               ; CODE XREF: FASTBOOT+115↑j
                mov     es, [bp+var_2]
                cld
                stosw
                push    es
                push    ax
                call    INCEXEUSAGE
                pop     es
                inc     si

loc_88AE:                               ; CODE XREF: FASTBOOT+F2↑j
                cmp     si, es:1Eh
                jb      short loc_8837
                mov     word ptr es:2, 1
                mov     si, es:8
                or      si, si
                jz      short loc_890F
                mov     bx, es:[si+4]
                test    bl, 40h
                jz      short loc_890F
                test    bl, 10h
                jnz     short loc_88DF
                push    es
                push    si
                call    FINDFREESEG
                push    es
                push    si
                call    ALLOCSEG
                jmp     short loc_890F
; ---------------------------------------------------------------------------

loc_88DF:                               ; CODE XREF: FASTBOOT+18E↑j
                xor     ax, ax
                mov     bx, 873Dh
                mov     cx, 3

loc_88E7:                               ; CODE XREF: FASTBOOT+1AB↓j
                cmp     cs:[bx], ax
                jnz     short loc_88F0
                inc     bx
                inc     bx
                loop    loc_88E7

loc_88F0:                               ; CODE XREF: FASTBOOT+1A7↑j
                xchg    ax, cs:[bx]
                mov     es:[si+8], ax
                or      byte ptr es:[si+4], 2
                push    ds
                call    GENTER
                mov     bx, ax
                mov     bx, [bx]
                call    GLEAVE
                dec     bx
                mov     ds, bx
                mov     word ptr ds:1, es
                pop     ds

loc_890F:                               ; CODE XREF: FASTBOOT+180↑j
                                        ; FASTBOOT+189↑j ...
                xor     di, di
                mov     si, es:22h
                sub     si, 0Ah

loc_8919:                               ; CODE XREF: FASTBOOT+1F3↓j
                                        ; FASTBOOT+1F8↓j ...
                mov     es, [bp+var_2]
                add     si, 0Ah
                inc     di
                cmp     di, es:1Ch
                jbe     short loc_892A
                jmp     loc_8A1D
; ---------------------------------------------------------------------------

loc_892A:                               ; CODE XREF: FASTBOOT+1E2↑j
                mov     bx, es:[si+4]
                test    bl, 40h
                jnz     short loc_8965
                test    bl, 2
                jnz     short loc_8919
                test    bl, 10h
                jz      short loc_8919
                xor     cx, cx
                push    es
                push    bx
                push    cx
                push    cx
                call    MYALLOC
                pop     es
                mov     es:[si+8], dx
                and     byte ptr es:[si+4], 0FBh
                or      byte ptr es:[si+4], 2
                mov     ax, es
                mov     es, cs:PGLOBALHEAP
                mov     bx, dx
                mov     es:[bx], ax
                mov     es, ax
                jmp     short loc_8919
; ---------------------------------------------------------------------------

loc_8965:                               ; CODE XREF: FASTBOOT+1EE↑j
                mov     ax, es:[si]
                test    bx, 0F000h
                jnz     short loc_897E
                test    word ptr es:0Ch, 2
                jz      short loc_8989
                cmp     es:8, si
                jnz     short loc_8989

loc_897E:                               ; CODE XREF: FASTBOOT+229↑j
                mov     ax, es:[si+2]
                xchg    ax, es:[si+6]
                xchg    ax, es:[si]

loc_8989:                               ; CODE XREF: FASTBOOT+232↑j
                                        ; FASTBOOT+239↑j
                mov     [bp+var_6], ax
                sub     ax, cs:CPSHRUNK
                mov     cs:word_84B8, ax
                test    byte ptr es:[si+4], 2
                jnz     short loc_89C1
                push    es
                push    si
                call    FINDFREESEG
                jcxz    short loc_89BA
                test    byte ptr es:[si+4], 10h
                jnz     short loc_89BA
                push    [bp+var_2]
                push    [bp+var_6]
                push    es
                push    si
                push    di
                push    cx
                call    LOADFIXEDSEG

loc_89B7:                               ; CODE XREF: FASTBOOT+27C↓j
                jmp     loc_8919
; ---------------------------------------------------------------------------

loc_89BA:                               ; CODE XREF: FASTBOOT+25E↑j
                                        ; FASTBOOT+265↑j
                push    es
                push    si
                call    ALLOCSEG
                jz      short loc_89B7

loc_89C1:                               ; CODE XREF: FASTBOOT+257↑j
                cmp     es:8, si
                jnz     short loc_89F5
                test    byte ptr es:[si+4], 10h
                jz      short loc_89F5
                push    es
                push    si
                call    FINDFREESEG
                mov     ax, es:[si+6]
                add     ax, es:12h
                add     ax, es:10h
                xor     dx, dx
                mov     cx, 2
                push    es
                push    word ptr es:[si+8]
                push    dx
                push    ax
                push    cx
                nop
                push    cs
                call    near ptr GLOBALREALLOC
                pop     es

loc_89F5:                               ; CODE XREF: FASTBOOT+283↑j
                                        ; FASTBOOT+28A↑j
                push    cs:HINITMEM
                call    MYLOCK
                mov     cs:SEGINITMEM, ax
                mov     ax, [bp+var_6]
                add     ax, cs:SEGINITMEM
                sub     ax, cs:CPSHRUNK
                mov     cx, 0FFFFh
                push    [bp+var_2]
                push    di
                push    ax
                push    cx
                call    LOADSEGMENT
                jmp     loc_8919
; ---------------------------------------------------------------------------

loc_8A1D:                               ; CODE XREF: FASTBOOT+1E4↑j
                cld
                mov     es, [bp+var_2]
                mov     si, es:24h
                cmp     si, es:26h
                jnz     short loc_8A30
                jmp     loc_8AC4
; ---------------------------------------------------------------------------

loc_8A30:                               ; CODE XREF: FASTBOOT+2E8↑j
                lods    word ptr es:[si]
                mov     [bp+var_9], al
                jmp     loc_8ABB
; ---------------------------------------------------------------------------

loc_8A38:                               ; CODE XREF: FASTBOOT+37E↓j
                lods    word ptr es:[si]
                mov     [bp+var_8], ax
                mov     word ptr es:[si], 3173h
                mov     word ptr es:[si+2], cs
                add     si, 4

loc_8A49:                               ; CODE XREF: FASTBOOT+376↓j
                test    word ptr es:[si+4], 40h
                jz      short loc_8AB3
                mov     dx, es:[si]
                push    es
                push    dx
                mov     ax, es:[si+4]
                and     ax, 10h
                mov     bx, es:[si+2]
                mov     cl, [bp+var_9]
                shl     bx, cl
                push    ax
                push    bx
                call    FINDFREESEG
                jcxz    short loc_8A8D
                test    byte ptr es:[si+4], 10h
                jz      short loc_8A78
                pop     dx
                pop     es
                jmp     short loc_8AB3
; ---------------------------------------------------------------------------

loc_8A78:                               ; CODE XREF: FASTBOOT+32F↑j
                xor     ax, ax
                push    ax
                push    ax
                nop
                push    cs
                call    near ptr GLOBALCOMPACT
                push    cs:HINITMEM
                call    MYLOCK
                mov     cs:SEGINITMEM, ax

loc_8A8D:                               ; CODE XREF: FASTBOOT+328↑j
                pop     dx
                pop     es
                xor     dx, dx
                xchg    dx, es:[si+8]
                xchg    dx, es:[si]
                mov     ax, cs:SEGINITMEM
                sub     ax, cs:CPSHRUNK
                add     ax, dx
                push    es
                mov     bx, 0FFFFh
                push    es
                push    si
                push    ax
                push    bx
                call    RESALLOC
                pop     es
                mov     es:[si+8], ax

loc_8AB3:                               ; CODE XREF: FASTBOOT+30C↑j
                                        ; FASTBOOT+333↑j
                add     si, 0Ch
                dec     [bp+var_8]
                jnz     short loc_8A49

loc_8ABB:                               ; CODE XREF: FASTBOOT+2F2↑j
                lods    word ptr es:[si]
                or      ax, ax
                jz      short loc_8AC4
                jmp     loc_8A38
; ---------------------------------------------------------------------------

loc_8AC4:                               ; CODE XREF: FASTBOOT+2EA↑j
                                        ; FASTBOOT+37C↑j
                push    es
                call    TRIMEXEHEADER
                mov     ax, [bp+var_4]
                or      ax, ax
                jnz     short loc_8AD2
                jmp     short FB6
; ---------------------------------------------------------------------------
                align 2

loc_8AD2:                               ; CODE XREF: FASTBOOT+38A↑j
                sub     ax, cs:CPSHRUNK
                mov     cs:word_84B8, ax
                push    cs:HINITMEM
                call    MYLOCK
                mov     cs:SEGINITMEM, ax
                add     ax, cs:word_84B8
                mov     es, ax
                mov     cx, es:0
                cmp     cx, 454Eh
                jnz     short loc_8AFC
                jmp     loc_87A8
; ---------------------------------------------------------------------------

loc_8AFC:                               ; CODE XREF: FASTBOOT+3B4↑j
                jcxz    short FB6
                push    ds
                push    es
                pop     ds
                push    cs
                pop     es
                assume es:cseg01
                mov     si, 2
                mov     di, 84BAh
                cld
                mov     word ptr cs:LPBOOTAPP, di
                mov     word ptr cs:LPBOOTAPP+2, es
                rep movsb
                xor     ax, ax
                stosb
                pop     ds

FB6:                                    ; CODE XREF: FASTBOOT+38C↑j
                                        ; FASTBOOT:loc_8AFC↑j
                push    cs:HINITMEM
                nop
                push    cs
                call    near ptr GLOBALFREE
                mov     cs:HINITMEM, ax
                call    near ptr INITFWDREF
                call    ENABLEINT21
                mov     bx, 7F3Bh
                mov     es, cs:TOPPDB
                assume es:nothing
                mov     word ptr cs:[bx+2], 80h
                mov     word ptr cs:[bx+4], es
                mov     word ptr cs:[bx+6], offset WIN_SHOW
                mov     word ptr cs:[bx+8], cs
                mov     word ptr cs:[bx+0Ah], 6Ch ; 'l'
                mov     word ptr cs:[bx+0Ch], es
                mov     ax, es:2Ch
                mov     cs:[bx], ax
                mov     es, cs:HEXEHEAD
                push    word ptr es:6

loc_8B65:                               ; CODE XREF: FASTBOOT+433↓j
                                        ; FASTBOOT+452↓j
                pop     cx
                jcxz    short loc_8B97
                mov     es, cx
                push    word ptr es:6
                xor     ax, ax
                cmp     es:16h, ax
                jz      short loc_8B65
                xor     bx, bx
                xor     dx, dx
                test    word ptr es:0Ch, 8000h
                jnz     short loc_8B8A
                mov     bx, offset BOOTEXECBLOCK
                mov     dx, cs

loc_8B8A:                               ; CODE XREF: FASTBOOT+440↑j
                mov     cx, 0FFFFh
                push    ax
                push    dx
                push    bx
                push    es
                push    cx
                call    STARTMODULE
                jmp     short loc_8B65
; ---------------------------------------------------------------------------

loc_8B97:                               ; CODE XREF: FASTBOOT+423↑j
                cmp     word ptr cs:LPBOOTAPP+2, 0
                jz      short loc_8BB3
                mov     bx, offset BOOTEXECBLOCK
                push    word ptr cs:LPBOOTAPP+2
                push    word ptr cs:LPBOOTAPP
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr LOADMODULE

loc_8BB3:                               ; CODE XREF: FASTBOOT+45A↑j
                mov     sp, bp
                pop     bp
                retn
FASTBOOT        endp


; =============== S U B R O U T I N E =======================================


BIGMOVE         proc near               ; CODE XREF: SHRINK+2C↑p
                mov     bx, dx
                mov     cl, 0Ch
                add     bx, 0FFFh
                shr     bx, cl
                xor     si, si
                xor     di, di
                cld
                jmp     short loc_8BDF
; ---------------------------------------------------------------------------

loc_8BC8:                               ; CODE XREF: BIGMOVE+29↓j
                sub     dx, 1000h
                mov     cx, 8000h
                rep movsw
                mov     ax, ds
                add     ax, 1000h
                mov     ds, ax
                assume ds:nothing
                mov     ax, es
                add     ax, 1000h
                mov     es, ax
                assume es:nothing

loc_8BDF:                               ; CODE XREF: BIGMOVE+F↑j
                dec     bx
                jnz     short loc_8BC8
                mov     cl, 3
                shl     dx, cl
                mov     cx, dx
                rep movsw
                retn
BIGMOVE         endp


; =============== S U B R O U T I N E =======================================


INITPROFILE     proc near               ; CODE XREF: FASTBOOT+62↑p
                push    ds
                push    si
                push    di
                mov     di, 0
                call    BUFFERINIT
                call    UNLOCKBUFFER
                pop     di
                pop     si
                pop     ds
                assume ds:nothing
                retn
INITPROFILE     endp


; =============== S U B R O U T I N E =======================================

; Might also be called "ENDINIT" (two symbols on same byte :v)
; Attributes: bp-based frame

INITLOADER      proc near               ; CODE XREF: BOOTSTRAP+27E↑j

var_A           = word ptr -0Ah
var_4           = dword ptr -4
arg_0           = word ptr  4

                push    bp
                mov     bp, sp
                sub     sp, 0Ah
                push    di
                push    si
                sub     si, si
                mov     dx, [bp+arg_0]
                sub     ax, ax
                or      al, 80h
                mov     word ptr [bp+var_4], ax
                mov     word ptr [bp+var_4+2], dx
                les     bx, [bp+var_4]
                assume es:nothing
                inc     word ptr [bp+var_4]
                cmp     byte ptr es:[bx], 0
                jnz     short loc_8C21
                jmp     loc_8CB8
; ---------------------------------------------------------------------------

loc_8C21:                               ; CODE XREF: INITLOADER+21↑j
                mov     bx, word ptr [bp+var_4]
                inc     word ptr [bp+var_4]
                cmp     byte ptr es:[bx], 20h ; ' '
                jz      short loc_8C30
                jmp     loc_8CB8
; ---------------------------------------------------------------------------

loc_8C30:                               ; CODE XREF: INITLOADER+30↑j
                mov     bx, word ptr [bp+var_4]
                inc     word ptr [bp+var_4]
                cmp     byte ptr es:[bx], 2Dh ; '-'
                jnz     short loc_8CB8
                mov     si, word ptr [bp+var_4]
                jmp     short loc_8C44
; ---------------------------------------------------------------------------

loc_8C41:                               ; CODE XREF: INITLOADER+50↓j
                inc     word ptr [bp+var_4]

loc_8C44:                               ; CODE XREF: INITLOADER+44↑j
                les     bx, [bp+var_4]
                cmp     byte ptr es:[bx], 20h ; ' '
                jg      short loc_8C41
                cmp     byte ptr es:[bx], 20h ; ' '
                jnz     short loc_8C58
                inc     word ptr [bp+var_4]
                jmp     short loc_8C5B
; ---------------------------------------------------------------------------

loc_8C58:                               ; CODE XREF: INITLOADER+56↑j
                les     bx, [bp+var_4]

loc_8C5B:                               ; CODE XREF: INITLOADER+5B↑j
                mov     byte ptr es:[bx], 0
                sub     di, di
                jmp     short loc_8C67
; ---------------------------------------------------------------------------

loc_8C63:                               ; CODE XREF: INITLOADER+73↓j
                inc     word ptr [bp+var_4]
                inc     di

loc_8C67:                               ; CODE XREF: INITLOADER+66↑j
                les     bx, [bp+var_4]
                cmp     byte ptr es:[bx], 20h ; ' '
                jge     short loc_8C63
                jmp     short loc_8C73
; ---------------------------------------------------------------------------

loc_8C72:                               ; CODE XREF: INITLOADER+82↓j
                dec     di

loc_8C73:                               ; CODE XREF: INITLOADER+75↑j
                dec     word ptr [bp+var_4]
                les     bx, [bp+var_4]
                cmp     byte ptr es:[bx], 20h ; ' '
                jz      short loc_8C72
                mov     [bp+var_A], di
                inc     word ptr [bp+var_4]
                mov     bx, word ptr [bp+var_4]
                mov     byte ptr es:[bx], 0
                jmp     short loc_8C9B
; ---------------------------------------------------------------------------

loc_8C8E:                               ; CODE XREF: INITLOADER+A5↓j
                les     bx, [bp+var_4]
                mov     al, es:[bx-1]
                mov     es:[bx], al
                dec     word ptr [bp+var_4]

loc_8C9B:                               ; CODE XREF: INITLOADER+91↑j
                mov     ax, di
                dec     di
                or      ax, ax
                jnz     short loc_8C8E
                les     bx, [bp+var_4]
                inc     word ptr [bp+var_4]
                mov     al, byte ptr [bp+var_A]
                mov     es:[bx], al
                mov     bx, [bp+var_A]
                add     bx, word ptr [bp+var_4]
                mov     byte ptr es:[bx], 0Dh

loc_8CB8:                               ; CODE XREF: INITLOADER+23↑j
                                        ; INITLOADER+32↑j ...
                mov     ax, si
                pop     si
                pop     di
                mov     sp, bp
                pop     bp
                retn    2
INITLOADER      endp

; ---------------------------------------------------------------------------
                db 0C8h
                db 0A6h
                db 0C8h
                db 0A5h
                db 0C8h
                db 0A5h
                db 0C8h
                db 0A5h
                db  1Fh
                db  1Fh
                db  1Eh
                db  1Fh
                db  1Eh
                db  1Fh
                db  1Fh
                db  1Eh
                db  1Fh
                db  1Eh
                db  1Fh
SZEMMXXX        db 'EMMXXXX0'
SZERRWRONGDOSVERSION db 'Incorrect DOS version$'
                                        ; DATA XREF: INITDOSVARP+2EC↓o
SZERRDOSWRONGVERSION db 'DOS 2.0 or greater required$'
                                        ; DATA XREF: INITDOSVARP:incorrect_dos_version↓o
SZERRWRONGDISKTRANSFERADDR db 'Disk transfer address does not match$'
                                        ; DATA XREF: INITDOSVARP:wrong_dta_address↓o
SZERRCTRLCNOTMATCH db 'Control-C flag does not match$'
                                        ; DATA XREF: INITDOSVARP:wrong_ctrlc_flag↓o
SZERRCURRENTPDBNOTFOUND db 'CurrentPDB not found$'
                                        ; DATA XREF: INITDOSVARP:no_current_pdb↓o
SZERRCURRENTPDBNOTMATCH db 'CurrentPDB does not match$'
                                        ; DATA XREF: INITDOSVARP:wrong_current_pdb↓o
SZERRINT22HNOTFOUND db 'DOS int 22h not found$'
                                        ; DATA XREF: INITDOSVARP:no_int_22h_handler↓o
SZERRMODENOTMATCH db 'Error mode flag does not match$'
                                        ; DATA XREF: INITDOSVARP:wrong_error_mode_flag↓o
SZERRCURRENTDRIVENOTMATCH db 'Current drive does not match$'
                                        ; DATA XREF: INITDOSVARP:wrong_current_drive↓o
                db 0Dh,0Ah,'$'
; ---------------------------------------------------------------------------

locret_8DD6:                            ; DATA XREF: INITDOSVARP+6D↓o
                iret

; =============== S U B R O U T I N E =======================================

; ax -> pointer to error message
; Attributes: bp-based frame

BOOTFAILUREEXIT proc near               ; CODE XREF: INITDOSVARP+2F1↓p
                                        ; INITDOSVARP+2F7↓p ...

arg_2           = dword ptr  6

                push    bp
                mov     bp, sp
                push    ds
                mov     ah, 9
                lds     dx, [bp+4]
                int     21h             ; DOS - PRINT STRING
                                        ; DS:DX -> string terminated by "$"
                pop     ds
                mov     sp, bp
                pop     bp
                retn    4
BOOTFAILUREEXIT endp

; ---------------------------------------------------------------------------
SZUSER          db 'USER',0             ; DATA XREF: INITFWDREF+4B↓o
SZSYSTEM        db 'SYSTEM',0           ; DATA XREF: INITFWDREF+7B↓o
SZNO1           db '#1',0               ; DATA XREF: INITFWDREF+57↓o
                                        ; INITFWDREF+87↓o ...
SZNO2           db '#2',0               ; DATA XREF: INITFWDREF+69↓o
                                        ; INITFWDREF+99↓o
SZKEYBOARD      db 'KEYBOARD',0         ; DATA XREF: INITFWDREF+AB↓o
SZNO5           db '#5',0               ; DATA XREF: INITFWDREF+B7↓o

; =============== S U B R O U T I N E =======================================


INITFWDREF      proc far                ; CODE XREF: SLOWBOOT+6D↑p
                                        ; SLOWBOOT+86↑p ...
                push    si
                push    di
                push    cs
                pop     ds
                assume ds:cseg01
                mov     ax, 3520h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr PREVINT20PROC, bx ; ""
                mov     word ptr PREVINT20PROC+2, es ; ""
                mov     ax, 3521h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr PREVINT21PROC, bx
                mov     word ptr PREVINT21PROC+2, es
                mov     ax, 3524h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr PREVINT24PROC, bx
                mov     word ptr PREVINT24PROC+2, es
                mov     ax, 3527h
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr PREVINT27PROC, bx ; ""
                mov     word ptr PREVINT27PROC+2, es ; ""
                mov     ah, 52h ; 'R'
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     ax, es:[bx+0Ch]
                mov     dx, es:[bx+0Eh]
                mov     word ptr PREVBCON, ax
                mov     word ptr PREVBCON+2, dx
                mov     bx, offset SZUSER ; "USER"
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETMODULEHANDLE
                mov     si, ax
                mov     bx, offset SZNO1 ; "#1"
                push    si
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS
                mov     word ptr PMBOXPROC, ax
                mov     word ptr PMBOXPROC+2, dx
                mov     bx, offset SZNO2 ; "#2"
                push    si
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS
                mov     word ptr PEXITPROC, ax
                mov     word ptr PEXITPROC+2, dx
                mov     bx, offset SZSYSTEM ; "SYSTEM"
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETMODULEHANDLE
                mov     si, ax
                mov     bx, offset SZNO1 ; "#1"
                push    si
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS
                mov     word ptr PSYSPROC, ax
                mov     word ptr PSYSPROC+2, dx
                mov     bx, offset SZNO2 ; "#2"
                push    si
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS
                mov     word ptr PTIMERPROC, ax
                mov     word ptr PTIMERPROC+2, dx
                mov     bx, offset SZKEYBOARD ; "KEYBOARD"
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETMODULEHANDLE
                mov     si, ax
                mov     bx, offset SZNO5 ; "#5"
                push    si
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS
                mov     word ptr PKEYPROC, ax
                mov     word ptr PKEYPROC+2, dx
                mov     bx, offset KEYINFO ; ""
                push    cs
                push    bx
                mov     bx, offset CHECKFAREAST
                push    cs
                push    bx
                mov     bx, offset SZNO1 ; "#1"
                push    si
                push    cs
                push    bx
                nop
                push    cs
                call    near ptr GETPROCADDRESS
                push    dx
                push    ax
                retf
INITFWDREF      endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================

; Unreferenced, dead code

CHECKFAREAST    proc near               ; DATA XREF: INITFWDREF+CE↑o
                mov     si, offset KEYINFO ; ""
                lodsw
                cmp     al, ah
                jbe     short loc_8EF5
                lodsw
                cmp     al, ah
                ja      short loc_8EF9

loc_8EF5:                               ; CODE XREF: CHECKFAREAST+6↑j
                inc     FFAREAST

loc_8EF9:                               ; CODE XREF: CHECKFAREAST+B↑j
                pop     di
                pop     si
                retn
CHECKFAREAST    endp ; sp-analysis failed


; =============== S U B R O U T I N E =======================================


TESTEMM         proc near               ; CODE XREF: INITDOSVARP:loc_91EB↓p
                push    ds
                xor     ax, ax
                mov     ds, ax
                les     di, dword ptr MSGCANNOTREADDRV+0Dh ; "rom drive "
                push    cs
                pop     ds
                mov     si, 8CD5h
                mov     di, 0Ah
                mov     cx, 8
                repe cmpsb
                jnz     short loc_8F30
                mov     ah, 40h ; '@'
                int     67h             ;  - LIM EMS - GET MANAGER STATUS
                                        ; Return: AH = status
                or      ah, ah
                jnz     short loc_8F30
                mov     ax, 4E03h
                int     67h             ;  - LIM EMS - GET OR SET PAGE MAP
                                        ; DS:SI -> array holding information
                                        ; ES:DI -> array to receive information
                                        ; if getting size of page-mapping array
                or      ah, ah
                jz      short loc_8F2C
                cmp     ah, 8Fh
                jnz     short loc_8F30
                mov     al, 17h

loc_8F2C:                               ; CODE XREF: TESTEMM+27↑j
                mov     cs:FEMM, al

loc_8F30:                               ; CODE XREF: TESTEMM+16↑j
                                        ; TESTEMM+1E↑j ...
                pop     ds
                assume ds:nothing
                retn
TESTEMM         endp


; =============== S U B R O U T I N E =======================================


INITDOSVARP     proc near               ; CODE XREF: BOOTSTRAP+D3↑p
                push    si
                push    di
                push    es
                push    ds
                push    cs
                pop     ds
                assume ds:cseg01
                mov     ax, 3521h       ; get the DOS int 21 handler
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     word ptr PREVINT21PROC, bx ; move it to kernel data segment for later WINOLDAP
                mov     word ptr PREVINT21PROC+2, es
                mov     ah, 30h ; '0'
                int     21h             ; DOS - GET DOS VERSION
                                        ; Return: AL = major version number (00h for DOS 1.x)
                cmp     al, 2           ; DOS 1.x?
                jb      short loc_8F51
                cmp     al, 4           ; DOS 4.x or later (MT-DOS/MDOS4 check)
                jb      short loc_8F54

loc_8F51:                               ; CODE XREF: INITDOSVARP+19↑j
                jmp     incorrect_dos_version
; ---------------------------------------------------------------------------

loc_8F54:                               ; CODE XREF: INITDOSVARP+1D↑j
                mov     DOS_VERSION, al
                mov     DOS_REVISION, ah
                mov     DOS_OEM, bl
                mov     bx, 28h ; '('
                cmp     al, 3
                jb      short loc_8F71
                mov     bx, 38h ; '8'
                cmp     ah, 0
                jz      short loc_8F71
                mov     bx, 35h ; '5'

loc_8F71:                               ; CODE XREF: INITDOSVARP+32↑j
                                        ; INITDOSVARP+3A↑j
                mov     FILEENTRYSIZE, bx
                mov     ah, 52h ; 'R'
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                lea     bx, [bx+4]
                mov     word ptr PFILETABLE, bx
                mov     word ptr PFILETABLE+2, es

loc_8F84:                               ; CODE XREF: INITDOSVARP+59↓j
                les     bx, es:[bx]
                cmp     word ptr es:[bx], 0FFFFh
                jnz     short loc_8F84
                mov     word ptr PSFTLINK, bx
                mov     word ptr PSFTLINK+2, es
                mov     ah, 35h ; '5'
                mov     al, 22h ; '"'
                int     21h             ; DOS - 2+ - GET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; Return: ES:BX = value of interrupt vector
                mov     ah, 25h ; '%'
                mov     al, 22h ; '"'
                mov     dx, offset locret_8DD6
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                xor     ax, ax
                mov     ds, ax
                mov     cx, cs
                mov     si, cs:INT22BASE
                cmp     [si], dx
                jnz     short loc_8FB8
                cmp     [si+2], cx
                jz      short loc_8FC6

loc_8FB8:                               ; CODE XREF: INITDOSVARP+7F↑j
                mov     si, 3C0h
                cmp     [si], dx
                jnz     short loc_8FC4
                cmp     [si+2], cx
                jz      short loc_8FC6

loc_8FC4:                               ; CODE XREF: INITDOSVARP+8B↑j
                xor     si, si

loc_8FC6:                               ; CODE XREF: INITDOSVARP+84↑j
                                        ; INITDOSVARP+90↑j
                mov     ax, es
                mov     ds, ax
                assume ds:nothing
                mov     dx, bx
                mov     ah, 25h ; '%'
                mov     al, 22h ; '"'
                int     21h             ; DOS - SET INTERRUPT VECTOR
                                        ; AL = interrupt number
                                        ; DS:DX = new vector to be used for specified interrupt
                mov     ax, cs
                mov     ds, ax
                assume ds:cseg01
                or      si, si
                jnz     short loc_8FDD
                jmp     no_int_22h_handler
; ---------------------------------------------------------------------------

loc_8FDD:                               ; CODE XREF: INITDOSVARP+A6↑j
                mov     INT22BASE, si
                cmp     DOS_VERSION, 3
                jb      short loc_9028
                cmp     DOS_REVISION, 0Ah
                jb      short loc_9064
                push    ds
                mov     ax, 5D06h
                int     21h             ; DOS - 3.1+ internal - GET ADDRESS OF DOS SWAPPABLE DATA AREA
                                        ; Return: CF set on error, CF clear if successful
                mov     ax, ds
                pop     ds
                assume ds:nothing
                mov     ds:40h, si
                mov     ds:42h, ax
                add     si, 0Ch
                mov     ds:2Ch, si
                mov     ds:2Eh, ax
                add     si, 4
                mov     ds:38h, si
                mov     ds:3Ah, ax
                add     si, 6
                mov     ds:3Ch, si
                mov     ds:3Eh, ax
                inc     si
                mov     ds:34h, si
                mov     ds:36h, ax
                jmp     loc_90AF
; ---------------------------------------------------------------------------

loc_9028:                               ; CODE XREF: INITDOSVARP+B4↑j
                cmp     byte ptr ds:51h, 19h
                jnz     short loc_9064
                mov     ah, 52h ; 'R'
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                mov     ax, es
                mov     word ptr ds:2Ch, 0E2h
                mov     ds:2Eh, ax
                mov     word ptr ds:3Ch, 123h
                mov     ds:3Eh, ax
                mov     word ptr ds:40h, 126h
                mov     ds:42h, ax
                mov     word ptr ds:38h, 18Eh
                mov     ds:3Ah, ax
                mov     word ptr ds:34h, 12Bh
                mov     ds:36h, ax
                jmp     short loc_90AF
; ---------------------------------------------------------------------------

loc_9064:                               ; CODE XREF: INITDOSVARP+BB↑j
                                        ; INITDOSVARP+FB↑j
                mov     ah, 2Fh ; '/'
                int     21h             ; DOS - GET DISK TRANSFER AREA ADDRESS
                                        ; Return: ES:BX -> DTA
                mov     cx, bx
                mov     dx, es
                mov     ah, 52h ; 'R'
                int     21h             ; DOS - 2+ internal - GET LIST OF LISTS
                                        ; Return: ES:BX -> DOS list of lists
                cmp     bx, 22h ; '"'
                jnz     short loc_90BE
                mov     ax, es
                mov     byte ptr ds:51h, 5
                mov     word ptr ds:4Ch, 35h ; '5'
                mov     word ptr ds:40h, 19Bh
                mov     ds:42h, ax
                mov     word ptr ds:2Ch, 1B2h
                mov     ds:2Eh, ax
                mov     word ptr ds:38h, 14h
                mov     ds:3Ah, ax
                mov     word ptr ds:3Ch, 1BCh
                mov     ds:3Eh, ax
                mov     word ptr ds:34h, 174h
                mov     ds:36h, ax

loc_90AF:                               ; CODE XREF: INITDOSVARP+F3↑j
                                        ; INITDOSVARP+130↑j
                mov     ah, 34h ; '4'
                int     21h             ; DOS - 2+ internal - RETURN CritSectFlag (InDOS) POINTER
                mov     ds:30h, bx
                mov     word ptr ds:32h, es
                jmp     loc_91BC
; ---------------------------------------------------------------------------

loc_90BE:                               ; CODE XREF: INITDOSVARP+141↑j
                sub     bx, 1Bh
                cmp     es:[bx], cx
                jnz     short loc_90CC
                cmp     es:[bx+2], dx
                jz      short loc_90F3

loc_90CC:                               ; CODE XREF: INITDOSVARP+192↑j
                add     bx, 0Ah
                cmp     es:[bx], cx
                jnz     short loc_90DA
                cmp     es:[bx+2], dx
                jz      short loc_90F3

loc_90DA:                               ; CODE XREF: INITDOSVARP+1A0↑j
                cmp     byte ptr ds:50h, 3
                jnz     short loc_90F0
                add     bx, 202h
                cmp     es:[bx], cx
                jnz     short loc_90F0
                cmp     es:[bx+2], dx
                jz      short loc_90F3

loc_90F0:                               ; CODE XREF: INITDOSVARP+1AD↑j
                                        ; INITDOSVARP+1B6↑j
                jmp     wrong_dta_address
; ---------------------------------------------------------------------------

loc_90F3:                               ; CODE XREF: INITDOSVARP+198↑j
                                        ; INITDOSVARP+1A6↑j ...
                mov     ds:2Ch, bx
                mov     word ptr ds:2Eh, es
                mov     ah, 34h ; '4'
                int     21h             ; DOS - 2+ internal - RETURN CritSectFlag (InDOS) POINTER
                mov     ds:30h, bx
                mov     word ptr ds:32h, es
                mov     ah, 33h ; '3'
                mov     al, 0
                int     21h             ; DOS - EXTENDED CONTROL-BREAK CHECKING
                                        ; AL = 00h get state / 01h set state / 02h set AND get
                                        ; DL = 00h for OFF or 01h for ON
                cmp     byte ptr ds:50h, 3
                jnz     short loc_9120
                sub     bx, 1A8h
                cmp     es:[bx], dl
                jz      short loc_912B
                jmp     wrong_ctrlc_flag
; ---------------------------------------------------------------------------

loc_9120:                               ; CODE XREF: INITDOSVARP+1E0↑j
                add     bx, 5
                cmp     es:[bx], dl
                jz      short loc_912B
                jmp     wrong_ctrlc_flag
; ---------------------------------------------------------------------------

loc_912B:                               ; CODE XREF: INITDOSVARP+1E9↑j
                                        ; INITDOSVARP+1F4↑j
                mov     ds:34h, bx
                mov     word ptr ds:36h, es
                sub     bx, 2
                cmp     byte ptr ds:50h, 3
                jz      short loc_9142
                les     bx, ds:30h
                inc     bx

loc_9142:                               ; CODE XREF: INITDOSVARP+209↑j
                mov     ds:40h, bx
                mov     word ptr ds:42h, es
                les     bx, ds:30h
                add     bx, 5
                cmp     byte ptr ds:50h, 3
                jz      short loc_915B
                sub     bx, 8

loc_915B:                               ; CODE XREF: INITDOSVARP+224↑j
                mov     ds:3Ch, bx
                mov     word ptr ds:3Eh, es
                les     bx, ds:34h
                cld
                mov     dx, bx
                add     dx, 0C8h

loc_916E:                               ; CODE XREF: INITDOSVARP+24E↓j
                                        ; INITDOSVARP+259↓j
                inc     bx
                cmp     bx, dx
                jb      short loc_9176
                jmp     no_current_pdb
; ---------------------------------------------------------------------------

loc_9176:                               ; CODE XREF: INITDOSVARP+23F↑j
                mov     di, bx
                mov     si, 8CC2h
                mov     cx, 9
                repe cmpsb
                jnz     short loc_916E
                inc     di
                mov     si, 8CCBh
                mov     cx, 0Ah
                repe cmpsb
                jnz     short loc_916E
                mov     bx, di
                mov     ax, ds:10h
                cmp     byte ptr ds:50h, 3
                jz      short loc_91A9
                cmp     ax, es:[bx]
                jz      short loc_91B4
                add     bx, 4
                cmp     ax, es:[bx]
                jz      short loc_91B4
                jmp     short wrong_current_pdb
; ---------------------------------------------------------------------------
                db 90h
; ---------------------------------------------------------------------------

loc_91A9:                               ; CODE XREF: INITDOSVARP+265↑j
                mov     bx, 188h
                cmp     ax, es:[bx]
                jz      short loc_91B4
                jmp     short wrong_current_pdb
; ---------------------------------------------------------------------------
                align 2

loc_91B4:                               ; CODE XREF: INITDOSVARP+26A↑j
                                        ; INITDOSVARP+272↑j ...
                mov     ds:38h, bx
                mov     word ptr ds:3Ah, es

loc_91BC:                               ; CODE XREF: INITDOSVARP+189↑j
                les     bx, ds:38h
                mov     ax, ds:10h
                cmp     es:[bx], ax
                jnz     short wrong_current_pdb
                les     bx, ds:40h
                cmp     byte ptr es:[bx], 0
                jnz     short wrong_error_mode_flag
                mov     ah, 19h
                int     21h             ; DOS - GET DEFAULT DISK NUMBER
                mov     dl, al
                mov     ah, 0Eh
                int     21h             ; DOS - SELECT DISK
                                        ; DL = new default drive number (0 = A, 1 = B, etc.)
                                        ; Return: AL = number of logical drives
                cmp     al, 14h
                jnb     short loc_91EB
                xchg    al, dl
                les     bx, ds:3Ch
                cmp     es:[bx], al
                jnz     short wrong_current_drive

loc_91EB:                               ; CODE XREF: INITDOSVARP+2AC↑j
                call    TESTEMM
                mov     ax, 0FFFFh
                jmp     short loc_9236
; ---------------------------------------------------------------------------
                align 2

incorrect_dos_version:                  ; CODE XREF: INITDOSVARP:loc_8F51↑j
                mov     ax, offset SZERRDOSWRONGVERSION ; "DOS 2.0 or greater required$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------

wrong_dta_address:                      ; CODE XREF: INITDOSVARP:loc_90F0↑j
                mov     ax, offset SZERRWRONGDISKTRANSFERADDR ; "Disk transfer address does not match$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------

wrong_ctrlc_flag:                       ; CODE XREF: INITDOSVARP+1EB↑j
                                        ; INITDOSVARP+1F6↑j
                mov     ax, offset SZERRCTRLCNOTMATCH ; "Control-C flag does not match$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------

no_current_pdb:                         ; CODE XREF: INITDOSVARP+241↑j
                mov     ax, offset SZERRCURRENTPDBNOTFOUND ; "CurrentPDB not found$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------

wrong_current_pdb:                      ; CODE XREF: INITDOSVARP+274↑j
                                        ; INITDOSVARP+27F↑j ...
                mov     ax, offset SZERRCURRENTPDBNOTMATCH ; "CurrentPDB does not match$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------
                align 2

no_int_22h_handler:                     ; CODE XREF: INITDOSVARP+A8↑j
                mov     ax, offset SZERRINT22HNOTFOUND ; "DOS int 22h not found$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------
                align 2

wrong_error_mode_flag:                  ; CODE XREF: INITDOSVARP+29E↑j
                mov     ax, offset SZERRMODENOTMATCH ; "Error mode flag does not match$"
                jmp     short print_boot_error
; ---------------------------------------------------------------------------
                align 2

wrong_current_drive:                    ; CODE XREF: INITDOSVARP+2B7↑j
                mov     ax, offset SZERRCURRENTDRIVENOTMATCH ; "Current drive does not match$"

print_boot_error:                       ; CODE XREF: INITDOSVARP+2C5↑j
                                        ; INITDOSVARP+2CA↑j ...
                push    ax
                mov     ax, offset SZERRWRONGDOSVERSION ; "Incorrect DOS version$"
                push    cs
                push    ax
                call    BOOTFAILUREEXIT
                pop     ax
                push    cs
                push    ax
                call    BOOTFAILUREEXIT

print_string_terminator:
                mov     ax, 8DD3h
                push    cs
                push    ax
                call    BOOTFAILUREEXIT
                xor     ax, ax

loc_9236:                               ; CODE XREF: INITDOSVARP+2BF↑j
                pop     ds
                pop     es
                pop     di
                pop     si
                retn
INITDOSVARP     endp


; =============== S U B R O U T I N E =======================================


GINIT           proc near               ; CODE XREF: GLOBALINIT:loc_934C↓p
                lea     si, [bx+1]
                and     si, 0FFFEh
                lea     di, [si+2]
                and     di, 0FFFEh
                add     cx, 0Fh
                shr     cx, 1
                shr     cx, 1
                shr     cx, 1
                shr     cx, 1
                sub     cx, dx
                neg     cx
                and     cl, 0FEh
                dec     dx
                and     dl, 0FEh
                dec     ax
                and     al, 0FEh
                mov     ds, si
                xor     bx, bx
                mov     byte ptr [bx], 4Dh ; 'M'
                mov     word ptr [bx+3], 1
                mov     word ptr [bx+1], 0FFFFh
                mov     [bx+5], bl
                mov     word ptr [bx+6], ds
                mov     [bx+8], di
                mov     [bx+0Ah], bx
                push    ds
                mov     ds, dx
                mov     byte ptr [bx], 5Ah ; 'Z'
                mov     word ptr [bx+3], 1
                mov     word ptr [bx+1], 0FFFFh
                mov     word ptr [bx+8], ds
                mov     [bx+5], bl
                mov     [bx+0Ah], bx
                push    ds
                mov     [bx+6], cx
                mov     ds, cx
                mov     [bx+8], dx
                sub     dx, cx
                dec     dx
                mov     byte ptr [bx], 4Dh ; 'M'
                mov     [bx+3], dx
                mov     word ptr [bx+1], 0FFFFh
                mov     [bx+5], bl
                mov     [bx+0Ah], bx
                mov     [bx+0Ch], bx
                mov     [bx+0Eh], bx
                push    ax
                push    ds
                push    dx
                mov     [bx+6], ax
                mov     ds, ax
                mov     [bx+8], cx
                sub     cx, ax
                dec     cx
                mov     byte ptr [bx], 4Dh ; 'M'
                mov     [bx+3], cx
                mov     word ptr [bx+1], 0FFFFh
                mov     [bx+5], bl
                mov     [bx+0Ah], bx
                mov     [bx+0Ch], bx
                mov     [bx+0Eh], bx
                mov     [bx+6], di
                mov     ds, di
                mov     [bx+8], ax
                sub     ax, di
                dec     ax
                mov     byte ptr [bx], 4Dh ; 'M'
                mov     [bx+1], bx
                mov     [bx+3], ax
                mov     [bx+6], si
                mov     [bx+0Ah], bx
                pop     cx
                pop     dx
                shl     cx, 1
                shl     cx, 1
                shl     cx, 1
                push    cx
                inc     dx
                mov     es, dx
                xor     ax, ax
                xor     di, di
                rep stosw
                mov     ds, dx
                pop     cx
                shl     cx, 1
                pop     ax
                pop     dx
                pop     bx
                retn
GINIT           endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

GLOBALINIT      proc far                ; CODE XREF: BOOTSTRAP+C7↑p

arg_0           = word ptr  6
arg_2           = word ptr  8
arg_4           = word ptr  0Ah
arg_6           = word ptr  0Ch

                inc     bp
                push    bp
                mov     bp, sp
                push    ds
                push    si
                push    di
                mov     ax, [bp+arg_4]
                mov     bx, [bp+arg_2]
                mov     cx, [bp+arg_6]
                mov     dx, [bp+arg_0]
                or      bx, bx
                jnz     short loc_934C
                not     bx
                mov     ah, 48h ; 'H'
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                jnb     short loc_9347
                mov     ah, 48h ; 'H'
                int     21h             ; DOS - 2+ - ALLOCATE MEMORY
                                        ; BX = number of 16-byte paragraphs desired
                jb      short loc_9347
                mov     dx, ax
                add     bx, ax
                xchg    bx, dx
                mov     ax, dx
                sub     ax, 800h
                jmp     short loc_934C
; ---------------------------------------------------------------------------

loc_9347:                               ; CODE XREF: GLOBALINIT+1D↑j
                                        ; GLOBALINIT+23↑j
                xor     ax, ax
                jmp     short loc_93BD
; ---------------------------------------------------------------------------
                align 2

loc_934C:                               ; CODE XREF: GLOBALINIT+15↑j
                                        ; GLOBALINIT+30↑j
                call    GINIT
                mov     cs:PGLOBALHEAP, ds
                xor     di, di
                mov     [di+6], bx
                mov     [di+8], dx
                mov     word ptr [di+4], 5
                mov     [di+1Ah], di
                mov     [di+18h], di
                mov     [di+1Eh], di
                mov     word ptr [di+12h], 20h ; ' '
                mov     word ptr [di+14h], 6BAEh
                lea     bx, [di+23h]
                and     bl, 0FCh
                mov     [di+0Eh], bx
                sub     cx, 3
                and     cl, 0FCh
                sub     cx, bx
                shr     cx, 1
                shr     cx, 1
                mov     [bx], cx
                inc     bx
                inc     bx
                mov     [di+10h], bx
                mov     di, bx
                call    HTHREAD
                xor     ax, ax
                stosw
                xor     di, di
                mov     ax, ds
                call    HALLOC
                mov     ax, [bx]
                dec     ax
                mov     es, ax
                mov     es:[di+0Ah], bx
                mov     cs:HGLOBALHEAP, bx
                mov     es, word ptr es:[di+6]
                mov     ax, es
                inc     ax
                push    es
                call    HALLOC
                pop     es
                mov     es:[di+0Ah], bx

loc_93BD:                               ; CODE XREF: GLOBALINIT+34↑j
                mov     cx, ax
                pop     di
                pop     si
                sub     bp, 2
                mov     sp, bp
                pop     ds
                pop     bp
                dec     bp
                retf    8
GLOBALINIT      endp

; ---------------------------------------------------------------------------
                align 8
                db 4Dh, 2 dup(0FFh), 29h, 0Ch dup(0), 4Dh, 2 dup(0FFh)
                db 28h, 16h dup(0)
word_93FA       dw 0                    ; DATA XREF: BOOTSTRAP+54↑w
word_93FC       dw 0                    ; DATA XREF: BOOTSTRAP+4B↑w
word_93FE       dw 0                    ; DATA XREF: BOOTSTRAP+46↑w
                db 470h dup(0), 20h dup(0FFh)
cseg01          ends


                end BOOTSTRAP
